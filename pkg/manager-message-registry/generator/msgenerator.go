package main

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"

	sf "stash.us.cray.com/rabsw/nnf-ec/internal/rfsf/pkg/models"
)

func main() {
	if len(os.Args) != 2 {
		fail(fmt.Errorf("expected exactly one argument <registry.json>"))
	}

	filename := os.Args[1]

	data, err := os.ReadFile(filename)
	if err != nil {
		fail(fmt.Errorf("failed to read file %s: %v", filename, err))
	}

	model := sf.MessageRegistryV142MessageRegistry{}

	if err := json.Unmarshal(data, &model); err != nil {
		fail(fmt.Errorf("failed to unmarshal %s: %v", filename, err))
	}

	outputfilename := strings.Replace(filename, "json", "go", 1)
	file, err := os.OpenFile(outputfilename, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0666)
	if err != nil {
		fail(fmt.Errorf("failed to open output file %s: %v", outputfilename, err))
	}
	defer file.Close()

	fmt.Fprintf(file, "// Code generated by msgenerator %s; DO NOT EDIT\n", filename)
	fmt.Fprintf(file, "\n")
	fmt.Fprintf(file, "package messageregistry\n")
	fmt.Fprintf(file, "\n")
	fmt.Fprintf(file, "import events \"stash.us.cray.com/rabsw/nnf-ec/pkg/manager-event\"\n")
	fmt.Fprintf(file, "\n")

	methodSuffix := fmt.Sprintf("%s", model.RegistryPrefix)
	for method, message := range model.Messages {
		methodParams, methodParamBody, methodParamDescriptors := parseParams(message)

		fmt.Fprintf(file, "%s", methodParamDescriptors)
		fmt.Fprintf(file, "func %s%s(%s) events.Event {\n", method, methodSuffix, methodParams)

		fmt.Fprintf(file, "\treturn events.Event{\n")

		fmt.Fprintf(file, "\t\tMessage: \"%s\",\n", message.Message)
		fmt.Fprintf(file, "\t\tMessageSeverity: \"%s\",\n", message.MessageSeverity)
		fmt.Fprintf(file, "\t\tMessageId: \"%s.%s.%s\",\n", model.RegistryPrefix, model.RegistryVersion, method)

		fmt.Fprintf(file, "\t\t%s\n", methodParamBody)
		fmt.Fprintf(file, "\t}\n")
		fmt.Fprintf(file, "}\n\n")
	}
}

func parseParams(msg sf.MessageRegistryV142Message) (string, string, string) {

	params := ""
	paramsBody := ""
	paramsDescriptors := ""

	for i := 0; i < int(msg.NumberOfArgs); i++ {
		first := i == 0
		last := i == int(msg.NumberOfArgs)-1

		continuation := " string"
		if !last {
			continuation = ", "
		}

		params += fmt.Sprintf("arg%d%s", i, continuation)

		if first {
			paramsBody = "MessageArgs: []string{"
		}

		paramsBody += fmt.Sprintf("arg%d,", i)

		if last {
			paramsBody += "},"
		}

		if i < len(msg.ArgDescriptions) && i < len(msg.ArgLongDescriptions) {
			paramsDescriptors += fmt.Sprintf("// arg%d: %s %s\n", i, msg.ArgDescriptions[i], msg.ArgLongDescriptions[i])
		}
	}

	return params, paramsBody, paramsDescriptors
}

func fail(err error) {
	fmt.Fprintf(os.Stderr, "Error: %v\n", err)
	os.Exit(1)
}
