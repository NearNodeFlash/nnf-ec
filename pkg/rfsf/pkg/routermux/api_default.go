/*
 * Swordfish API
 *
 * This contains the definition of the Swordfish extensions to a Redfish service.
 *
 * API version: v1.2.c
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package routermux

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	openapi "github.com/nearnodeflash/nnf-ec/pkg/rfsf/pkg/models"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{service: s}
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"RedfishV1AccountServiceAccountsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/Accounts",
			c.RedfishV1AccountServiceAccountsGet,
		},
		{
			"RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}/Certificates/{CertificateId}",
			c.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}/Certificates/{CertificateId}",
			c.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet,
		},
		{
			"RedfishV1AccountServiceAccountsManagerAccountIdCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}/Certificates",
			c.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesGet,
		},
		{
			"RedfishV1AccountServiceAccountsManagerAccountIdCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}/Certificates",
			c.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesPost,
		},
		{
			"RedfishV1AccountServiceAccountsManagerAccountIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1AccountServiceAccountsManagerAccountIdDelete,
		},
		{
			"RedfishV1AccountServiceAccountsManagerAccountIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1AccountServiceAccountsManagerAccountIdGet,
		},
		{
			"RedfishV1AccountServiceAccountsManagerAccountIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1AccountServiceAccountsManagerAccountIdPatch,
		},
		{
			"RedfishV1AccountServiceAccountsManagerAccountIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/AccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1AccountServiceAccountsManagerAccountIdPut,
		},
		{
			"RedfishV1AccountServiceAccountsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/Accounts",
			c.RedfishV1AccountServiceAccountsPost,
		},
		{
			"RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/ActiveDirectory/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/ActiveDirectory/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/AccountService/ActiveDirectory/Certificates/{CertificateId}",
			c.RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/ActiveDirectory/Certificates/{CertificateId}",
			c.RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdGet,
		},
		{
			"RedfishV1AccountServiceActiveDirectoryCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/ActiveDirectory/Certificates",
			c.RedfishV1AccountServiceActiveDirectoryCertificatesGet,
		},
		{
			"RedfishV1AccountServiceActiveDirectoryCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/ActiveDirectory/Certificates",
			c.RedfishV1AccountServiceActiveDirectoryCertificatesPost,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/AccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates/{CertificateId}",
			c.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates/{CertificateId}",
			c.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates",
			c.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates",
			c.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/AccountService/ExternalAccountProviders/{ExternalAccountProviderId}",
			c.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdDelete,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/ExternalAccountProviders/{ExternalAccountProviderId}",
			c.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdGet,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/AccountService/ExternalAccountProviders/{ExternalAccountProviderId}",
			c.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPatch,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/AccountService/ExternalAccountProviders/{ExternalAccountProviderId}",
			c.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPut,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/ExternalAccountProviders",
			c.RedfishV1AccountServiceExternalAccountProvidersGet,
		},
		{
			"RedfishV1AccountServiceExternalAccountProvidersPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/ExternalAccountProviders",
			c.RedfishV1AccountServiceExternalAccountProvidersPost,
		},
		{
			"RedfishV1AccountServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService",
			c.RedfishV1AccountServiceGet,
		},
		{
			"RedfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/LDAP/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/LDAP/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1AccountServiceLDAPCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/AccountService/LDAP/Certificates/{CertificateId}",
			c.RedfishV1AccountServiceLDAPCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1AccountServiceLDAPCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/LDAP/Certificates/{CertificateId}",
			c.RedfishV1AccountServiceLDAPCertificatesCertificateIdGet,
		},
		{
			"RedfishV1AccountServiceLDAPCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/LDAP/Certificates",
			c.RedfishV1AccountServiceLDAPCertificatesGet,
		},
		{
			"RedfishV1AccountServiceLDAPCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AccountService/LDAP/Certificates",
			c.RedfishV1AccountServiceLDAPCertificatesPost,
		},
		{
			"RedfishV1AccountServicePatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/AccountService",
			c.RedfishV1AccountServicePatch,
		},
		{
			"RedfishV1AccountServicePut",
			strings.ToUpper("Put"),
			"/redfish/v1/AccountService",
			c.RedfishV1AccountServicePut,
		},
		{
			"RedfishV1AccountServiceRolesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/Roles",
			c.RedfishV1AccountServiceRolesGet,
		},
		{
			"RedfishV1AccountServiceRolesRoleIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AccountService/Roles/{RoleId}",
			c.RedfishV1AccountServiceRolesRoleIdGet,
		},
		{
			"RedfishV1AccountServiceRolesRoleIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/AccountService/Roles/{RoleId}",
			c.RedfishV1AccountServiceRolesRoleIdPatch,
		},
		{
			"RedfishV1AccountServiceRolesRoleIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/AccountService/Roles/{RoleId}",
			c.RedfishV1AccountServiceRolesRoleIdPut,
		},
		{
			"RedfishV1AggregationServiceActionsAggregationServiceResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AggregationService/Actions/AggregationService.Reset",
			c.RedfishV1AggregationServiceActionsAggregationServiceResetPost,
		},
		{
			"RedfishV1AggregationServiceActionsAggregationServiceSetDefaultBootOrderPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AggregationService/Actions/AggregationService.SetDefaultBootOrder",
			c.RedfishV1AggregationServiceActionsAggregationServiceSetDefaultBootOrderPost,
		},
		{
			"RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateAddElementsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AggregationService/Aggregates/{AggregateId}/Actions/Aggregate.AddElements",
			c.RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateAddElementsPost,
		},
		{
			"RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateRemoveElementsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AggregationService/Aggregates/{AggregateId}/Actions/Aggregate.RemoveElements",
			c.RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateRemoveElementsPost,
		},
		{
			"RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AggregationService/Aggregates/{AggregateId}/Actions/Aggregate.Reset",
			c.RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateResetPost,
		},
		{
			"RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateSetDefaultBootOrderPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AggregationService/Aggregates/{AggregateId}/Actions/Aggregate.SetDefaultBootOrder",
			c.RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateSetDefaultBootOrderPost,
		},
		{
			"RedfishV1AggregationServiceAggregatesAggregateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/AggregationService/Aggregates/{AggregateId}",
			c.RedfishV1AggregationServiceAggregatesAggregateIdDelete,
		},
		{
			"RedfishV1AggregationServiceAggregatesAggregateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AggregationService/Aggregates/{AggregateId}",
			c.RedfishV1AggregationServiceAggregatesAggregateIdGet,
		},
		{
			"RedfishV1AggregationServiceAggregatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AggregationService/Aggregates",
			c.RedfishV1AggregationServiceAggregatesGet,
		},
		{
			"RedfishV1AggregationServiceAggregatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AggregationService/Aggregates",
			c.RedfishV1AggregationServiceAggregatesPost,
		},
		{
			"RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/AggregationService/AggregationSources/{AggregationSourceId}",
			c.RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdDelete,
		},
		{
			"RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AggregationService/AggregationSources/{AggregationSourceId}",
			c.RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdGet,
		},
		{
			"RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/AggregationService/AggregationSources/{AggregationSourceId}",
			c.RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdPatch,
		},
		{
			"RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/AggregationService/AggregationSources/{AggregationSourceId}",
			c.RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdPut,
		},
		{
			"RedfishV1AggregationServiceAggregationSourcesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AggregationService/AggregationSources",
			c.RedfishV1AggregationServiceAggregationSourcesGet,
		},
		{
			"RedfishV1AggregationServiceAggregationSourcesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AggregationService/AggregationSources",
			c.RedfishV1AggregationServiceAggregationSourcesPost,
		},
		{
			"RedfishV1AggregationServiceConnectionMethodsConnectionMethodIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AggregationService/ConnectionMethods/{ConnectionMethodId}",
			c.RedfishV1AggregationServiceConnectionMethodsConnectionMethodIdGet,
		},
		{
			"RedfishV1AggregationServiceConnectionMethodsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AggregationService/ConnectionMethods",
			c.RedfishV1AggregationServiceConnectionMethodsGet,
		},
		{
			"RedfishV1AggregationServiceConnectionMethodsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/AggregationService/ConnectionMethods",
			c.RedfishV1AggregationServiceConnectionMethodsPost,
		},
		{
			"RedfishV1AggregationServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/AggregationService",
			c.RedfishV1AggregationServiceGet,
		},
		{
			"RedfishV1AggregationServicePatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/AggregationService",
			c.RedfishV1AggregationServicePatch,
		},
		{
			"RedfishV1AggregationServicePut",
			strings.ToUpper("Put"),
			"/redfish/v1/AggregationService",
			c.RedfishV1AggregationServicePut,
		},
		{
			"RedfishV1CertificateServiceActionsCertificateServiceGenerateCSRPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CertificateService/Actions/CertificateService.GenerateCSR",
			c.RedfishV1CertificateServiceActionsCertificateServiceGenerateCSRPost,
		},
		{
			"RedfishV1CertificateServiceActionsCertificateServiceReplaceCertificatePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CertificateService/Actions/CertificateService.ReplaceCertificate",
			c.RedfishV1CertificateServiceActionsCertificateServiceReplaceCertificatePost,
		},
		{
			"RedfishV1CertificateServiceCertificateLocationsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CertificateService/CertificateLocations",
			c.RedfishV1CertificateServiceCertificateLocationsGet,
		},
		{
			"RedfishV1CertificateServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CertificateService",
			c.RedfishV1CertificateServiceGet,
		},
		{
			"RedfishV1ChassisChassisIdActionsChassisResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/Actions/Chassis.Reset",
			c.RedfishV1ChassisChassisIdActionsChassisResetPost,
		},
		{
			"RedfishV1ChassisChassisIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Assembly",
			c.RedfishV1ChassisChassisIdAssemblyGet,
		},
		{
			"RedfishV1ChassisChassisIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/Assembly",
			c.RedfishV1ChassisChassisIdAssemblyPatch,
		},
		{
			"RedfishV1ChassisChassisIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/Assembly",
			c.RedfishV1ChassisChassisIdAssemblyPut,
		},
		{
			"RedfishV1ChassisChassisIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Chassis/{ChassisId}",
			c.RedfishV1ChassisChassisIdDelete,
		},
		{
			"RedfishV1ChassisChassisIdDrivesDriveIdActionsDriveResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/Drives/{DriveId}/Actions/Drive.Reset",
			c.RedfishV1ChassisChassisIdDrivesDriveIdActionsDriveResetPost,
		},
		{
			"RedfishV1ChassisChassisIdDrivesDriveIdActionsDriveSecureErasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/Drives/{DriveId}/Actions/Drive.SecureErase",
			c.RedfishV1ChassisChassisIdDrivesDriveIdActionsDriveSecureErasePost,
		},
		{
			"RedfishV1ChassisChassisIdDrivesDriveIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ChassisChassisIdDrivesDriveIdAssemblyGet,
		},
		{
			"RedfishV1ChassisChassisIdDrivesDriveIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ChassisChassisIdDrivesDriveIdAssemblyPatch,
		},
		{
			"RedfishV1ChassisChassisIdDrivesDriveIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ChassisChassisIdDrivesDriveIdAssemblyPut,
		},
		{
			"RedfishV1ChassisChassisIdDrivesDriveIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Drives/{DriveId}",
			c.RedfishV1ChassisChassisIdDrivesDriveIdGet,
		},
		{
			"RedfishV1ChassisChassisIdDrivesDriveIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/Drives/{DriveId}",
			c.RedfishV1ChassisChassisIdDrivesDriveIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdDrivesDriveIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/Drives/{DriveId}",
			c.RedfishV1ChassisChassisIdDrivesDriveIdPut,
		},
		{
			"RedfishV1ChassisChassisIdDrivesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Drives",
			c.RedfishV1ChassisChassisIdDrivesGet,
		},
		{
			"RedfishV1ChassisChassisIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}",
			c.RedfishV1ChassisChassisIdGet,
		},
		{
			"RedfishV1ChassisChassisIdLogServicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/LogServices",
			c.RedfishV1ChassisChassisIdLogServicesGet,
		},
		{
			"RedfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceClearLogPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/LogServices/{LogServiceId}/Actions/LogService.ClearLog",
			c.RedfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceClearLogPost,
		},
		{
			"RedfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/LogServices/{LogServiceId}/Actions/LogService.CollectDiagnosticData",
			c.RedfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost,
		},
		{
			"RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/LogServices/{LogServiceId}/Entries",
			c.RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesGet,
		},
		{
			"RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Chassis/{ChassisId}/LogServices/{LogServiceId}/Entries/{LogEntryId}",
			c.RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdDelete,
		},
		{
			"RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/LogServices/{LogServiceId}/Entries/{LogEntryId}",
			c.RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdGet,
		},
		{
			"RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/LogServices/{LogServiceId}/Entries",
			c.RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesPost,
		},
		{
			"RedfishV1ChassisChassisIdLogServicesLogServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/LogServices/{LogServiceId}",
			c.RedfishV1ChassisChassisIdLogServicesLogServiceIdGet,
		},
		{
			"RedfishV1ChassisChassisIdLogServicesLogServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/LogServices/{LogServiceId}",
			c.RedfishV1ChassisChassisIdLogServicesLogServiceIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdLogServicesLogServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/LogServices/{LogServiceId}",
			c.RedfishV1ChassisChassisIdLogServicesLogServiceIdPut,
		},
		{
			"RedfishV1ChassisChassisIdMediaControllersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MediaControllers",
			c.RedfishV1ChassisChassisIdMediaControllersGet,
		},
		{
			"RedfishV1ChassisChassisIdMediaControllersMediaControllerIdActionsMediaControllerResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/MediaControllers/{MediaControllerId}/Actions/MediaController.Reset",
			c.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdActionsMediaControllerResetPost,
		},
		{
			"RedfishV1ChassisChassisIdMediaControllersMediaControllerIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MediaControllers/{MediaControllerId}",
			c.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdGet,
		},
		{
			"RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MediaControllers/{MediaControllerId}/Ports",
			c.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsGet,
		},
		{
			"RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdActionsPortResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/MediaControllers/{MediaControllerId}/Ports/{PortId}/Actions/Port.Reset",
			c.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdActionsPortResetPost,
		},
		{
			"RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MediaControllers/{MediaControllerId}/Ports/{PortId}",
			c.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdGet,
		},
		{
			"RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MediaControllers/{MediaControllerId}/Ports/{PortId}/Metrics",
			c.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdMetricsGet,
		},
		{
			"RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/MediaControllers/{MediaControllerId}/Ports/{PortId}",
			c.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/MediaControllers/{MediaControllerId}/Ports/{PortId}",
			c.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPut,
		},
		{
			"RedfishV1ChassisChassisIdMemoryDomainsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains",
			c.RedfishV1ChassisChassisIdMemoryDomainsGet,
		},
		{
			"RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains/{MemoryDomainId}",
			c.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGet,
		},
		{
			"RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains/{MemoryDomainId}/MemoryChunks",
			c.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGet,
		},
		{
			"RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete,
		},
		{
			"RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet,
		},
		{
			"RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut,
		},
		{
			"RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/MemoryDomains/{MemoryDomainId}/MemoryChunks",
			c.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksPost,
		},
		{
			"RedfishV1ChassisChassisIdMemoryGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Memory",
			c.RedfishV1ChassisChassisIdMemoryGet,
		},
		{
			"RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryDisablePassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/Memory/{MemoryId}/Actions/Memory.DisablePassphrase",
			c.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryDisablePassphrasePost,
		},
		{
			"RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryOverwriteUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/Memory/{MemoryId}/Actions/Memory.OverwriteUnit",
			c.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryOverwriteUnitPost,
		},
		{
			"RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/Memory/{MemoryId}/Actions/Memory.Reset",
			c.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryResetPost,
		},
		{
			"RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySecureEraseUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/Memory/{MemoryId}/Actions/Memory.SecureEraseUnit",
			c.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySecureEraseUnitPost,
		},
		{
			"RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySetPassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/Memory/{MemoryId}/Actions/Memory.SetPassphrase",
			c.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySetPassphrasePost,
		},
		{
			"RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryUnlockUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/Memory/{MemoryId}/Actions/Memory.UnlockUnit",
			c.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryUnlockUnitPost,
		},
		{
			"RedfishV1ChassisChassisIdMemoryMemoryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Memory/{MemoryId}",
			c.RedfishV1ChassisChassisIdMemoryMemoryIdGet,
		},
		{
			"RedfishV1ChassisChassisIdMemoryMemoryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/Memory/{MemoryId}",
			c.RedfishV1ChassisChassisIdMemoryMemoryIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdMemoryMemoryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/Memory/{MemoryId}",
			c.RedfishV1ChassisChassisIdMemoryMemoryIdPut,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters",
			c.RedfishV1ChassisChassisIdNetworkAdaptersGet,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdActionsNetworkAdapterResetSettingsToDefaultPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/Actions/NetworkAdapter.ResetSettingsToDefault",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdActionsNetworkAdapterResetSettingsToDefaultPost,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/Assembly",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyGet,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/Assembly",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPatch,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/Assembly",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPut,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdGet,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkDeviceFunctions",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsGet,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkDeviceFunctions/{NetworkDeviceFunctionId}/Ethernet/VLANs",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsGet,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkDeviceFunctions/{NetworkDeviceFunctionId}/Ethernet/VLANs",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsPost,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkDeviceFunctions/{NetworkDeviceFunctionId}/Ethernet/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdDelete,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkDeviceFunctions/{NetworkDeviceFunctionId}/Ethernet/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdGet,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkDeviceFunctions/{NetworkDeviceFunctionId}/Ethernet/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkDeviceFunctions/{NetworkDeviceFunctionId}/Ethernet/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPut,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkDeviceFunctions/{NetworkDeviceFunctionId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdGet,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkDeviceFunctions/{NetworkDeviceFunctionId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkDeviceFunctions/{NetworkDeviceFunctionId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPut,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkPorts",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsGet,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkPorts/{NetworkPortId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdGet,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkPorts/{NetworkPortId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/NetworkPorts/{NetworkPortId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPut,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/Ports",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsGet,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdActionsPortResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/Ports/{PortId}/Actions/Port.Reset",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdActionsPortResetPost,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/Ports/{PortId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdGet,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/Ports/{PortId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}/Ports/{PortId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPut,
		},
		{
			"RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/NetworkAdapters/{NetworkAdapterId}",
			c.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPut,
		},
		{
			"RedfishV1ChassisChassisIdPCIeDevicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices",
			c.RedfishV1ChassisChassisIdPCIeDevicesGet,
		},
		{
			"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}/Assembly",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyGet,
		},
		{
			"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}/Assembly",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPatch,
		},
		{
			"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}/Assembly",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPut,
		},
		{
			"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGet,
		},
		{
			"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}/PCIeFunctions",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet,
		},
		{
			"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}/PCIeFunctions/{PCIeFunctionId}",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet,
		},
		{
			"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPut,
		},
		{
			"RedfishV1ChassisChassisIdPCIeSlotsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeSlots",
			c.RedfishV1ChassisChassisIdPCIeSlotsGet,
		},
		{
			"RedfishV1ChassisChassisIdPCIeSlotsPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeSlots",
			c.RedfishV1ChassisChassisIdPCIeSlotsPatch,
		},
		{
			"RedfishV1ChassisChassisIdPCIeSlotsPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/PCIeSlots",
			c.RedfishV1ChassisChassisIdPCIeSlotsPut,
		},
		{
			"RedfishV1ChassisChassisIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}",
			c.RedfishV1ChassisChassisIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdPowerActionsPowerPowerSupplyResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/Power/Actions/Power.PowerSupplyReset",
			c.RedfishV1ChassisChassisIdPowerActionsPowerPowerSupplyResetPost,
		},
		{
			"RedfishV1ChassisChassisIdPowerGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Power",
			c.RedfishV1ChassisChassisIdPowerGet,
		},
		{
			"RedfishV1ChassisChassisIdPowerPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/Power",
			c.RedfishV1ChassisChassisIdPowerPatch,
		},
		{
			"RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Power/PowerSupplies/{PowerSupplyId}/Assembly",
			c.RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyGet,
		},
		{
			"RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/Power/PowerSupplies/{PowerSupplyId}/Assembly",
			c.RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPatch,
		},
		{
			"RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/Power/PowerSupplies/{PowerSupplyId}/Assembly",
			c.RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPut,
		},
		{
			"RedfishV1ChassisChassisIdPowerPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/Power",
			c.RedfishV1ChassisChassisIdPowerPut,
		},
		{
			"RedfishV1ChassisChassisIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}",
			c.RedfishV1ChassisChassisIdPut,
		},
		{
			"RedfishV1ChassisChassisIdSensorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Sensors",
			c.RedfishV1ChassisChassisIdSensorsGet,
		},
		{
			"RedfishV1ChassisChassisIdSensorsSensorIdActionsSensorResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis/{ChassisId}/Sensors/{SensorId}/Actions/Sensor.ResetMetrics",
			c.RedfishV1ChassisChassisIdSensorsSensorIdActionsSensorResetMetricsPost,
		},
		{
			"RedfishV1ChassisChassisIdSensorsSensorIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Sensors/{SensorId}",
			c.RedfishV1ChassisChassisIdSensorsSensorIdGet,
		},
		{
			"RedfishV1ChassisChassisIdSensorsSensorIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/Sensors/{SensorId}",
			c.RedfishV1ChassisChassisIdSensorsSensorIdPatch,
		},
		{
			"RedfishV1ChassisChassisIdSensorsSensorIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/Sensors/{SensorId}",
			c.RedfishV1ChassisChassisIdSensorsSensorIdPut,
		},
		{
			"RedfishV1ChassisChassisIdThermalFansFanIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Thermal/Fans/{FanId}/Assembly",
			c.RedfishV1ChassisChassisIdThermalFansFanIdAssemblyGet,
		},
		{
			"RedfishV1ChassisChassisIdThermalFansFanIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/Thermal/Fans/{FanId}/Assembly",
			c.RedfishV1ChassisChassisIdThermalFansFanIdAssemblyPatch,
		},
		{
			"RedfishV1ChassisChassisIdThermalFansFanIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/Thermal/Fans/{FanId}/Assembly",
			c.RedfishV1ChassisChassisIdThermalFansFanIdAssemblyPut,
		},
		{
			"RedfishV1ChassisChassisIdThermalGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis/{ChassisId}/Thermal",
			c.RedfishV1ChassisChassisIdThermalGet,
		},
		{
			"RedfishV1ChassisChassisIdThermalPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Chassis/{ChassisId}/Thermal",
			c.RedfishV1ChassisChassisIdThermalPatch,
		},
		{
			"RedfishV1ChassisChassisIdThermalPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Chassis/{ChassisId}/Thermal",
			c.RedfishV1ChassisChassisIdThermalPut,
		},
		{
			"RedfishV1ChassisGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Chassis",
			c.RedfishV1ChassisGet,
		},
		{
			"RedfishV1ChassisPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Chassis",
			c.RedfishV1ChassisPost,
		},
		{
			"RedfishV1CompositionServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService",
			c.RedfishV1CompositionServiceGet,
		},
		{
			"RedfishV1CompositionServicePatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService",
			c.RedfishV1CompositionServicePatch,
		},
		{
			"RedfishV1CompositionServicePut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService",
			c.RedfishV1CompositionServicePut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks",
			c.RedfishV1CompositionServiceResourceBlocksGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}/Actions/Drive.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}/Actions/Drive.SecureErase",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.DisablePassphrase",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.OverwriteUnit",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.SecureEraseUnit",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.SetPassphrase",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.UnlockUnit",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/MemoryMetrics/Actions/MemoryMetrics.ClearCurrentPeriod",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/MemoryMetrics",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/NetworkInterfaces/{NetworkInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/NetworkInterfaces/{NetworkInterfaceId}/NetworkDeviceFunctions",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/NetworkInterfaces/{NetworkInterfaceId}/NetworkPorts",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/NetworkInterfaces/{NetworkInterfaceId}/Ports",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/AccelerationFunctions/{AccelerationFunctionId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/AccelerationFunctions",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/Actions/Processor.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/ProcessorMetrics",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Actions/Processor.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/ProcessorMetrics",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/SimpleStorage/{SimpleStorageId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Actions/Storage.SetEncryptionKey",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Controllers",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}/Actions/Drive.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}/Actions/Drive.SecureErase",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}/Actions/Port.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}/Metrics",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerMemberId}/Ports",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Actions/ComputerSystem.AddResourceBlock",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Actions/ComputerSystem.RemoveResourceBlock",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Actions/ComputerSystem.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Actions/ComputerSystem.SetDefaultBootOrder",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Bios/Actions/Bios.ChangePassword",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Bios/Actions/Bios.ResetBios",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Bios",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Bios",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Bios",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Actions/LogService.ClearLog",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Actions/LogService.CollectDiagnosticData",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries/{LogEntryId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries/{LogEntryId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.DisablePassphrase",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.OverwriteUnit",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.SecureEraseUnit",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.SetPassphrase",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.UnlockUnit",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/MemoryMetrics/Actions/MemoryMetrics.ClearCurrentPeriod",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/MemoryMetrics",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemorySummary/MemoryMetrics/Actions/MemoryMetrics.ClearCurrentPeriod",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemorySummary/MemoryMetrics",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/NetworkInterfaces",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}/NetworkDeviceFunctions",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}/NetworkPorts",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}/Ports",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}/PCIeFunctions",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}/PCIeFunctions/{PCIeFunctionId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/ProcessorSummary/ProcessorMetrics",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/AccelerationFunctions/{AccelerationFunctionId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/AccelerationFunctions",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Actions/Processor.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/ProcessorMetrics",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Actions/Processor.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/ProcessorMetrics",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/Actions/SecureBoot.ResetKeys",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Actions/SecureBootDatabase.ResetKeys",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures/{SignatureId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures/{SignatureId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SimpleStorage",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SimpleStorage/{SimpleStorageId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Actions/Storage.SetEncryptionKey",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Actions/Drive.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Actions/Drive.SecureErase",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}/Actions/Port.Reset",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}/Metrics",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerMemberId}/Ports",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.EjectMedia",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.InsertMedia",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut,
		},
		{
			"RedfishV1CompositionServiceResourceZonesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceZones",
			c.RedfishV1CompositionServiceResourceZonesGet,
		},
		{
			"RedfishV1CompositionServiceResourceZonesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceZones",
			c.RedfishV1CompositionServiceResourceZonesPost,
		},
		{
			"RedfishV1CompositionServiceResourceZonesZoneIdActionsZoneAddEndpointPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceZones/{ZoneId}/Actions/Zone.AddEndpoint",
			c.RedfishV1CompositionServiceResourceZonesZoneIdActionsZoneAddEndpointPost,
		},
		{
			"RedfishV1CompositionServiceResourceZonesZoneIdActionsZoneRemoveEndpointPost",
			strings.ToUpper("Post"),
			"/redfish/v1/CompositionService/ResourceZones/{ZoneId}/Actions/Zone.RemoveEndpoint",
			c.RedfishV1CompositionServiceResourceZonesZoneIdActionsZoneRemoveEndpointPost,
		},
		{
			"RedfishV1CompositionServiceResourceZonesZoneIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/CompositionService/ResourceZones/{ZoneId}",
			c.RedfishV1CompositionServiceResourceZonesZoneIdDelete,
		},
		{
			"RedfishV1CompositionServiceResourceZonesZoneIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/CompositionService/ResourceZones/{ZoneId}",
			c.RedfishV1CompositionServiceResourceZonesZoneIdGet,
		},
		{
			"RedfishV1CompositionServiceResourceZonesZoneIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/CompositionService/ResourceZones/{ZoneId}",
			c.RedfishV1CompositionServiceResourceZonesZoneIdPatch,
		},
		{
			"RedfishV1CompositionServiceResourceZonesZoneIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/CompositionService/ResourceZones/{ZoneId}",
			c.RedfishV1CompositionServiceResourceZonesZoneIdPut,
		},
		{
			"RedfishV1EventServiceActionsEventServiceSubmitTestEventPost",
			strings.ToUpper("Post"),
			"/redfish/v1/EventService/Actions/EventService.SubmitTestEvent",
			c.RedfishV1EventServiceActionsEventServiceSubmitTestEventPost,
		},
		{
			"RedfishV1EventServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/EventService",
			c.RedfishV1EventServiceGet,
		},
		{
			"RedfishV1EventServicePatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/EventService",
			c.RedfishV1EventServicePatch,
		},
		{
			"RedfishV1EventServicePut",
			strings.ToUpper("Put"),
			"/redfish/v1/EventService",
			c.RedfishV1EventServicePut,
		},
		{
			"RedfishV1EventServiceSubscriptionsEventDestinationIdActionsEventDestinationResumeSubscriptionPost",
			strings.ToUpper("Post"),
			"/redfish/v1/EventService/Subscriptions/{EventDestinationId}/Actions/EventDestination.ResumeSubscription",
			c.RedfishV1EventServiceSubscriptionsEventDestinationIdActionsEventDestinationResumeSubscriptionPost,
		},
		{
			"RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/EventService/Subscriptions/{EventDestinationId}/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/EventService/Subscriptions/{EventDestinationId}/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/EventService/Subscriptions/{EventDestinationId}/Certificates/{CertificateId}",
			c.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/EventService/Subscriptions/{EventDestinationId}/Certificates/{CertificateId}",
			c.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdGet,
		},
		{
			"RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/EventService/Subscriptions/{EventDestinationId}/Certificates",
			c.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesGet,
		},
		{
			"RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/EventService/Subscriptions/{EventDestinationId}/Certificates",
			c.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesPost,
		},
		{
			"RedfishV1EventServiceSubscriptionsEventDestinationIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/EventService/Subscriptions/{EventDestinationId}",
			c.RedfishV1EventServiceSubscriptionsEventDestinationIdDelete,
		},
		{
			"RedfishV1EventServiceSubscriptionsEventDestinationIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/EventService/Subscriptions/{EventDestinationId}",
			c.RedfishV1EventServiceSubscriptionsEventDestinationIdGet,
		},
		{
			"RedfishV1EventServiceSubscriptionsEventDestinationIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/EventService/Subscriptions/{EventDestinationId}",
			c.RedfishV1EventServiceSubscriptionsEventDestinationIdPatch,
		},
		{
			"RedfishV1EventServiceSubscriptionsEventDestinationIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/EventService/Subscriptions/{EventDestinationId}",
			c.RedfishV1EventServiceSubscriptionsEventDestinationIdPut,
		},
		{
			"RedfishV1EventServiceSubscriptionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/EventService/Subscriptions",
			c.RedfishV1EventServiceSubscriptionsGet,
		},
		{
			"RedfishV1EventServiceSubscriptionsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/EventService/Subscriptions",
			c.RedfishV1EventServiceSubscriptionsPost,
		},
		{
			"RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Fabrics/{FabricId}/AddressPools/{AddressPoolId}",
			c.RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdDelete,
		},
		{
			"RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/AddressPools/{AddressPoolId}",
			c.RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdGet,
		},
		{
			"RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/AddressPools/{AddressPoolId}",
			c.RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/AddressPools/{AddressPoolId}",
			c.RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdPut,
		},
		{
			"RedfishV1FabricsFabricIdAddressPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/AddressPools",
			c.RedfishV1FabricsFabricIdAddressPoolsGet,
		},
		{
			"RedfishV1FabricsFabricIdAddressPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FabricId}/AddressPools",
			c.RedfishV1FabricsFabricIdAddressPoolsPost,
		},
		{
			"RedfishV1FabricsFabricIdConnectionsConnectionIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Fabrics/{FabricId}/Connections/{ConnectionId}",
			c.RedfishV1FabricsFabricIdConnectionsConnectionIdDelete,
		},
		{
			"RedfishV1FabricsFabricIdConnectionsConnectionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Connections/{ConnectionId}",
			c.RedfishV1FabricsFabricIdConnectionsConnectionIdGet,
		},
		{
			"RedfishV1FabricsFabricIdConnectionsConnectionIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/Connections/{ConnectionId}",
			c.RedfishV1FabricsFabricIdConnectionsConnectionIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdConnectionsConnectionIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/Connections/{ConnectionId}",
			c.RedfishV1FabricsFabricIdConnectionsConnectionIdPut,
		},
		{
			"RedfishV1FabricsFabricIdConnectionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Connections",
			c.RedfishV1FabricsFabricIdConnectionsGet,
		},
		{
			"RedfishV1FabricsFabricIdConnectionsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FabricId}/Connections",
			c.RedfishV1FabricsFabricIdConnectionsPost,
		},
		{
			"RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Fabrics/{FabricId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdDelete,
		},
		{
			"RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdGet,
		},
		{
			"RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPut,
		},
		{
			"RedfishV1FabricsFabricIdEndpointGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/EndpointGroups",
			c.RedfishV1FabricsFabricIdEndpointGroupsGet,
		},
		{
			"RedfishV1FabricsFabricIdEndpointGroupsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FabricId}/EndpointGroups",
			c.RedfishV1FabricsFabricIdEndpointGroupsPost,
		},
		{
			"RedfishV1FabricsFabricIdEndpointsEndpointIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Fabrics/{FabricId}/Endpoints/{EndpointId}",
			c.RedfishV1FabricsFabricIdEndpointsEndpointIdDelete,
		},
		{
			"RedfishV1FabricsFabricIdEndpointsEndpointIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Endpoints/{EndpointId}",
			c.RedfishV1FabricsFabricIdEndpointsEndpointIdGet,
		},
		{
			"RedfishV1FabricsFabricIdEndpointsEndpointIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/Endpoints/{EndpointId}",
			c.RedfishV1FabricsFabricIdEndpointsEndpointIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdEndpointsEndpointIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/Endpoints/{EndpointId}",
			c.RedfishV1FabricsFabricIdEndpointsEndpointIdPut,
		},
		{
			"RedfishV1FabricsFabricIdEndpointsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Endpoints",
			c.RedfishV1FabricsFabricIdEndpointsGet,
		},
		{
			"RedfishV1FabricsFabricIdEndpointsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FabricId}/Endpoints",
			c.RedfishV1FabricsFabricIdEndpointsPost,
		},
		{
			"RedfishV1FabricsFabricIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}",
			c.RedfishV1FabricsFabricIdGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches",
			c.RedfishV1FabricsFabricIdSwitchesGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdActionsSwitchResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Actions/Switch.Reset",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdActionsSwitchResetPost,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdActionsPortResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/Actions/Port.Reset",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdActionsPortResetPost,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT/{LPRTId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdDelete,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT/{LPRTId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT/{LPRTId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT/{LPRTId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPut,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet/{RouteId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet/{RouteId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet/{RouteId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet/{RouteId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT/{MPRTId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdDelete,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT/{MPRTId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT/{MPRTId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT/{MPRTId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPut,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet/{RouteId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet/{RouteId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet/{RouteId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet/{RouteId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/Metrics",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMetricsGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPut,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/VCAT",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/VCAT",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATPost,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/VCAT/{VCATEntryId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdDelete,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/VCAT/{VCATEntryId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdGet,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/VCAT/{VCATEntryId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}/Ports/{PortId}/VCAT/{VCATEntryId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPut,
		},
		{
			"RedfishV1FabricsFabricIdSwitchesSwitchIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/Switches/{SwitchId}",
			c.RedfishV1FabricsFabricIdSwitchesSwitchIdPut,
		},
		{
			"RedfishV1FabricsFabricIdZonesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Zones",
			c.RedfishV1FabricsFabricIdZonesGet,
		},
		{
			"RedfishV1FabricsFabricIdZonesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FabricId}/Zones",
			c.RedfishV1FabricsFabricIdZonesPost,
		},
		{
			"RedfishV1FabricsFabricIdZonesZoneIdActionsZoneAddEndpointPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FabricId}/Zones/{ZoneId}/Actions/Zone.AddEndpoint",
			c.RedfishV1FabricsFabricIdZonesZoneIdActionsZoneAddEndpointPost,
		},
		{
			"RedfishV1FabricsFabricIdZonesZoneIdActionsZoneRemoveEndpointPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FabricId}/Zones/{ZoneId}/Actions/Zone.RemoveEndpoint",
			c.RedfishV1FabricsFabricIdZonesZoneIdActionsZoneRemoveEndpointPost,
		},
		{
			"RedfishV1FabricsFabricIdZonesZoneIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Fabrics/{FabricId}/Zones/{ZoneId}",
			c.RedfishV1FabricsFabricIdZonesZoneIdDelete,
		},
		{
			"RedfishV1FabricsFabricIdZonesZoneIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FabricId}/Zones/{ZoneId}",
			c.RedfishV1FabricsFabricIdZonesZoneIdGet,
		},
		{
			"RedfishV1FabricsFabricIdZonesZoneIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Fabrics/{FabricId}/Zones/{ZoneId}",
			c.RedfishV1FabricsFabricIdZonesZoneIdPatch,
		},
		{
			"RedfishV1FabricsFabricIdZonesZoneIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Fabrics/{FabricId}/Zones/{ZoneId}",
			c.RedfishV1FabricsFabricIdZonesZoneIdPut,
		},
		{
			"RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FrabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT",
			c.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTGet,
		},
		{
			"RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FrabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet",
			c.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetGet,
		},
		{
			"RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FrabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet",
			c.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetPost,
		},
		{
			"RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FrabricId}/Switches/{SwitchId}/Ports/{PortId}/LPRT",
			c.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTPost,
		},
		{
			"RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FrabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT",
			c.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTGet,
		},
		{
			"RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics/{FrabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet",
			c.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetGet,
		},
		{
			"RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FrabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet",
			c.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetPost,
		},
		{
			"RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Fabrics/{FrabricId}/Switches/{SwitchId}/Ports/{PortId}/MPRT",
			c.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTPost,
		},
		{
			"RedfishV1FabricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Fabrics",
			c.RedfishV1FabricsGet,
		},
		{
			"RedfishV1FacilitiesFacilityIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Facilities/{FacilityId}",
			c.RedfishV1FacilitiesFacilityIdDelete,
		},
		{
			"RedfishV1FacilitiesFacilityIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Facilities/{FacilityId}",
			c.RedfishV1FacilitiesFacilityIdGet,
		},
		{
			"RedfishV1FacilitiesFacilityIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Facilities/{FacilityId}",
			c.RedfishV1FacilitiesFacilityIdPatch,
		},
		{
			"RedfishV1FacilitiesFacilityIdPowerDomainsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Facilities/{FacilityId}/PowerDomains",
			c.RedfishV1FacilitiesFacilityIdPowerDomainsGet,
		},
		{
			"RedfishV1FacilitiesFacilityIdPowerDomainsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Facilities/{FacilityId}/PowerDomains",
			c.RedfishV1FacilitiesFacilityIdPowerDomainsPost,
		},
		{
			"RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Facilities/{FacilityId}/PowerDomains/{PowerDomainId}",
			c.RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdDelete,
		},
		{
			"RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Facilities/{FacilityId}/PowerDomains/{PowerDomainId}",
			c.RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdGet,
		},
		{
			"RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Facilities/{FacilityId}/PowerDomains/{PowerDomainId}",
			c.RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPatch,
		},
		{
			"RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Facilities/{FacilityId}/PowerDomains/{PowerDomainId}",
			c.RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPut,
		},
		{
			"RedfishV1FacilitiesFacilityIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Facilities/{FacilityId}",
			c.RedfishV1FacilitiesFacilityIdPut,
		},
		{
			"RedfishV1FacilitiesFacilityIdSensorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Facilities/{FacilityId}/Sensors",
			c.RedfishV1FacilitiesFacilityIdSensorsGet,
		},
		{
			"RedfishV1FacilitiesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Facilities",
			c.RedfishV1FacilitiesGet,
		},
		{
			"RedfishV1FacilitiesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Facilities",
			c.RedfishV1FacilitiesPost,
		},
		{
			"RedfishV1Get",
			strings.ToUpper("Get"),
			"/redfish/v1",
			c.RedfishV1Get,
		},
		{
			"RedfishV1JobServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/JobService",
			c.RedfishV1JobServiceGet,
		},
		{
			"RedfishV1JobServiceJobsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/JobService/Jobs",
			c.RedfishV1JobServiceJobsGet,
		},
		{
			"RedfishV1JobServiceJobsJobIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/JobService/Jobs/{JobId}",
			c.RedfishV1JobServiceJobsJobIdDelete,
		},
		{
			"RedfishV1JobServiceJobsJobIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/JobService/Jobs/{JobId}",
			c.RedfishV1JobServiceJobsJobIdGet,
		},
		{
			"RedfishV1JobServiceJobsJobIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/JobService/Jobs/{JobId}",
			c.RedfishV1JobServiceJobsJobIdPatch,
		},
		{
			"RedfishV1JobServiceJobsJobIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/JobService/Jobs/{JobId}",
			c.RedfishV1JobServiceJobsJobIdPut,
		},
		{
			"RedfishV1JobServiceJobsJobIdStepsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/JobService/Jobs/{JobId}/Steps",
			c.RedfishV1JobServiceJobsJobIdStepsGet,
		},
		{
			"RedfishV1JobServiceJobsJobIdStepsJobId2Delete",
			strings.ToUpper("Delete"),
			"/redfish/v1/JobService/Jobs/{JobId}/Steps/{JobId2}",
			c.RedfishV1JobServiceJobsJobIdStepsJobId2Delete,
		},
		{
			"RedfishV1JobServiceJobsJobIdStepsJobId2Get",
			strings.ToUpper("Get"),
			"/redfish/v1/JobService/Jobs/{JobId}/Steps/{JobId2}",
			c.RedfishV1JobServiceJobsJobIdStepsJobId2Get,
		},
		{
			"RedfishV1JobServiceJobsJobIdStepsJobId2Patch",
			strings.ToUpper("Patch"),
			"/redfish/v1/JobService/Jobs/{JobId}/Steps/{JobId2}",
			c.RedfishV1JobServiceJobsJobIdStepsJobId2Patch,
		},
		{
			"RedfishV1JobServiceJobsJobIdStepsJobId2Put",
			strings.ToUpper("Put"),
			"/redfish/v1/JobService/Jobs/{JobId}/Steps/{JobId2}",
			c.RedfishV1JobServiceJobsJobIdStepsJobId2Put,
		},
		{
			"RedfishV1JobServiceJobsJobIdStepsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/JobService/Jobs/{JobId}/Steps",
			c.RedfishV1JobServiceJobsJobIdStepsPost,
		},
		{
			"RedfishV1JobServiceJobsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/JobService/Jobs",
			c.RedfishV1JobServiceJobsPost,
		},
		{
			"RedfishV1JobServiceLogActionsLogServiceClearLogPost",
			strings.ToUpper("Post"),
			"/redfish/v1/JobService/Log/Actions/LogService.ClearLog",
			c.RedfishV1JobServiceLogActionsLogServiceClearLogPost,
		},
		{
			"RedfishV1JobServiceLogActionsLogServiceCollectDiagnosticDataPost",
			strings.ToUpper("Post"),
			"/redfish/v1/JobService/Log/Actions/LogService.CollectDiagnosticData",
			c.RedfishV1JobServiceLogActionsLogServiceCollectDiagnosticDataPost,
		},
		{
			"RedfishV1JobServiceLogEntriesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/JobService/Log/Entries",
			c.RedfishV1JobServiceLogEntriesGet,
		},
		{
			"RedfishV1JobServiceLogEntriesLogEntryIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/JobService/Log/Entries/{LogEntryId}",
			c.RedfishV1JobServiceLogEntriesLogEntryIdDelete,
		},
		{
			"RedfishV1JobServiceLogEntriesLogEntryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/JobService/Log/Entries/{LogEntryId}",
			c.RedfishV1JobServiceLogEntriesLogEntryIdGet,
		},
		{
			"RedfishV1JobServiceLogEntriesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/JobService/Log/Entries",
			c.RedfishV1JobServiceLogEntriesPost,
		},
		{
			"RedfishV1JobServiceLogGet",
			strings.ToUpper("Get"),
			"/redfish/v1/JobService/Log",
			c.RedfishV1JobServiceLogGet,
		},
		{
			"RedfishV1JobServiceLogPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/JobService/Log",
			c.RedfishV1JobServiceLogPatch,
		},
		{
			"RedfishV1JobServiceLogPut",
			strings.ToUpper("Put"),
			"/redfish/v1/JobService/Log",
			c.RedfishV1JobServiceLogPut,
		},
		{
			"RedfishV1JobServicePatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/JobService",
			c.RedfishV1JobServicePatch,
		},
		{
			"RedfishV1JobServicePut",
			strings.ToUpper("Put"),
			"/redfish/v1/JobService",
			c.RedfishV1JobServicePut,
		},
		{
			"RedfishV1JsonSchemasGet",
			strings.ToUpper("Get"),
			"/redfish/v1/JsonSchemas",
			c.RedfishV1JsonSchemasGet,
		},
		{
			"RedfishV1JsonSchemasJsonSchemaFileIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/JsonSchemas/{JsonSchemaFileId}",
			c.RedfishV1JsonSchemasJsonSchemaFileIdGet,
		},
		{
			"RedfishV1ManagersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers",
			c.RedfishV1ManagersGet,
		},
		{
			"RedfishV1ManagersManagerIdActionsManagerForceFailoverPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/Actions/Manager.ForceFailover",
			c.RedfishV1ManagersManagerIdActionsManagerForceFailoverPost,
		},
		{
			"RedfishV1ManagersManagerIdActionsManagerModifyRedundancySetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/Actions/Manager.ModifyRedundancySet",
			c.RedfishV1ManagersManagerIdActionsManagerModifyRedundancySetPost,
		},
		{
			"RedfishV1ManagersManagerIdActionsManagerResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/Actions/Manager.Reset",
			c.RedfishV1ManagersManagerIdActionsManagerResetPost,
		},
		{
			"RedfishV1ManagersManagerIdActionsManagerResetToDefaultsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/Actions/Manager.ResetToDefaults",
			c.RedfishV1ManagersManagerIdActionsManagerResetToDefaultsPost,
		},
		{
			"RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdGet,
		},
		{
			"RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPatch,
		},
		{
			"RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPut,
		},
		{
			"RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsGet,
		},
		{
			"RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsPost,
		},
		{
			"RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Managers/{ManagerId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete,
		},
		{
			"RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet,
		},
		{
			"RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch,
		},
		{
			"RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut,
		},
		{
			"RedfishV1ManagersManagerIdEthernetInterfacesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/EthernetInterfaces",
			c.RedfishV1ManagersManagerIdEthernetInterfacesGet,
		},
		{
			"RedfishV1ManagersManagerIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}",
			c.RedfishV1ManagersManagerIdGet,
		},
		{
			"RedfishV1ManagersManagerIdHostInterfacesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/HostInterfaces",
			c.RedfishV1ManagersManagerIdHostInterfacesGet,
		},
		{
			"RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/HostInterfaces/{HostInterfaceId}",
			c.RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdGet,
		},
		{
			"RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdHostEthernetInterfacesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/HostInterfaces/{HostInterfaceId}/HostEthernetInterfaces",
			c.RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdHostEthernetInterfacesGet,
		},
		{
			"RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/HostInterfaces/{HostInterfaceId}",
			c.RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPatch,
		},
		{
			"RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/HostInterfaces/{HostInterfaceId}",
			c.RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPut,
		},
		{
			"RedfishV1ManagersManagerIdLogServicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/LogServices",
			c.RedfishV1ManagersManagerIdLogServicesGet,
		},
		{
			"RedfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceClearLogPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/LogServices/{LogServiceId}/Actions/LogService.ClearLog",
			c.RedfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceClearLogPost,
		},
		{
			"RedfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/LogServices/{LogServiceId}/Actions/LogService.CollectDiagnosticData",
			c.RedfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost,
		},
		{
			"RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/LogServices/{LogServiceId}/Entries",
			c.RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesGet,
		},
		{
			"RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Managers/{ManagerId}/LogServices/{LogServiceId}/Entries/{LogEntryId}",
			c.RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdDelete,
		},
		{
			"RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/LogServices/{LogServiceId}/Entries/{LogEntryId}",
			c.RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdGet,
		},
		{
			"RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/LogServices/{LogServiceId}/Entries",
			c.RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesPost,
		},
		{
			"RedfishV1ManagersManagerIdLogServicesLogServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/LogServices/{LogServiceId}",
			c.RedfishV1ManagersManagerIdLogServicesLogServiceIdGet,
		},
		{
			"RedfishV1ManagersManagerIdLogServicesLogServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/LogServices/{LogServiceId}",
			c.RedfishV1ManagersManagerIdLogServicesLogServiceIdPatch,
		},
		{
			"RedfishV1ManagersManagerIdLogServicesLogServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/LogServices/{LogServiceId}",
			c.RedfishV1ManagersManagerIdLogServicesLogServiceIdPut,
		},
		{
			"RedfishV1ManagersManagerIdNetworkProtocolGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/NetworkProtocol",
			c.RedfishV1ManagersManagerIdNetworkProtocolGet,
		},
		{
			"RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/NetworkProtocol/HTTPS/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/NetworkProtocol/HTTPS/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Managers/{ManagerId}/NetworkProtocol/HTTPS/Certificates/{CertificateId}",
			c.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/NetworkProtocol/HTTPS/Certificates/{CertificateId}",
			c.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdGet,
		},
		{
			"RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/NetworkProtocol/HTTPS/Certificates",
			c.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesGet,
		},
		{
			"RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/NetworkProtocol/HTTPS/Certificates",
			c.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesPost,
		},
		{
			"RedfishV1ManagersManagerIdNetworkProtocolPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/NetworkProtocol",
			c.RedfishV1ManagersManagerIdNetworkProtocolPatch,
		},
		{
			"RedfishV1ManagersManagerIdNetworkProtocolPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/NetworkProtocol",
			c.RedfishV1ManagersManagerIdNetworkProtocolPut,
		},
		{
			"RedfishV1ManagersManagerIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}",
			c.RedfishV1ManagersManagerIdPatch,
		},
		{
			"RedfishV1ManagersManagerIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}",
			c.RedfishV1ManagersManagerIdPut,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts/{ManagerAccountId}/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts/{ManagerAccountId}/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts/{ManagerAccountId}/Certificates/{CertificateId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts/{ManagerAccountId}/Certificates/{CertificateId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts/{ManagerAccountId}/Certificates",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts/{ManagerAccountId}/Certificates",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdDelete,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPatch,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts/{ManagerAccountId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPut,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceAccountsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Accounts",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ActiveDirectory/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ActiveDirectory/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ActiveDirectory/Certificates/{CertificateId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ActiveDirectory/Certificates/{CertificateId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ActiveDirectory/Certificates",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ActiveDirectory/Certificates",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates/{CertificateId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates/{CertificateId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders/{ExternalAccountProviderId}/Certificates",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders/{ExternalAccountProviderId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdDelete,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders/{ExternalAccountProviderId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders/{ExternalAccountProviderId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPatch,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders/{ExternalAccountProviderId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPut,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/ExternalAccountProviders",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/LDAP/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/LDAP/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/LDAP/Certificates/{CertificateId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/LDAP/Certificates/{CertificateId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/LDAP/Certificates",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/LDAP/Certificates",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesPost,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServicePatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService",
			c.RedfishV1ManagersManagerIdRemoteAccountServicePatch,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServicePut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService",
			c.RedfishV1ManagersManagerIdRemoteAccountServicePut,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceRolesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Roles",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceRolesGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Roles/{RoleId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdGet,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Roles/{RoleId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPatch,
		},
		{
			"RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/RemoteAccountService/Roles/{RoleId}",
			c.RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPut,
		},
		{
			"RedfishV1ManagersManagerIdSerialInterfacesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/SerialInterfaces",
			c.RedfishV1ManagersManagerIdSerialInterfacesGet,
		},
		{
			"RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/SerialInterfaces/{SerialInterfaceId}",
			c.RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdGet,
		},
		{
			"RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/SerialInterfaces/{SerialInterfaceId}",
			c.RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPatch,
		},
		{
			"RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/SerialInterfaces/{SerialInterfaceId}",
			c.RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPut,
		},
		{
			"RedfishV1ManagersManagerIdVirtualMediaGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia",
			c.RedfishV1ManagersManagerIdVirtualMediaGet,
		},
		{
			"RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.EjectMedia",
			c.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost,
		},
		{
			"RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.InsertMedia",
			c.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost,
		},
		{
			"RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGet,
		},
		{
			"RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatch,
		},
		{
			"RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPut,
		},
		{
			"RedfishV1NVMeDomainsDomainIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/NVMeDomains/{DomainId}",
			c.RedfishV1NVMeDomainsDomainIdDelete,
		},
		{
			"RedfishV1NVMeDomainsDomainIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/NVMeDomains/{DomainId}",
			c.RedfishV1NVMeDomainsDomainIdGet,
		},
		{
			"RedfishV1NVMeDomainsDomainIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/NVMeDomains/{DomainId}",
			c.RedfishV1NVMeDomainsDomainIdPatch,
		},
		{
			"RedfishV1NVMeDomainsDomainIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/NVMeDomains/{DomainId}",
			c.RedfishV1NVMeDomainsDomainIdPut,
		},
		{
			"RedfishV1NVMeDomainsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/NVMeDomains",
			c.RedfishV1NVMeDomainsGet,
		},
		{
			"RedfishV1NVMeDomainsNVMeDomainIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/NVMeDomains/{NVMeDomainId}",
			c.RedfishV1NVMeDomainsNVMeDomainIdDelete,
		},
		{
			"RedfishV1NVMeDomainsNVMeDomainIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/NVMeDomains/{NVMeDomainId}",
			c.RedfishV1NVMeDomainsNVMeDomainIdGet,
		},
		{
			"RedfishV1NVMeDomainsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/NVMeDomains",
			c.RedfishV1NVMeDomainsPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs",
			c.RedfishV1PowerEquipmentFloorPDUsGet,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Actions/PowerDistribution.TransferControl",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Branches/{CircuitId}/Actions/Circuit.BreakerControl",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Branches/{CircuitId}/Actions/Circuit.PowerControl",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Branches/{CircuitId}/Actions/Circuit.ResetMetrics",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Branches/{CircuitId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdGet,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Branches/{CircuitId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPatch,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Branches/{CircuitId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPut,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Branches",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesGet,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdGet,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Mains/{CircuitId}/Actions/Circuit.BreakerControl",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Mains/{CircuitId}/Actions/Circuit.PowerControl",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Mains/{CircuitId}/Actions/Circuit.ResetMetrics",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Mains/{CircuitId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdGet,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Mains/{CircuitId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPatch,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Mains/{CircuitId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPut,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Mains",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsGet,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Metrics/Actions/PowerDistributionMetrics.ResetMetrics",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Metrics",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsGet,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Outlets/{OutletId}/Actions/Outlet.PowerControl",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Outlets/{OutletId}/Actions/Outlet.ResetMetrics",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Outlets/{OutletId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdGet,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Outlets/{OutletId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPatch,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Outlets/{OutletId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPut,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdPatch,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdPut,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Sensors",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsGet,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Sensors/{SensorId}/Actions/Sensor.ResetMetrics",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdGet,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPatch,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPut,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitBreakerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Subfeeds/{CircuitId}/Actions/Circuit.BreakerControl",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitBreakerControlPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Subfeeds/{CircuitId}/Actions/Circuit.PowerControl",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Subfeeds/{CircuitId}/Actions/Circuit.ResetMetrics",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Subfeeds/{CircuitId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdGet,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Subfeeds/{CircuitId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPatch,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Subfeeds/{CircuitId}",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPut,
		},
		{
			"RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/FloorPDUs/{PowerDistributionId}/Subfeeds",
			c.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsGet,
		},
		{
			"RedfishV1PowerEquipmentGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment",
			c.RedfishV1PowerEquipmentGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs",
			c.RedfishV1PowerEquipmentRackPDUsGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Actions/PowerDistribution.TransferControl",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Branches/{CircuitId}/Actions/Circuit.BreakerControl",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Branches/{CircuitId}/Actions/Circuit.PowerControl",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Branches/{CircuitId}/Actions/Circuit.ResetMetrics",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Branches/{CircuitId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Branches/{CircuitId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPatch,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Branches/{CircuitId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPut,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Branches",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Mains/{CircuitId}/Actions/Circuit.BreakerControl",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Mains/{CircuitId}/Actions/Circuit.PowerControl",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Mains/{CircuitId}/Actions/Circuit.ResetMetrics",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Mains/{CircuitId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Mains/{CircuitId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPatch,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Mains/{CircuitId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPut,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Mains",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Metrics/Actions/PowerDistributionMetrics.ResetMetrics",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Metrics",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/OutletGroups",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/OutletGroups/{OutletGroupId}/Actions/OutletGroup.PowerControl",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/OutletGroups/{OutletGroupId}/Actions/OutletGroup.ResetMetrics",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/OutletGroups/{OutletGroupId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdDelete,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/OutletGroups/{OutletGroupId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/OutletGroups/{OutletGroupId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPatch,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/OutletGroups/{OutletGroupId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPut,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/OutletGroups",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Outlets",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Outlets/{OutletId}/Actions/Outlet.PowerControl",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Outlets/{OutletId}/Actions/Outlet.ResetMetrics",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Outlets/{OutletId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Outlets/{OutletId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPatch,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Outlets/{OutletId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPut,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdPatch,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdPut,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Sensors",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Sensors/{SensorId}/Actions/Sensor.ResetMetrics",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdGet,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPatch,
		},
		{
			"RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/RackPDUs/{PowerDistributionId}/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPut,
		},
		{
			"RedfishV1PowerEquipmentSensorsSensorIdActionsSensorResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/Sensors/{SensorId}/Actions/Sensor.ResetMetrics",
			c.RedfishV1PowerEquipmentSensorsSensorIdActionsSensorResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentSensorsSensorIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentSensorsSensorIdGet,
		},
		{
			"RedfishV1PowerEquipmentSensorsSensorIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentSensorsSensorIdPatch,
		},
		{
			"RedfishV1PowerEquipmentSensorsSensorIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentSensorsSensorIdPut,
		},
		{
			"RedfishV1PowerEquipmentSwitchgearGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/Switchgear",
			c.RedfishV1PowerEquipmentSwitchgearGet,
		},
		{
			"RedfishV1PowerEquipmentSwitchgearPowerDistributionIdSensorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/Switchgear/{PowerDistributionId}/Sensors",
			c.RedfishV1PowerEquipmentSwitchgearPowerDistributionIdSensorsGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches",
			c.RedfishV1PowerEquipmentTransferSwitchesGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdActionsPowerDistributionTransferControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Actions/PowerDistribution.TransferControl",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdActionsPowerDistributionTransferControlPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Branches/{CircuitId}/Actions/Circuit.BreakerControl",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Branches/{CircuitId}/Actions/Circuit.PowerControl",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Branches/{CircuitId}/Actions/Circuit.ResetMetrics",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Branches/{CircuitId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Branches/{CircuitId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPatch,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Branches/{CircuitId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPut,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Branches",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitBreakerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Feeders/{CircuitId}/Actions/Circuit.BreakerControl",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitBreakerControlPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Feeders/{CircuitId}/Actions/Circuit.PowerControl",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Feeders/{CircuitId}/Actions/Circuit.ResetMetrics",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Feeders/{CircuitId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Feeders/{CircuitId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPatch,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Feeders/{CircuitId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPut,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Feeders",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Mains/{CircuitId}/Actions/Circuit.BreakerControl",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Mains/{CircuitId}/Actions/Circuit.PowerControl",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Mains/{CircuitId}/Actions/Circuit.ResetMetrics",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Mains/{CircuitId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Mains/{CircuitId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPatch,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Mains/{CircuitId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPut,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Mains",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Metrics/Actions/PowerDistributionMetrics.ResetMetrics",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Metrics",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/OutletGroups",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/OutletGroups/{OutletGroupId}/Actions/OutletGroup.PowerControl",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/OutletGroups/{OutletGroupId}/Actions/OutletGroup.ResetMetrics",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/OutletGroups/{OutletGroupId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdDelete,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/OutletGroups/{OutletGroupId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/OutletGroups/{OutletGroupId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPatch,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/OutletGroups/{OutletGroupId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPut,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/OutletGroups",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Outlets",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Outlets/{OutletId}/Actions/Outlet.PowerControl",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Outlets/{OutletId}/Actions/Outlet.ResetMetrics",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Outlets/{OutletId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Outlets/{OutletId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPatch,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Outlets/{OutletId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPut,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPatch,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPut,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Sensors",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Sensors/{SensorId}/Actions/Sensor.ResetMetrics",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdGet,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPatch,
		},
		{
			"RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/PowerEquipment/TransferSwitches/{PowerDistributionId}/Sensors/{SensorId}",
			c.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPut,
		},
		{
			"RedfishV1RegistriesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Registries",
			c.RedfishV1RegistriesGet,
		},
		{
			"RedfishV1RegistriesMessageRegistryFileIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Registries/{MessageRegistryFileId}",
			c.RedfishV1RegistriesMessageRegistryFileIdGet,
		},
		{
			"RedfishV1ResourceBlocksGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks",
			c.RedfishV1ResourceBlocksGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}/Actions/Drive.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}/Actions/Drive.SecureErase",
			c.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}",
			c.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}",
			c.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Drives/{DriveId}",
			c.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}",
			c.RedfishV1ResourceBlocksResourceBlockIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.DisablePassphrase",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.OverwriteUnit",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.SecureEraseUnit",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.SetPassphrase",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Actions/Memory.UnlockUnit",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/MemoryMetrics/Actions/MemoryMetrics.ClearCurrentPeriod",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}/MemoryMetrics",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Memory/{MemoryId}",
			c.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/NetworkInterfaces/{NetworkInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/NetworkInterfaces/{NetworkInterfaceId}/NetworkDeviceFunctions",
			c.RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/NetworkInterfaces/{NetworkInterfaceId}/NetworkPorts",
			c.RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/NetworkInterfaces/{NetworkInterfaceId}/Ports",
			c.RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}",
			c.RedfishV1ResourceBlocksResourceBlockIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/AccelerationFunctions/{AccelerationFunctionId}",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/AccelerationFunctions",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/Actions/Processor.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/ProcessorMetrics",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Actions/Processor.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/ProcessorMetrics",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}",
			c.RedfishV1ResourceBlocksResourceBlockIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/SimpleStorage/{SimpleStorageId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Actions/Storage.SetEncryptionKey",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Controllers",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}/Actions/Drive.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}/Actions/Drive.SecureErase",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}/Actions/Port.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}/Metrics",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/StorageControllers/{StorageControllerMemberId}/Ports",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Actions/ComputerSystem.AddResourceBlock",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Actions/ComputerSystem.RemoveResourceBlock",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Actions/ComputerSystem.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Actions/ComputerSystem.SetDefaultBootOrder",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Bios/Actions/Bios.ChangePassword",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Bios/Actions/Bios.ResetBios",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Bios",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Bios",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Bios",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Boot/Certificates",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/BootOptions",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/EthernetInterfaces",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Actions/LogService.ClearLog",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Actions/LogService.CollectDiagnosticData",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries/{LogEntryId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries/{LogEntryId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/LogServices/{LogServiceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.DisablePassphrase",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.OverwriteUnit",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.SecureEraseUnit",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.SetPassphrase",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.UnlockUnit",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/MemoryMetrics/Actions/MemoryMetrics.ClearCurrentPeriod",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}/MemoryMetrics",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Memory/{MemoryId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemorySummary/MemoryMetrics/Actions/MemoryMetrics.ClearCurrentPeriod",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/MemorySummary/MemoryMetrics",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/NetworkInterfaces",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}/NetworkDeviceFunctions",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}/NetworkPorts",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}/Ports",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}/PCIeFunctions",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}/PCIeFunctions/{PCIeFunctionId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/ProcessorSummary/ProcessorMetrics",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/AccelerationFunctions/{AccelerationFunctionId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/AccelerationFunctions",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Actions/Processor.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/ProcessorMetrics",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Actions/Processor.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/ProcessorMetrics",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/Actions/SecureBoot.ResetKeys",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Actions/SecureBootDatabase.ResetKeys",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures/{SignatureId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures/{SignatureId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SimpleStorage",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/SimpleStorage/{SimpleStorageId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Actions/Storage.SetEncryptionKey",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Actions/Drive.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Actions/Drive.SecureErase",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}/Actions/Port.Reset",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}/Metrics",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerMemberId}/Ports",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.EjectMedia",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost",
			strings.ToUpper("Post"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.InsertMedia",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch,
		},
		{
			"RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut,
		},
		{
			"RedfishV1SessionServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/SessionService",
			c.RedfishV1SessionServiceGet,
		},
		{
			"RedfishV1SessionServicePatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/SessionService",
			c.RedfishV1SessionServicePatch,
		},
		{
			"RedfishV1SessionServicePut",
			strings.ToUpper("Put"),
			"/redfish/v1/SessionService",
			c.RedfishV1SessionServicePut,
		},
		{
			"RedfishV1SessionServiceSessionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/SessionService/Sessions",
			c.RedfishV1SessionServiceSessionsGet,
		},
		{
			"RedfishV1SessionServiceSessionsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/SessionService/Sessions",
			c.RedfishV1SessionServiceSessionsPost,
		},
		{
			"RedfishV1SessionServiceSessionsSessionIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/SessionService/Sessions/{SessionId}",
			c.RedfishV1SessionServiceSessionsSessionIdDelete,
		},
		{
			"RedfishV1SessionServiceSessionsSessionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/SessionService/Sessions/{SessionId}",
			c.RedfishV1SessionServiceSessionsSessionIdGet,
		},
		{
			"RedfishV1StorageGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage",
			c.RedfishV1StorageGet,
		},
		{
			"RedfishV1StorageServicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices",
			c.RedfishV1StorageServicesGet,
		},
		{
			"RedfishV1StorageServicesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices",
			c.RedfishV1StorageServicesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdActionsStorageServiceSetEncryptionKeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Actions/StorageService.SetEncryptionKey",
			c.RedfishV1StorageServicesStorageServiceIdActionsStorageServiceSetEncryptionKeyPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataProtectionLinesOfService/{DataProtectionLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataProtectionLinesOfService/{DataProtectionLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataProtectionLinesOfService/{DataProtectionLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataProtectionLinesOfService/{DataProtectionLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataProtectionLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataProtectionLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataSecurityLinesOfService/{DataSecurityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataSecurityLinesOfService/{DataSecurityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataSecurityLinesOfService/{DataSecurityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataSecurityLinesOfService/{DataSecurityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataSecurityLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataSecurityLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataStorageLinesOfService/{DataStorageLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataStorageLinesOfService/{DataStorageLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataStorageLinesOfService/{DataStorageLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataStorageLinesOfService/{DataStorageLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataStorageLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/DataStorageLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOConnectivityLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOConnectivityLinesOfService/{IOConnectivityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOConnectivityLinesOfService/{IOConnectivityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOConnectivityLinesOfService/{IOConnectivityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOConnectivityLinesOfService/{IOConnectivityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOConnectivityLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOPerformanceLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOPerformanceLinesOfService/{IOPerformanceLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOPerformanceLinesOfService/{IOPerformanceLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOPerformanceLinesOfService/{IOPerformanceLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOPerformanceLinesOfService/{IOPerformanceLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}/IOPerformanceLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService/{ClassOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdClassesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ClassesOfService",
			c.RedfishV1StorageServicesStorageServiceIdClassesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.AssignReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.CreateReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.RemoveReplicaRelationship",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.ResumeReplication",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.ReverseReplicationRelationship",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.SplitReplication",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.SuspendReplication",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdConsistencyGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups",
			c.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/DataProtectionLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/DataProtectionLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/DataProtectionLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/DataSecurityLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/DataSecurityLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/DataSecurityLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/DataStorageLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/DataStorageLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/DataStorageLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdDrivesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Drives",
			c.RedfishV1StorageServicesStorageServiceIdDrivesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdEndpointGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/EndpointGroups",
			c.RedfishV1StorageServicesStorageServiceIdEndpointGroupsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdEndpointGroupsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/EndpointGroups",
			c.RedfishV1StorageServicesStorageServiceIdEndpointGroupsPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingDrives",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemsId}/ExportedFileShares",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemsId}/ExportedFileShares",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdFileSystemsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/FileSystems",
			c.RedfishV1StorageServicesStorageServiceIdFileSystemsPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/IOConnectivityLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/IOConnectivityLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/IOConnectivityLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/IOPerformanceLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/IOPerformanceLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/IOPerformanceLoSCapabilities",
			c.RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataProtectionLinesOfService/{DataProtectionLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataProtectionLinesOfService/{DataProtectionLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataProtectionLinesOfService/{DataProtectionLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataProtectionLinesOfService/{DataProtectionLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataProtectionLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataProtectionLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataSecurityLinesOfService/{DataSecurityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataSecurityLinesOfService/{DataSecurityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataSecurityLinesOfService/{DataSecurityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataSecurityLinesOfService/{DataSecurityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataSecurityLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataSecurityLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataStorageLinesOfService/{DataStorageLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataStorageLinesOfService/{DataStorageLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataStorageLinesOfService/{DataStorageLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataStorageLinesOfService/{DataStorageLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataStorageLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/DataStorageLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOConnectivityLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOConnectivityLinesOfService/{IOConnectivityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOConnectivityLinesOfService/{IOConnectivityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOConnectivityLinesOfService/{IOConnectivityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOConnectivityLinesOfService/{IOConnectivityLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOConnectivityLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOPerformanceLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOPerformanceLinesOfService/{IOPerformanceLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOPerformanceLinesOfService/{IOPerformanceLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOPerformanceLinesOfService/{IOPerformanceLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOPerformanceLinesOfService/{IOPerformanceLineOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService/IOPerformanceLinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdLinesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/LinesOfService",
			c.RedfishV1StorageServicesStorageServiceIdLinesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStorageGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StorageGroups",
			c.RedfishV1StorageServicesStorageServiceIdStorageGroupsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStorageGroupsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StorageGroups",
			c.RedfishV1StorageServicesStorageServiceIdStorageGroupsPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StorageGroups/{StorageGroupId}/Actions/StorageGroup.ExposeVolumes",
			c.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StorageGroups/{StorageGroupId}/Actions/StorageGroup.HideVolumes",
			c.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedPools",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedPools",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingDrives",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/ClassesOfService/{ClassOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/ClassesOfService/{ClassOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/ClassesOfService/{ClassOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/ClassesOfService/{ClassOfServiceId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/ClassesOfService",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServicePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/ClassesOfService",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServicePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes",
			c.RedfishV1StorageServicesStorageServiceIdVolumesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes",
			c.RedfishV1StorageServicesStorageServiceIdVolumesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/AllocatedPools",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/AllocatedPools",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingDrives",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}/Actions/Volume.Initialize",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.AssignReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.CreateReplicaTarget",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.RemoveReplicaRelationship",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.ResumeReplication",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.ReverseReplicationRelationship",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.SplitReplication",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.SuspendReplication",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/ConsistencyGroups",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdPut,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/StorageGroups",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/StorageGroups",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}/Actions/StorageGroup.ExposeVolumes",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}/Actions/StorageGroup.HideVolumes",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdDelete,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdGet,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdPatch,
		},
		{
			"RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdPut,
		},
		{
			"RedfishV1StorageStorageIdActionsStorageSetEncryptionKeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Actions/Storage.SetEncryptionKey",
			c.RedfishV1StorageStorageIdActionsStorageSetEncryptionKeyPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.AssignReplicaTarget",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.CreateReplicaTarget",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.RemoveReplicaRelationship",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.ResumeReplication",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.ReverseReplicationRelationship",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.SplitReplication",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.SuspendReplication",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdDelete,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdGet,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdPatch,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdPut,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut,
		},
		{
			"RedfishV1StorageStorageIdConsistencyGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/ConsistencyGroups",
			c.RedfishV1StorageStorageIdConsistencyGroupsGet,
		},
		{
			"RedfishV1StorageStorageIdControllersControllerIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1StorageStorageIdControllersControllerIdGet,
		},
		{
			"RedfishV1StorageStorageIdControllersControllerIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1StorageStorageIdControllersControllerIdPatch,
		},
		{
			"RedfishV1StorageStorageIdControllersControllerIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1StorageStorageIdControllersControllerIdPut,
		},
		{
			"RedfishV1StorageStorageIdControllersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Controllers",
			c.RedfishV1StorageStorageIdControllersGet,
		},
		{
			"RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdDelete,
		},
		{
			"RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdGet,
		},
		{
			"RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPatch,
		},
		{
			"RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPut,
		},
		{
			"RedfishV1StorageStorageIdEndpointGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/EndpointGroups",
			c.RedfishV1StorageStorageIdEndpointGroupsGet,
		},
		{
			"RedfishV1StorageStorageIdEndpointGroupsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/EndpointGroups",
			c.RedfishV1StorageStorageIdEndpointGroupsPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingDrives",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesGet,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdDelete,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdGet,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdPatch,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemIdPut,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemsId}/ExportedFileShares",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesGet,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemsId}/ExportedFileShares",
			c.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesPost,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/FileSystems",
			c.RedfishV1StorageStorageIdFileSystemsGet,
		},
		{
			"RedfishV1StorageStorageIdFileSystemsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/FileSystems",
			c.RedfishV1StorageStorageIdFileSystemsPost,
		},
		{
			"RedfishV1StorageStorageIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}",
			c.RedfishV1StorageStorageIdGet,
		},
		{
			"RedfishV1StorageStorageIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}",
			c.RedfishV1StorageStorageIdPatch,
		},
		{
			"RedfishV1StorageStorageIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}",
			c.RedfishV1StorageStorageIdPut,
		},
		{
			"RedfishV1StorageStorageIdStorageGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StorageGroups",
			c.RedfishV1StorageStorageIdStorageGroupsGet,
		},
		{
			"RedfishV1StorageStorageIdStorageGroupsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StorageGroups",
			c.RedfishV1StorageStorageIdStorageGroupsPost,
		},
		{
			"RedfishV1StorageStorageIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StorageGroups/{StorageGroupId}/Actions/StorageGroup.ExposeVolumes",
			c.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost,
		},
		{
			"RedfishV1StorageStorageIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StorageGroups/{StorageGroupId}/Actions/StorageGroup.HideVolumes",
			c.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost,
		},
		{
			"RedfishV1StorageStorageIdStorageGroupsStorageGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdDelete,
		},
		{
			"RedfishV1StorageStorageIdStorageGroupsStorageGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdGet,
		},
		{
			"RedfishV1StorageStorageIdStorageGroupsStorageGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdPatch,
		},
		{
			"RedfishV1StorageStorageIdStorageGroupsStorageGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdPut,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools",
			c.RedfishV1StorageStorageIdStoragePoolsGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools",
			c.RedfishV1StorageStorageIdStoragePoolsPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingDrives",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdGet,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1StorageStorageIdStoragePoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdPut,
		},
		{
			"RedfishV1StorageStorageIdVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Volumes",
			c.RedfishV1StorageStorageIdVolumesGet,
		},
		{
			"RedfishV1StorageStorageIdVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes",
			c.RedfishV1StorageStorageIdVolumesPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools",
			c.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsGet,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools",
			c.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingDrives",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources",
			c.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesGet,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdDelete,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdGet,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdPatch,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdPut,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/StorageGroups",
			c.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsGet,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/StorageGroups",
			c.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}/Actions/StorageGroup.ExposeVolumes",
			c.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}/Actions/StorageGroup.HideVolumes",
			c.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdDelete,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdGet,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdPatch,
		},
		{
			"RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}/StorageGroups/{StorageGroupId}",
			c.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdPut,
		},
		{
			"RedfishV1StorageSystemsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/StorageSystems",
			c.RedfishV1StorageSystemsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Actions/ComputerSystem.AddResourceBlock",
			c.RedfishV1SystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Actions/ComputerSystem.RemoveResourceBlock",
			c.RedfishV1SystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Actions/ComputerSystem.Reset",
			c.RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Actions/ComputerSystem.SetDefaultBootOrder",
			c.RedfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdBiosActionsBiosChangePasswordPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Bios/Actions/Bios.ChangePassword",
			c.RedfishV1SystemsComputerSystemIdBiosActionsBiosChangePasswordPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdBiosActionsBiosResetBiosPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Bios/Actions/Bios.ResetBios",
			c.RedfishV1SystemsComputerSystemIdBiosActionsBiosResetBiosPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdBiosGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Bios",
			c.RedfishV1SystemsComputerSystemIdBiosGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdBiosPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Bios",
			c.RedfishV1SystemsComputerSystemIdBiosPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdBiosPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Bios",
			c.RedfishV1SystemsComputerSystemIdBiosPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}",
			c.RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Boot/Certificates/{CertificateId}",
			c.RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Boot/Certificates",
			c.RedfishV1SystemsComputerSystemIdBootCertificatesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Boot/Certificates",
			c.RedfishV1SystemsComputerSystemIdBootCertificatesPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootOptionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions",
			c.RedfishV1SystemsComputerSystemIdBootOptionsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdBootOptionsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions",
			c.RedfishV1SystemsComputerSystemIdBootOptionsPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}",
			c.RedfishV1SystemsComputerSystemIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}",
			c.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs",
			c.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/EthernetInterfaces/{EthernetInterfaceId}/VLANs/{VLanNetworkInterfaceId}",
			c.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdEthernetInterfacesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/EthernetInterfaces",
			c.RedfishV1SystemsComputerSystemIdEthernetInterfacesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT/{MSDTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT/{MSDTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT/{MSDTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT/{MSDTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT/{MSDTId}/RouteSet",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT/{MSDTId}/RouteSet",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT/{MSDTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT/{MSDTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT/{MSDTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT/{MSDTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/MSDT",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdActionsPortResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/Actions/Port.Reset",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdActionsPortResetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT/{LPRTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT/{LPRTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT/{LPRTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT/{LPRTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT/{LPRTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/LPRT",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT/{MPRTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT/{MPRTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT/{MPRTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT/{MPRTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT/{MPRTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/MPRT",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/Metrics",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMetricsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT/{SSDTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT/{SSDTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT/{SSDTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT/{SSDTId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT/{SSDTId}/RouteSet",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT/{SSDTId}/RouteSet",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT/{SSDTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT/{SSDTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT/{SSDTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters/{FabricAdapterId}/SSDT/{SSDTId}/RouteSet/{RouteId}",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdFabricAdaptersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/FabricAdapters",
			c.RedfishV1SystemsComputerSystemIdFabricAdaptersGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}",
			c.RedfishV1SystemsComputerSystemIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdHostedServicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/HostedServices",
			c.RedfishV1SystemsComputerSystemIdHostedServicesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdHostedServicesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/HostedServices",
			c.RedfishV1SystemsComputerSystemIdHostedServicesPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdLogServicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/LogServices",
			c.RedfishV1SystemsComputerSystemIdLogServicesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Actions/LogService.ClearLog",
			c.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Actions/LogService.CollectDiagnosticData",
			c.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries",
			c.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries/{LogEntryId}",
			c.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries/{LogEntryId}",
			c.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/LogServices/{LogServiceId}/Entries",
			c.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/LogServices/{LogServiceId}",
			c.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/LogServices/{LogServiceId}",
			c.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/LogServices/{LogServiceId}",
			c.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryDomainsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks/{MemoryChunksId}",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemoryDomains/{MemoryDomainId}/MemoryChunks",
			c.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory",
			c.RedfishV1SystemsComputerSystemIdMemoryGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.DisablePassphrase",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.OverwriteUnit",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.Reset",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.SecureEraseUnit",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.SetPassphrase",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/Actions/Memory.UnlockUnit",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/MemoryMetrics/Actions/MemoryMetrics.ClearCurrentPeriod",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}/MemoryMetrics",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemoryMemoryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Memory/{MemoryId}",
			c.RedfishV1SystemsComputerSystemIdMemoryMemoryIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemorySummary/MemoryMetrics/Actions/MemoryMetrics.ClearCurrentPeriod",
			c.RedfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/MemorySummary/MemoryMetrics",
			c.RedfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdNetworkInterfacesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/NetworkInterfaces",
			c.RedfishV1SystemsComputerSystemIdNetworkInterfacesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}",
			c.RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}/NetworkDeviceFunctions",
			c.RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}/NetworkPorts",
			c.RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/NetworkInterfaces/{NetworkInterfaceId}/Ports",
			c.RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdOperatingConfigsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/OperatingConfigs",
			c.RedfishV1SystemsComputerSystemIdOperatingConfigsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdPCIeDevicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/PCIeDevices",
			c.RedfishV1SystemsComputerSystemIdPCIeDevicesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}/PCIeFunctions",
			c.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}/PCIeFunctions/{PCIeFunctionId}",
			c.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/PCIeDevices/{PCIeDeviceId}",
			c.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}",
			c.RedfishV1SystemsComputerSystemIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorSummaryProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/ProcessorSummary/ProcessorMetrics",
			c.RedfishV1SystemsComputerSystemIdProcessorSummaryProcessorMetricsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors",
			c.RedfishV1SystemsComputerSystemIdProcessorsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/AccelerationFunctions/{AccelerationFunctionId}",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/AccelerationFunctions",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Actions/Processor.Reset",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/OperatingConfigs",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsOperatingConfigIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/OperatingConfigs/{OperatingConfigId}",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsOperatingConfigIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/ProcessorMetrics",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Actions/Processor.Reset",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/Assembly",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}/ProcessorMetrics",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Processors/{ProcessorId}/SubProcessors/{ProcessorId2}",
			c.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put,
		},
		{
			"RedfishV1SystemsComputerSystemIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}",
			c.RedfishV1SystemsComputerSystemIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/Actions/SecureBoot.ResetKeys",
			c.RedfishV1SystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot",
			c.RedfishV1SystemsComputerSystemIdSecureBootGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot",
			c.RedfishV1SystemsComputerSystemIdSecureBootPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot",
			c.RedfishV1SystemsComputerSystemIdSecureBootPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Actions/SecureBootDatabase.ResetKeys",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}/Actions/Certificate.Rekey",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}/Actions/Certificate.Renew",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates/{CertificateId}",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Certificates",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures/{SignatureId}",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases/{DatabaseId}/Signatures/{SignatureId}",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/SecureBoot/SecureBootDatabases",
			c.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdSimpleStorageGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/SimpleStorage",
			c.RedfishV1SystemsComputerSystemIdSimpleStorageGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdSimpleStorageSimpleStorageIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/SimpleStorage/{SimpleStorageId}",
			c.RedfishV1SystemsComputerSystemIdSimpleStorageSimpleStorageIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage",
			c.RedfishV1SystemsComputerSystemIdStorageGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageServicesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/StorageServices",
			c.RedfishV1SystemsComputerSystemIdStorageServicesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageServicesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/StorageServices",
			c.RedfishV1SystemsComputerSystemIdStorageServicesPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdActionsStorageServiceSetEncryptionKeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/StorageServices/{StorageServiceId}/Actions/StorageService.SetEncryptionKey",
			c.RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdActionsStorageServiceSetEncryptionKeyPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/StorageServices/{StorageServiceId}",
			c.RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/StorageServices/{StorageServiceId}",
			c.RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/StorageServices/{StorageServiceId}",
			c.RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/StorageServices/{StorageServiceId}",
			c.RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Actions/Storage.SetEncryptionKey",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.AssignReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.CreateReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.RemoveReplicaRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.ResumeReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.ReverseReplicationRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.SplitReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Actions/ConsistencyGroup.SuspendReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers/{ControllerId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdControllersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Controllers",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdControllersGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Actions/Drive.Reset",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Actions/Drive.SecureErase",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}/Assembly",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Drives/{DriveId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/EndpointGroups/{EndpointGroupId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/EndpointGroups",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/EndpointGroups",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingDrives",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}/Actions/Port.Reset",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}/Metrics",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerId}/Ports/{PortId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StorageControllers/{StorageControllerMemberId}/Ports",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools/{AllocatedPoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedPools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingDrives",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{ProvidingPoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.AssignReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ChangeRAIDLayout",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CheckConsistency",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.CreateReplicaTarget",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ForceEnable",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.Initialize",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.RemoveReplicaRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ResumeReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.ReverseReplicationRelationship",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SplitReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/Actions/Volume.SuspendReplication",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/AllocatedPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingDrives",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingPools/{StoragePoolId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}/CapacitySources",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
			c.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemIdVirtualMediaGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.EjectMedia",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.InsertMedia",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost,
		},
		{
			"RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPut,
		},
		{
			"RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemsId}/Storage/{StorageId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete,
		},
		{
			"RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemsId}/Storage/{StorageId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet,
		},
		{
			"RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemsId}/Storage/{StorageId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch,
		},
		{
			"RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemsId}/Storage/{StorageId}/FileSystems/{FileSystemsId}/ExportedFileShares/{ExportedFileSharesId}",
			c.RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut,
		},
		{
			"RedfishV1SystemsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems",
			c.RedfishV1SystemsGet,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdGet,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPatch,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/VCAT",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATGet,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/VCAT",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATPost,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdDelete,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdGet,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPatch,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/Ports/{PortId}/VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPut,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPut,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/REQ-VCAT",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATGet,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/REQ-VCAT",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATPost,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/REQ-VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdDelete,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/REQ-VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdGet,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/REQ-VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPatch,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/REQ-VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPut,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/RSP-VCAT",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATGet,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATPost",
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/RSP-VCAT",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATPost,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/RSP-VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdDelete,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/RSP-VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdGet,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/RSP-VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPatch,
		},
		{
			"RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{SystemId}/FabricAdapters/{FabricAdapterId}/RSP-VCAT/{VCATEntryId}",
			c.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPut,
		},
		{
			"RedfishV1TaskServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TaskService",
			c.RedfishV1TaskServiceGet,
		},
		{
			"RedfishV1TaskServicePatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/TaskService",
			c.RedfishV1TaskServicePatch,
		},
		{
			"RedfishV1TaskServicePut",
			strings.ToUpper("Put"),
			"/redfish/v1/TaskService",
			c.RedfishV1TaskServicePut,
		},
		{
			"RedfishV1TaskServiceTasksGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TaskService/Tasks",
			c.RedfishV1TaskServiceTasksGet,
		},
		{
			"RedfishV1TaskServiceTasksTaskIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/TaskService/Tasks/{TaskId}",
			c.RedfishV1TaskServiceTasksTaskIdDelete,
		},
		{
			"RedfishV1TaskServiceTasksTaskIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TaskService/Tasks/{TaskId}",
			c.RedfishV1TaskServiceTasksTaskIdGet,
		},
		{
			"RedfishV1TaskServiceTasksTaskIdSubTasksGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TaskService/Tasks/{TaskId}/SubTasks",
			c.RedfishV1TaskServiceTasksTaskIdSubTasksGet,
		},
		{
			"RedfishV1TaskServiceTasksTaskIdSubTasksTaskId2Delete",
			strings.ToUpper("Delete"),
			"/redfish/v1/TaskService/Tasks/{TaskId}/SubTasks/{TaskId2}",
			c.RedfishV1TaskServiceTasksTaskIdSubTasksTaskId2Delete,
		},
		{
			"RedfishV1TaskServiceTasksTaskIdSubTasksTaskId2Get",
			strings.ToUpper("Get"),
			"/redfish/v1/TaskService/Tasks/{TaskId}/SubTasks/{TaskId2}",
			c.RedfishV1TaskServiceTasksTaskIdSubTasksTaskId2Get,
		},
		{
			"RedfishV1TelemetryServiceActionsTelemetryServiceSubmitTestMetricReportPost",
			strings.ToUpper("Post"),
			"/redfish/v1/TelemetryService/Actions/TelemetryService.SubmitTestMetricReport",
			c.RedfishV1TelemetryServiceActionsTelemetryServiceSubmitTestMetricReportPost,
		},
		{
			"RedfishV1TelemetryServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService",
			c.RedfishV1TelemetryServiceGet,
		},
		{
			"RedfishV1TelemetryServiceLogServiceActionsLogServiceClearLogPost",
			strings.ToUpper("Post"),
			"/redfish/v1/TelemetryService/LogService/Actions/LogService.ClearLog",
			c.RedfishV1TelemetryServiceLogServiceActionsLogServiceClearLogPost,
		},
		{
			"RedfishV1TelemetryServiceLogServiceActionsLogServiceCollectDiagnosticDataPost",
			strings.ToUpper("Post"),
			"/redfish/v1/TelemetryService/LogService/Actions/LogService.CollectDiagnosticData",
			c.RedfishV1TelemetryServiceLogServiceActionsLogServiceCollectDiagnosticDataPost,
		},
		{
			"RedfishV1TelemetryServiceLogServiceEntriesGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService/LogService/Entries",
			c.RedfishV1TelemetryServiceLogServiceEntriesGet,
		},
		{
			"RedfishV1TelemetryServiceLogServiceEntriesLogEntryIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/TelemetryService/LogService/Entries/{LogEntryId}",
			c.RedfishV1TelemetryServiceLogServiceEntriesLogEntryIdDelete,
		},
		{
			"RedfishV1TelemetryServiceLogServiceEntriesLogEntryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService/LogService/Entries/{LogEntryId}",
			c.RedfishV1TelemetryServiceLogServiceEntriesLogEntryIdGet,
		},
		{
			"RedfishV1TelemetryServiceLogServiceEntriesPost",
			strings.ToUpper("Post"),
			"/redfish/v1/TelemetryService/LogService/Entries",
			c.RedfishV1TelemetryServiceLogServiceEntriesPost,
		},
		{
			"RedfishV1TelemetryServiceLogServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService/LogService",
			c.RedfishV1TelemetryServiceLogServiceGet,
		},
		{
			"RedfishV1TelemetryServiceLogServicePatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/TelemetryService/LogService",
			c.RedfishV1TelemetryServiceLogServicePatch,
		},
		{
			"RedfishV1TelemetryServiceLogServicePut",
			strings.ToUpper("Put"),
			"/redfish/v1/TelemetryService/LogService",
			c.RedfishV1TelemetryServiceLogServicePut,
		},
		{
			"RedfishV1TelemetryServiceMetricDefinitionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService/MetricDefinitions",
			c.RedfishV1TelemetryServiceMetricDefinitionsGet,
		},
		{
			"RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/TelemetryService/MetricDefinitions/{MetricDefinitionId}",
			c.RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdDelete,
		},
		{
			"RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService/MetricDefinitions/{MetricDefinitionId}",
			c.RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdGet,
		},
		{
			"RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/TelemetryService/MetricDefinitions/{MetricDefinitionId}",
			c.RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPatch,
		},
		{
			"RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/TelemetryService/MetricDefinitions/{MetricDefinitionId}",
			c.RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPut,
		},
		{
			"RedfishV1TelemetryServiceMetricDefinitionsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/TelemetryService/MetricDefinitions",
			c.RedfishV1TelemetryServiceMetricDefinitionsPost,
		},
		{
			"RedfishV1TelemetryServiceMetricReportDefinitionsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService/MetricReportDefinitions",
			c.RedfishV1TelemetryServiceMetricReportDefinitionsGet,
		},
		{
			"RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/TelemetryService/MetricReportDefinitions/{MetricReportDefinitionId}",
			c.RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdDelete,
		},
		{
			"RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService/MetricReportDefinitions/{MetricReportDefinitionId}",
			c.RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdGet,
		},
		{
			"RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/TelemetryService/MetricReportDefinitions/{MetricReportDefinitionId}",
			c.RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPatch,
		},
		{
			"RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/TelemetryService/MetricReportDefinitions/{MetricReportDefinitionId}",
			c.RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPut,
		},
		{
			"RedfishV1TelemetryServiceMetricReportDefinitionsPost",
			strings.ToUpper("Post"),
			"/redfish/v1/TelemetryService/MetricReportDefinitions",
			c.RedfishV1TelemetryServiceMetricReportDefinitionsPost,
		},
		{
			"RedfishV1TelemetryServiceMetricReportsGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService/MetricReports",
			c.RedfishV1TelemetryServiceMetricReportsGet,
		},
		{
			"RedfishV1TelemetryServiceMetricReportsMetricReportIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/TelemetryService/MetricReports/{MetricReportId}",
			c.RedfishV1TelemetryServiceMetricReportsMetricReportIdDelete,
		},
		{
			"RedfishV1TelemetryServiceMetricReportsMetricReportIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService/MetricReports/{MetricReportId}",
			c.RedfishV1TelemetryServiceMetricReportsMetricReportIdGet,
		},
		{
			"RedfishV1TelemetryServicePatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/TelemetryService",
			c.RedfishV1TelemetryServicePatch,
		},
		{
			"RedfishV1TelemetryServicePut",
			strings.ToUpper("Put"),
			"/redfish/v1/TelemetryService",
			c.RedfishV1TelemetryServicePut,
		},
		{
			"RedfishV1TelemetryServiceTriggersGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService/Triggers",
			c.RedfishV1TelemetryServiceTriggersGet,
		},
		{
			"RedfishV1TelemetryServiceTriggersPost",
			strings.ToUpper("Post"),
			"/redfish/v1/TelemetryService/Triggers",
			c.RedfishV1TelemetryServiceTriggersPost,
		},
		{
			"RedfishV1TelemetryServiceTriggersTriggersIdDelete",
			strings.ToUpper("Delete"),
			"/redfish/v1/TelemetryService/Triggers/{TriggersId}",
			c.RedfishV1TelemetryServiceTriggersTriggersIdDelete,
		},
		{
			"RedfishV1TelemetryServiceTriggersTriggersIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/TelemetryService/Triggers/{TriggersId}",
			c.RedfishV1TelemetryServiceTriggersTriggersIdGet,
		},
		{
			"RedfishV1TelemetryServiceTriggersTriggersIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/TelemetryService/Triggers/{TriggersId}",
			c.RedfishV1TelemetryServiceTriggersTriggersIdPatch,
		},
		{
			"RedfishV1TelemetryServiceTriggersTriggersIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/TelemetryService/Triggers/{TriggersId}",
			c.RedfishV1TelemetryServiceTriggersTriggersIdPut,
		},
		{
			"RedfishV1UpdateServiceActionsUpdateServiceSimpleUpdatePost",
			strings.ToUpper("Post"),
			"/redfish/v1/UpdateService/Actions/UpdateService.SimpleUpdate",
			c.RedfishV1UpdateServiceActionsUpdateServiceSimpleUpdatePost,
		},
		{
			"RedfishV1UpdateServiceActionsUpdateServiceStartUpdatePost",
			strings.ToUpper("Post"),
			"/redfish/v1/UpdateService/Actions/UpdateService.StartUpdate",
			c.RedfishV1UpdateServiceActionsUpdateServiceStartUpdatePost,
		},
		{
			"RedfishV1UpdateServiceFirmwareInventoryGet",
			strings.ToUpper("Get"),
			"/redfish/v1/UpdateService/FirmwareInventory",
			c.RedfishV1UpdateServiceFirmwareInventoryGet,
		},
		{
			"RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/UpdateService/FirmwareInventory/{SoftwareInventoryId}",
			c.RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdGet,
		},
		{
			"RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/UpdateService/FirmwareInventory/{SoftwareInventoryId}",
			c.RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPatch,
		},
		{
			"RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/UpdateService/FirmwareInventory/{SoftwareInventoryId}",
			c.RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPut,
		},
		{
			"RedfishV1UpdateServiceGet",
			strings.ToUpper("Get"),
			"/redfish/v1/UpdateService",
			c.RedfishV1UpdateServiceGet,
		},
		{
			"RedfishV1UpdateServicePatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/UpdateService",
			c.RedfishV1UpdateServicePatch,
		},
		{
			"RedfishV1UpdateServicePut",
			strings.ToUpper("Put"),
			"/redfish/v1/UpdateService",
			c.RedfishV1UpdateServicePut,
		},
		{
			"RedfishV1UpdateServiceSoftwareInventoryGet",
			strings.ToUpper("Get"),
			"/redfish/v1/UpdateService/SoftwareInventory",
			c.RedfishV1UpdateServiceSoftwareInventoryGet,
		},
		{
			"RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdGet",
			strings.ToUpper("Get"),
			"/redfish/v1/UpdateService/SoftwareInventory/{SoftwareInventoryId}",
			c.RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdGet,
		},
		{
			"RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPatch",
			strings.ToUpper("Patch"),
			"/redfish/v1/UpdateService/SoftwareInventory/{SoftwareInventoryId}",
			c.RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPatch,
		},
		{
			"RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPut",
			strings.ToUpper("Put"),
			"/redfish/v1/UpdateService/SoftwareInventory/{SoftwareInventoryId}",
			c.RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPut,
		},
	}
}

// RedfishV1AccountServiceAccountsGet -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AccountServiceAccountsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountId := params["managerAccountId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost(managerAccountId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountId := params["managerAccountId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost(managerAccountId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountId := params["managerAccountId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete(managerAccountId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountId := params["managerAccountId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet(managerAccountId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdCertificatesGet -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsManagerAccountIdCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountId := params["managerAccountId"]
	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesGet(managerAccountId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdCertificatesPost -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsManagerAccountIdCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountId := params["managerAccountId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdCertificatesPost(managerAccountId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdDelete -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsManagerAccountIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountId := params["managerAccountId"]
	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdDelete(managerAccountId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdGet -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsManagerAccountIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountId := params["managerAccountId"]
	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdGet(managerAccountId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdPatch -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsManagerAccountIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountId := params["managerAccountId"]
	managerAccountV162ManagerAccount := &openapi.ManagerAccountV162ManagerAccount{}
	if err := json.NewDecoder(r.Body).Decode(&managerAccountV162ManagerAccount); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdPatch(managerAccountId, *managerAccountV162ManagerAccount)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceAccountsManagerAccountIdPut -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsManagerAccountIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerAccountId := params["managerAccountId"]
	managerAccountV162ManagerAccount := &openapi.ManagerAccountV162ManagerAccount{}
	if err := json.NewDecoder(r.Body).Decode(&managerAccountV162ManagerAccount); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceAccountsManagerAccountIdPut(managerAccountId, *managerAccountV162ManagerAccount)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceAccountsPost -
func (c *DefaultApiController) RedfishV1AccountServiceAccountsPost(w http.ResponseWriter, r *http.Request) {
	managerAccountV162ManagerAccount := &openapi.ManagerAccountV162ManagerAccount{}
	if err := json.NewDecoder(r.Body).Decode(&managerAccountV162ManagerAccount); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceAccountsPost(*managerAccountV162ManagerAccount)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost(certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost(certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdDelete(certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1AccountServiceActiveDirectoryCertificatesCertificateIdGet(certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceActiveDirectoryCertificatesGet -
func (c *DefaultApiController) RedfishV1AccountServiceActiveDirectoryCertificatesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AccountServiceActiveDirectoryCertificatesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceActiveDirectoryCertificatesPost -
func (c *DefaultApiController) RedfishV1AccountServiceActiveDirectoryCertificatesPost(w http.ResponseWriter, r *http.Request) {
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceActiveDirectoryCertificatesPost(*certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	externalAccountProviderId := params["externalAccountProviderId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost(externalAccountProviderId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	externalAccountProviderId := params["externalAccountProviderId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost(externalAccountProviderId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	externalAccountProviderId := params["externalAccountProviderId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete(externalAccountProviderId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	externalAccountProviderId := params["externalAccountProviderId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet(externalAccountProviderId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	externalAccountProviderId := params["externalAccountProviderId"]
	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet(externalAccountProviderId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	externalAccountProviderId := params["externalAccountProviderId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost(externalAccountProviderId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdDelete -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	externalAccountProviderId := params["externalAccountProviderId"]
	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdDelete(externalAccountProviderId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdGet -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	externalAccountProviderId := params["externalAccountProviderId"]
	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdGet(externalAccountProviderId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPatch -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	externalAccountProviderId := params["externalAccountProviderId"]
	externalAccountProviderV113ExternalAccountProvider := &openapi.ExternalAccountProviderV113ExternalAccountProvider{}
	if err := json.NewDecoder(r.Body).Decode(&externalAccountProviderV113ExternalAccountProvider); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPatch(externalAccountProviderId, *externalAccountProviderV113ExternalAccountProvider)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPut -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	externalAccountProviderId := params["externalAccountProviderId"]
	externalAccountProviderV113ExternalAccountProvider := &openapi.ExternalAccountProviderV113ExternalAccountProvider{}
	if err := json.NewDecoder(r.Body).Decode(&externalAccountProviderV113ExternalAccountProvider); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPut(externalAccountProviderId, *externalAccountProviderV113ExternalAccountProvider)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersGet -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceExternalAccountProvidersPost -
func (c *DefaultApiController) RedfishV1AccountServiceExternalAccountProvidersPost(w http.ResponseWriter, r *http.Request) {
	externalAccountProviderV113ExternalAccountProvider := &openapi.ExternalAccountProviderV113ExternalAccountProvider{}
	if err := json.NewDecoder(r.Body).Decode(&externalAccountProviderV113ExternalAccountProvider); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceExternalAccountProvidersPost(*externalAccountProviderV113ExternalAccountProvider)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceGet -
func (c *DefaultApiController) RedfishV1AccountServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AccountServiceGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost(certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost(certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceLDAPCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1AccountServiceLDAPCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1AccountServiceLDAPCertificatesCertificateIdDelete(certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceLDAPCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1AccountServiceLDAPCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1AccountServiceLDAPCertificatesCertificateIdGet(certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceLDAPCertificatesGet -
func (c *DefaultApiController) RedfishV1AccountServiceLDAPCertificatesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AccountServiceLDAPCertificatesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceLDAPCertificatesPost -
func (c *DefaultApiController) RedfishV1AccountServiceLDAPCertificatesPost(w http.ResponseWriter, r *http.Request) {
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceLDAPCertificatesPost(*certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServicePatch -
func (c *DefaultApiController) RedfishV1AccountServicePatch(w http.ResponseWriter, r *http.Request) {
	accountServiceV172AccountService := &openapi.AccountServiceV172AccountService{}
	if err := json.NewDecoder(r.Body).Decode(&accountServiceV172AccountService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServicePatch(*accountServiceV172AccountService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServicePut -
func (c *DefaultApiController) RedfishV1AccountServicePut(w http.ResponseWriter, r *http.Request) {
	accountServiceV172AccountService := &openapi.AccountServiceV172AccountService{}
	if err := json.NewDecoder(r.Body).Decode(&accountServiceV172AccountService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServicePut(*accountServiceV172AccountService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceRolesGet -
func (c *DefaultApiController) RedfishV1AccountServiceRolesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AccountServiceRolesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceRolesRoleIdGet -
func (c *DefaultApiController) RedfishV1AccountServiceRolesRoleIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	roleId := params["roleId"]
	result, err := c.service.RedfishV1AccountServiceRolesRoleIdGet(roleId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceRolesRoleIdPatch -
func (c *DefaultApiController) RedfishV1AccountServiceRolesRoleIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	roleId := params["roleId"]
	roleV125Role := &openapi.RoleV125Role{}
	if err := json.NewDecoder(r.Body).Decode(&roleV125Role); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceRolesRoleIdPatch(roleId, *roleV125Role)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AccountServiceRolesRoleIdPut -
func (c *DefaultApiController) RedfishV1AccountServiceRolesRoleIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	roleId := params["roleId"]
	roleV125Role := &openapi.RoleV125Role{}
	if err := json.NewDecoder(r.Body).Decode(&roleV125Role); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AccountServiceRolesRoleIdPut(roleId, *roleV125Role)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceActionsAggregationServiceResetPost -
func (c *DefaultApiController) RedfishV1AggregationServiceActionsAggregationServiceResetPost(w http.ResponseWriter, r *http.Request) {
	aggregationServiceV100ResetRequestBody := &openapi.AggregationServiceV100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&aggregationServiceV100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServiceActionsAggregationServiceResetPost(*aggregationServiceV100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceActionsAggregationServiceSetDefaultBootOrderPost -
func (c *DefaultApiController) RedfishV1AggregationServiceActionsAggregationServiceSetDefaultBootOrderPost(w http.ResponseWriter, r *http.Request) {
	aggregationServiceV100SetDefaultBootOrderRequestBody := &openapi.AggregationServiceV100SetDefaultBootOrderRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&aggregationServiceV100SetDefaultBootOrderRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServiceActionsAggregationServiceSetDefaultBootOrderPost(*aggregationServiceV100SetDefaultBootOrderRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateAddElementsPost -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateAddElementsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aggregateId := params["aggregateId"]
	aggregateV100AddElementsRequestBody := &openapi.AggregateV100AddElementsRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&aggregateV100AddElementsRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateAddElementsPost(aggregateId, *aggregateV100AddElementsRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateRemoveElementsPost -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateRemoveElementsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aggregateId := params["aggregateId"]
	aggregateV100RemoveElementsRequestBody := &openapi.AggregateV100RemoveElementsRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&aggregateV100RemoveElementsRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateRemoveElementsPost(aggregateId, *aggregateV100RemoveElementsRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateResetPost -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aggregateId := params["aggregateId"]
	aggregateV100ResetRequestBody := &openapi.AggregateV100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&aggregateV100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateResetPost(aggregateId, *aggregateV100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateSetDefaultBootOrderPost -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateSetDefaultBootOrderPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aggregateId := params["aggregateId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServiceAggregatesAggregateIdActionsAggregateSetDefaultBootOrderPost(aggregateId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregatesAggregateIdDelete -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregatesAggregateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aggregateId := params["aggregateId"]
	result, err := c.service.RedfishV1AggregationServiceAggregatesAggregateIdDelete(aggregateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregatesAggregateIdGet -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregatesAggregateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aggregateId := params["aggregateId"]
	result, err := c.service.RedfishV1AggregationServiceAggregatesAggregateIdGet(aggregateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregatesGet -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregatesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AggregationServiceAggregatesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregatesPost -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregatesPost(w http.ResponseWriter, r *http.Request) {
	aggregateV100Aggregate := &openapi.AggregateV100Aggregate{}
	if err := json.NewDecoder(r.Body).Decode(&aggregateV100Aggregate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServiceAggregatesPost(*aggregateV100Aggregate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdDelete -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aggregationSourceId := params["aggregationSourceId"]
	result, err := c.service.RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdDelete(aggregationSourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdGet -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aggregationSourceId := params["aggregationSourceId"]
	result, err := c.service.RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdGet(aggregationSourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdPatch -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aggregationSourceId := params["aggregationSourceId"]
	aggregationSourceV100AggregationSource := &openapi.AggregationSourceV100AggregationSource{}
	if err := json.NewDecoder(r.Body).Decode(&aggregationSourceV100AggregationSource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdPatch(aggregationSourceId, *aggregationSourceV100AggregationSource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdPut -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	aggregationSourceId := params["aggregationSourceId"]
	aggregationSourceV100AggregationSource := &openapi.AggregationSourceV100AggregationSource{}
	if err := json.NewDecoder(r.Body).Decode(&aggregationSourceV100AggregationSource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServiceAggregationSourcesAggregationSourceIdPut(aggregationSourceId, *aggregationSourceV100AggregationSource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregationSourcesGet -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregationSourcesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AggregationServiceAggregationSourcesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceAggregationSourcesPost -
func (c *DefaultApiController) RedfishV1AggregationServiceAggregationSourcesPost(w http.ResponseWriter, r *http.Request) {
	aggregationSourceV100AggregationSource := &openapi.AggregationSourceV100AggregationSource{}
	if err := json.NewDecoder(r.Body).Decode(&aggregationSourceV100AggregationSource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServiceAggregationSourcesPost(*aggregationSourceV100AggregationSource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceConnectionMethodsConnectionMethodIdGet -
func (c *DefaultApiController) RedfishV1AggregationServiceConnectionMethodsConnectionMethodIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	connectionMethodId := params["connectionMethodId"]
	result, err := c.service.RedfishV1AggregationServiceConnectionMethodsConnectionMethodIdGet(connectionMethodId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceConnectionMethodsGet -
func (c *DefaultApiController) RedfishV1AggregationServiceConnectionMethodsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AggregationServiceConnectionMethodsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceConnectionMethodsPost -
func (c *DefaultApiController) RedfishV1AggregationServiceConnectionMethodsPost(w http.ResponseWriter, r *http.Request) {
	connectionMethodV100ConnectionMethod := &openapi.ConnectionMethodV100ConnectionMethod{}
	if err := json.NewDecoder(r.Body).Decode(&connectionMethodV100ConnectionMethod); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServiceConnectionMethodsPost(*connectionMethodV100ConnectionMethod)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServiceGet -
func (c *DefaultApiController) RedfishV1AggregationServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1AggregationServiceGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServicePatch -
func (c *DefaultApiController) RedfishV1AggregationServicePatch(w http.ResponseWriter, r *http.Request) {
	requestBody := &map[string]map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&requestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServicePatch(*requestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1AggregationServicePut -
func (c *DefaultApiController) RedfishV1AggregationServicePut(w http.ResponseWriter, r *http.Request) {
	requestBody := &map[string]map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&requestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1AggregationServicePut(*requestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CertificateServiceActionsCertificateServiceGenerateCSRPost -
func (c *DefaultApiController) RedfishV1CertificateServiceActionsCertificateServiceGenerateCSRPost(w http.ResponseWriter, r *http.Request) {
	certificateServiceV103GenerateCsrRequestBody := &openapi.CertificateServiceV103GenerateCsrRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateServiceV103GenerateCsrRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CertificateServiceActionsCertificateServiceGenerateCSRPost(*certificateServiceV103GenerateCsrRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CertificateServiceActionsCertificateServiceReplaceCertificatePost -
func (c *DefaultApiController) RedfishV1CertificateServiceActionsCertificateServiceReplaceCertificatePost(w http.ResponseWriter, r *http.Request) {
	certificateServiceV103ReplaceCertificateRequestBody := &openapi.CertificateServiceV103ReplaceCertificateRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateServiceV103ReplaceCertificateRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CertificateServiceActionsCertificateServiceReplaceCertificatePost(*certificateServiceV103ReplaceCertificateRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CertificateServiceCertificateLocationsGet -
func (c *DefaultApiController) RedfishV1CertificateServiceCertificateLocationsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1CertificateServiceCertificateLocationsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CertificateServiceGet -
func (c *DefaultApiController) RedfishV1CertificateServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1CertificateServiceGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdActionsChassisResetPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdActionsChassisResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	chassisV1140ResetRequestBody := &openapi.ChassisV1140ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&chassisV1140ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdActionsChassisResetPost(chassisId, *chassisV1140ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdAssemblyGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdAssemblyPatch(chassisId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdAssemblyPut(chassisId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdDelete -
func (c *DefaultApiController) RedfishV1ChassisChassisIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdDelete(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdDrivesDriveIdActionsDriveResetPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdDrivesDriveIdActionsDriveResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	driveId := params["driveId"]
	driveV1110ResetRequestBody := &openapi.DriveV1110ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdDrivesDriveIdActionsDriveResetPost(chassisId, driveId, *driveV1110ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdDrivesDriveIdActionsDriveSecureErasePost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdDrivesDriveIdActionsDriveSecureErasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	driveId := params["driveId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdDrivesDriveIdActionsDriveSecureErasePost(chassisId, driveId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdDrivesDriveIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdDrivesDriveIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1ChassisChassisIdDrivesDriveIdAssemblyGet(chassisId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdDrivesDriveIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdDrivesDriveIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdDrivesDriveIdAssemblyPatch(chassisId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdDrivesDriveIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdDrivesDriveIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdDrivesDriveIdAssemblyPut(chassisId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdDrivesDriveIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdDrivesDriveIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1ChassisChassisIdDrivesDriveIdGet(chassisId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdDrivesDriveIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdDrivesDriveIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdDrivesDriveIdPatch(chassisId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdDrivesDriveIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdDrivesDriveIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdDrivesDriveIdPut(chassisId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdDrivesGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdDrivesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdDrivesGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdLogServicesGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdLogServicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdLogServicesGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceClearLogPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceClearLogPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	logServiceId := params["logServiceId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceClearLogPost(chassisId, logServiceId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	logServiceId := params["logServiceId"]
	logServiceV120CollectDiagnosticDataRequestBody := &openapi.LogServiceV120CollectDiagnosticDataRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120CollectDiagnosticDataRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(chassisId, logServiceId, *logServiceV120CollectDiagnosticDataRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	logServiceId := params["logServiceId"]
	result, err := c.service.RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesGet(chassisId, logServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdDelete -
func (c *DefaultApiController) RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	logServiceId := params["logServiceId"]
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdDelete(chassisId, logServiceId, logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	logServiceId := params["logServiceId"]
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdGet(chassisId, logServiceId, logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	logServiceId := params["logServiceId"]
	logEntryV170LogEntry := &openapi.LogEntryV170LogEntry{}
	if err := json.NewDecoder(r.Body).Decode(&logEntryV170LogEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdLogServicesLogServiceIdEntriesPost(chassisId, logServiceId, *logEntryV170LogEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdLogServicesLogServiceIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdLogServicesLogServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	logServiceId := params["logServiceId"]
	result, err := c.service.RedfishV1ChassisChassisIdLogServicesLogServiceIdGet(chassisId, logServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdLogServicesLogServiceIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdLogServicesLogServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	logServiceId := params["logServiceId"]
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdLogServicesLogServiceIdPatch(chassisId, logServiceId, *logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdLogServicesLogServiceIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdLogServicesLogServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	logServiceId := params["logServiceId"]
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdLogServicesLogServiceIdPut(chassisId, logServiceId, *logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMediaControllersGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMediaControllersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdMediaControllersGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMediaControllersMediaControllerIdActionsMediaControllerResetPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMediaControllersMediaControllerIdActionsMediaControllerResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	mediaControllerId := params["mediaControllerId"]
	mediaControllerV110ResetRequestBody := &openapi.MediaControllerV110ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&mediaControllerV110ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdActionsMediaControllerResetPost(chassisId, mediaControllerId, *mediaControllerV110ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMediaControllersMediaControllerIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMediaControllersMediaControllerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	mediaControllerId := params["mediaControllerId"]
	result, err := c.service.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdGet(chassisId, mediaControllerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	mediaControllerId := params["mediaControllerId"]
	result, err := c.service.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsGet(chassisId, mediaControllerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdActionsPortResetPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdActionsPortResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	mediaControllerId := params["mediaControllerId"]
	portId := params["portId"]
	portV130ResetRequestBody := &openapi.PortV130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&portV130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdActionsPortResetPost(chassisId, mediaControllerId, portId, *portV130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	mediaControllerId := params["mediaControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdGet(chassisId, mediaControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdMetricsGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	mediaControllerId := params["mediaControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdMetricsGet(chassisId, mediaControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	mediaControllerId := params["mediaControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPatch(chassisId, mediaControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	mediaControllerId := params["mediaControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPut(chassisId, mediaControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryDomainsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryDomainId := params["memoryDomainId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGet(chassisId, memoryDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryDomainId := params["memoryDomainId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGet(chassisId, memoryDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(chassisId, memoryDomainId, memoryChunksId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(chassisId, memoryDomainId, memoryChunksId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(chassisId, memoryDomainId, memoryChunksId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(chassisId, memoryDomainId, memoryChunksId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksPost(chassisId, memoryDomainId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryDisablePassphrasePost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryId := params["memoryId"]
	memoryV1100DisablePassphraseRequestBody := &openapi.MemoryV1100DisablePassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100DisablePassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(chassisId, memoryId, *memoryV1100DisablePassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryOverwriteUnitPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryId := params["memoryId"]
	memoryV1100OverwriteUnitRequestBody := &openapi.MemoryV1100OverwriteUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100OverwriteUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(chassisId, memoryId, *memoryV1100OverwriteUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryResetPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryId := params["memoryId"]
	memoryV1100ResetRequestBody := &openapi.MemoryV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryResetPost(chassisId, memoryId, *memoryV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySecureEraseUnitPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryId := params["memoryId"]
	memoryV1100SecureEraseUnitRequestBody := &openapi.MemoryV1100SecureEraseUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SecureEraseUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(chassisId, memoryId, *memoryV1100SecureEraseUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySetPassphrasePost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySetPassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryId := params["memoryId"]
	memoryV1100SetPassphraseRequestBody := &openapi.MemoryV1100SetPassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SetPassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySetPassphrasePost(chassisId, memoryId, *memoryV1100SetPassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryUnlockUnitPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryUnlockUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryId := params["memoryId"]
	memoryV1100UnlockUnitRequestBody := &openapi.MemoryV1100UnlockUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100UnlockUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryUnlockUnitPost(chassisId, memoryId, *memoryV1100UnlockUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryMemoryIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryMemoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1ChassisChassisIdMemoryMemoryIdGet(chassisId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryMemoryIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryMemoryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMemoryMemoryIdPatch(chassisId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdMemoryMemoryIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdMemoryMemoryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdMemoryMemoryIdPut(chassisId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdActionsNetworkAdapterResetSettingsToDefaultPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdActionsNetworkAdapterResetSettingsToDefaultPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdActionsNetworkAdapterResetSettingsToDefaultPost(chassisId, networkAdapterId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyGet(chassisId, networkAdapterId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPatch(chassisId, networkAdapterId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPut(chassisId, networkAdapterId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdGet(chassisId, networkAdapterId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsGet(chassisId, networkAdapterId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkDeviceFunctionId := params["networkDeviceFunctionId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsGet(chassisId, networkAdapterId, networkDeviceFunctionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkDeviceFunctionId := params["networkDeviceFunctionId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsPost(chassisId, networkAdapterId, networkDeviceFunctionId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdDelete -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkDeviceFunctionId := params["networkDeviceFunctionId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdDelete(chassisId, networkAdapterId, networkDeviceFunctionId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkDeviceFunctionId := params["networkDeviceFunctionId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdGet(chassisId, networkAdapterId, networkDeviceFunctionId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkDeviceFunctionId := params["networkDeviceFunctionId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPatch(chassisId, networkAdapterId, networkDeviceFunctionId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkDeviceFunctionId := params["networkDeviceFunctionId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPut(chassisId, networkAdapterId, networkDeviceFunctionId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkDeviceFunctionId := params["networkDeviceFunctionId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdGet(chassisId, networkAdapterId, networkDeviceFunctionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkDeviceFunctionId := params["networkDeviceFunctionId"]
	networkDeviceFunctionV150NetworkDeviceFunction := &openapi.NetworkDeviceFunctionV150NetworkDeviceFunction{}
	if err := json.NewDecoder(r.Body).Decode(&networkDeviceFunctionV150NetworkDeviceFunction); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPatch(chassisId, networkAdapterId, networkDeviceFunctionId, *networkDeviceFunctionV150NetworkDeviceFunction)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkDeviceFunctionId := params["networkDeviceFunctionId"]
	networkDeviceFunctionV150NetworkDeviceFunction := &openapi.NetworkDeviceFunctionV150NetworkDeviceFunction{}
	if err := json.NewDecoder(r.Body).Decode(&networkDeviceFunctionV150NetworkDeviceFunction); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPut(chassisId, networkAdapterId, networkDeviceFunctionId, *networkDeviceFunctionV150NetworkDeviceFunction)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsGet(chassisId, networkAdapterId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkPortId := params["networkPortId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdGet(chassisId, networkAdapterId, networkPortId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkPortId := params["networkPortId"]
	networkPortV130NetworkPort := &openapi.NetworkPortV130NetworkPort{}
	if err := json.NewDecoder(r.Body).Decode(&networkPortV130NetworkPort); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPatch(chassisId, networkAdapterId, networkPortId, *networkPortV130NetworkPort)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkPortId := params["networkPortId"]
	networkPortV130NetworkPort := &openapi.NetworkPortV130NetworkPort{}
	if err := json.NewDecoder(r.Body).Decode(&networkPortV130NetworkPort); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPut(chassisId, networkAdapterId, networkPortId, *networkPortV130NetworkPort)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkAdapterV150NetworkAdapter := &openapi.NetworkAdapterV150NetworkAdapter{}
	if err := json.NewDecoder(r.Body).Decode(&networkAdapterV150NetworkAdapter); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPatch(chassisId, networkAdapterId, *networkAdapterV150NetworkAdapter)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsGet(chassisId, networkAdapterId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdActionsPortResetPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdActionsPortResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	portId := params["portId"]
	portV130ResetRequestBody := &openapi.PortV130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&portV130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdActionsPortResetPost(chassisId, networkAdapterId, portId, *portV130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdGet(chassisId, networkAdapterId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPatch(chassisId, networkAdapterId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPut(chassisId, networkAdapterId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	networkAdapterId := params["networkAdapterId"]
	networkAdapterV150NetworkAdapter := &openapi.NetworkAdapterV150NetworkAdapter{}
	if err := json.NewDecoder(r.Body).Decode(&networkAdapterV150NetworkAdapter); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPut(chassisId, networkAdapterId, *networkAdapterV150NetworkAdapter)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeDevicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyGet(chassisId, pCIeDeviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPatch(chassisId, pCIeDeviceId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPut(chassisId, pCIeDeviceId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGet(chassisId, pCIeDeviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(chassisId, pCIeDeviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pCIeFunctionId := params["pCIeFunctionId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(chassisId, pCIeDeviceId, pCIeFunctionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pcIeDeviceV150PcIeDevice := &openapi.PcIeDeviceV150PcIeDevice{}
	if err := json.NewDecoder(r.Body).Decode(&pcIeDeviceV150PcIeDevice); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPatch(chassisId, pCIeDeviceId, *pcIeDeviceV150PcIeDevice)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pcIeDeviceV150PcIeDevice := &openapi.PcIeDeviceV150PcIeDevice{}
	if err := json.NewDecoder(r.Body).Decode(&pcIeDeviceV150PcIeDevice); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPut(chassisId, pCIeDeviceId, *pcIeDeviceV150PcIeDevice)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeSlotsGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeSlotsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdPCIeSlotsGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeSlotsPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeSlotsPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	pcIeSlotsV140PcIeSlots := &openapi.PcIeSlotsV140PcIeSlots{}
	if err := json.NewDecoder(r.Body).Decode(&pcIeSlotsV140PcIeSlots); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPCIeSlotsPatch(chassisId, *pcIeSlotsV140PcIeSlots)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPCIeSlotsPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPCIeSlotsPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	pcIeSlotsV140PcIeSlots := &openapi.PcIeSlotsV140PcIeSlots{}
	if err := json.NewDecoder(r.Body).Decode(&pcIeSlotsV140PcIeSlots); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPCIeSlotsPut(chassisId, *pcIeSlotsV140PcIeSlots)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	chassisV1140Chassis := &openapi.ChassisV1140Chassis{}
	if err := json.NewDecoder(r.Body).Decode(&chassisV1140Chassis); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPatch(chassisId, *chassisV1140Chassis)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPowerActionsPowerPowerSupplyResetPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPowerActionsPowerPowerSupplyResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	powerV161PowerSupplyResetRequestBody := &openapi.PowerV161PowerSupplyResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&powerV161PowerSupplyResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPowerActionsPowerPowerSupplyResetPost(chassisId, *powerV161PowerSupplyResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPowerGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPowerGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdPowerGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPowerPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPowerPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	powerV161Power := &openapi.PowerV161Power{}
	if err := json.NewDecoder(r.Body).Decode(&powerV161Power); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPowerPatch(chassisId, *powerV161Power)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	powerSupplyId := params["powerSupplyId"]
	result, err := c.service.RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyGet(chassisId, powerSupplyId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	powerSupplyId := params["powerSupplyId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPatch(chassisId, powerSupplyId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	powerSupplyId := params["powerSupplyId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPut(chassisId, powerSupplyId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPowerPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPowerPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	powerV161Power := &openapi.PowerV161Power{}
	if err := json.NewDecoder(r.Body).Decode(&powerV161Power); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPowerPut(chassisId, *powerV161Power)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	chassisV1140Chassis := &openapi.ChassisV1140Chassis{}
	if err := json.NewDecoder(r.Body).Decode(&chassisV1140Chassis); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdPut(chassisId, *chassisV1140Chassis)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdSensorsGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdSensorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdSensorsGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdSensorsSensorIdActionsSensorResetMetricsPost -
func (c *DefaultApiController) RedfishV1ChassisChassisIdSensorsSensorIdActionsSensorResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	sensorId := params["sensorId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdSensorsSensorIdActionsSensorResetMetricsPost(chassisId, sensorId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdSensorsSensorIdGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdSensorsSensorIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	sensorId := params["sensorId"]
	result, err := c.service.RedfishV1ChassisChassisIdSensorsSensorIdGet(chassisId, sensorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdSensorsSensorIdPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdSensorsSensorIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	sensorId := params["sensorId"]
	sensorV111Sensor := &openapi.SensorV111Sensor{}
	if err := json.NewDecoder(r.Body).Decode(&sensorV111Sensor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdSensorsSensorIdPatch(chassisId, sensorId, *sensorV111Sensor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdSensorsSensorIdPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdSensorsSensorIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	sensorId := params["sensorId"]
	sensorV111Sensor := &openapi.SensorV111Sensor{}
	if err := json.NewDecoder(r.Body).Decode(&sensorV111Sensor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdSensorsSensorIdPut(chassisId, sensorId, *sensorV111Sensor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdThermalFansFanIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdThermalFansFanIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	fanId := params["fanId"]
	result, err := c.service.RedfishV1ChassisChassisIdThermalFansFanIdAssemblyGet(chassisId, fanId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdThermalFansFanIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdThermalFansFanIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	fanId := params["fanId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdThermalFansFanIdAssemblyPatch(chassisId, fanId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdThermalFansFanIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdThermalFansFanIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	fanId := params["fanId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdThermalFansFanIdAssemblyPut(chassisId, fanId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdThermalGet -
func (c *DefaultApiController) RedfishV1ChassisChassisIdThermalGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	result, err := c.service.RedfishV1ChassisChassisIdThermalGet(chassisId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdThermalPatch -
func (c *DefaultApiController) RedfishV1ChassisChassisIdThermalPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	thermalV162Thermal := &openapi.ThermalV162Thermal{}
	if err := json.NewDecoder(r.Body).Decode(&thermalV162Thermal); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdThermalPatch(chassisId, *thermalV162Thermal)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisChassisIdThermalPut -
func (c *DefaultApiController) RedfishV1ChassisChassisIdThermalPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	chassisId := params["chassisId"]
	thermalV162Thermal := &openapi.ThermalV162Thermal{}
	if err := json.NewDecoder(r.Body).Decode(&thermalV162Thermal); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisChassisIdThermalPut(chassisId, *thermalV162Thermal)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisGet -
func (c *DefaultApiController) RedfishV1ChassisGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1ChassisGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ChassisPost -
func (c *DefaultApiController) RedfishV1ChassisPost(w http.ResponseWriter, r *http.Request) {
	chassisV1140Chassis := &openapi.ChassisV1140Chassis{}
	if err := json.NewDecoder(r.Body).Decode(&chassisV1140Chassis); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ChassisPost(*chassisV1140Chassis)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceGet -
func (c *DefaultApiController) RedfishV1CompositionServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1CompositionServiceGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServicePatch -
func (c *DefaultApiController) RedfishV1CompositionServicePatch(w http.ResponseWriter, r *http.Request) {
	compositionServiceV112CompositionService := &openapi.CompositionServiceV112CompositionService{}
	if err := json.NewDecoder(r.Body).Decode(&compositionServiceV112CompositionService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServicePatch(*compositionServiceV112CompositionService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServicePut -
func (c *DefaultApiController) RedfishV1CompositionServicePut(w http.ResponseWriter, r *http.Request) {
	compositionServiceV112CompositionService := &openapi.CompositionServiceV112CompositionService{}
	if err := json.NewDecoder(r.Body).Decode(&compositionServiceV112CompositionService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServicePut(*compositionServiceV112CompositionService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	driveV1110ResetRequestBody := &openapi.DriveV1110ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, driveId, *driveV1110ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, driveId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet(resourceBlockId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch(resourceBlockId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut(resourceBlockId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdGet(resourceBlockId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPatch(resourceBlockId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPut(resourceBlockId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet(resourceBlockId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch(resourceBlockId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut(resourceBlockId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet(resourceBlockId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost(resourceBlockId, ethernetInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(resourceBlockId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(resourceBlockId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(resourceBlockId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(resourceBlockId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdGet(resourceBlockId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100DisablePassphraseRequestBody := &openapi.MemoryV1100DisablePassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100DisablePassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(resourceBlockId, memoryId, *memoryV1100DisablePassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100OverwriteUnitRequestBody := &openapi.MemoryV1100OverwriteUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100OverwriteUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(resourceBlockId, memoryId, *memoryV1100OverwriteUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100ResetRequestBody := &openapi.MemoryV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost(resourceBlockId, memoryId, *memoryV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100SecureEraseUnitRequestBody := &openapi.MemoryV1100SecureEraseUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SecureEraseUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(resourceBlockId, memoryId, *memoryV1100SecureEraseUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100SetPassphraseRequestBody := &openapi.MemoryV1100SetPassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SetPassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost(resourceBlockId, memoryId, *memoryV1100SetPassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100UnlockUnitRequestBody := &openapi.MemoryV1100UnlockUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100UnlockUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost(resourceBlockId, memoryId, *memoryV1100UnlockUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet(resourceBlockId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch(resourceBlockId, memoryId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut(resourceBlockId, memoryId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdGet(resourceBlockId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, memoryId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet(resourceBlockId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPatch(resourceBlockId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPut(resourceBlockId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet(resourceBlockId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(resourceBlockId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(resourceBlockId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet(resourceBlockId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	resourceBlockV133ResourceBlock := &openapi.ResourceBlockV133ResourceBlock{}
	if err := json.NewDecoder(r.Body).Decode(&resourceBlockV133ResourceBlock); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdPatch(resourceBlockId, *resourceBlockV133ResourceBlock)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	accelerationFunctionId := params["accelerationFunctionId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(resourceBlockId, processorId, accelerationFunctionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet(resourceBlockId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorV1100ResetRequestBody := &openapi.ProcessorV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost(resourceBlockId, processorId, *processorV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet(resourceBlockId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch(resourceBlockId, processorId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut(resourceBlockId, processorId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdGet(resourceBlockId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPatch(resourceBlockId, processorId, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet(resourceBlockId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPut(resourceBlockId, processorId, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet(resourceBlockId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100ResetRequestBody := &openapi.ProcessorV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(resourceBlockId, processorId, processorId2, *processorV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(resourceBlockId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(resourceBlockId, processorId, processorId2, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(resourceBlockId, processorId, processorId2, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get(resourceBlockId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(resourceBlockId, processorId, processorId2, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(resourceBlockId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put(resourceBlockId, processorId, processorId2, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	resourceBlockV133ResourceBlock := &openapi.ResourceBlockV133ResourceBlock{}
	if err := json.NewDecoder(r.Body).Decode(&resourceBlockV133ResourceBlock); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdPut(resourceBlockId, *resourceBlockV133ResourceBlock)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	simpleStorageId := params["simpleStorageId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet(resourceBlockId, simpleStorageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageGet(resourceBlockId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageV190SetEncryptionKeyRequestBody := &openapi.StorageV190SetEncryptionKeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190SetEncryptionKeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost(resourceBlockId, storageId, *storageV190SetEncryptionKeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyGet(resourceBlockId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyPatch(resourceBlockId, storageId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdAssemblyPut(resourceBlockId, storageId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet(resourceBlockId, storageId, controllerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch(resourceBlockId, storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut(resourceBlockId, storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersGet(resourceBlockId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110ResetRequestBody := &openapi.DriveV1110ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, storageId, driveId, *driveV1110ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, storageId, driveId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet(resourceBlockId, storageId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch(resourceBlockId, storageId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut(resourceBlockId, storageId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet(resourceBlockId, storageId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch(resourceBlockId, storageId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut(resourceBlockId, storageId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdGet(resourceBlockId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPatch(resourceBlockId, storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPut(resourceBlockId, storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130ResetRequestBody := &openapi.PortV130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&portV130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, storageId, storageControllerId, portId, *portV130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(resourceBlockId, storageId, storageControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(resourceBlockId, storageId, storageControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, storageId, storageControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(resourceBlockId, storageId, storageControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerMemberId := params["storageControllerMemberId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet(resourceBlockId, storageId, storageControllerMemberId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesGet(resourceBlockId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesPost(resourceBlockId, storageId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(resourceBlockId, storageId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(resourceBlockId, storageId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(resourceBlockId, storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(resourceBlockId, storageId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(resourceBlockId, storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(resourceBlockId, storageId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(resourceBlockId, storageId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(resourceBlockId, storageId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(resourceBlockId, storageId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(resourceBlockId, storageId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(resourceBlockId, storageId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete(resourceBlockId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet(resourceBlockId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch(resourceBlockId, storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut(resourceBlockId, storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	computerSystemV1130AddResourceBlockRequestBody := &openapi.ComputerSystemV1130AddResourceBlockRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130AddResourceBlockRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost(resourceBlockId, computerSystemId, *computerSystemV1130AddResourceBlockRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	computerSystemV1130RemoveResourceBlockRequestBody := &openapi.ComputerSystemV1130RemoveResourceBlockRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130RemoveResourceBlockRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost(resourceBlockId, computerSystemId, *computerSystemV1130RemoveResourceBlockRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	computerSystemV1130ResetRequestBody := &openapi.ComputerSystemV1130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost(resourceBlockId, computerSystemId, *computerSystemV1130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost(resourceBlockId, computerSystemId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	biosV111ChangePasswordRequestBody := &openapi.BiosV111ChangePasswordRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&biosV111ChangePasswordRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost(resourceBlockId, computerSystemId, *biosV111ChangePasswordRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost(resourceBlockId, computerSystemId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	requestBody := &map[string]map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&requestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch(resourceBlockId, computerSystemId, *requestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	requestBody := &map[string]map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&requestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut(resourceBlockId, computerSystemId, *requestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet(resourceBlockId, computerSystemId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost(resourceBlockId, computerSystemId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete(resourceBlockId, computerSystemId, bootOptionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet(resourceBlockId, computerSystemId, bootOptionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	bootOptionV104BootOption := &openapi.BootOptionV104BootOption{}
	if err := json.NewDecoder(r.Body).Decode(&bootOptionV104BootOption); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch(resourceBlockId, computerSystemId, bootOptionId, *bootOptionV104BootOption)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	bootOptionV104BootOption := &openapi.BootOptionV104BootOption{}
	if err := json.NewDecoder(r.Body).Decode(&bootOptionV104BootOption); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut(resourceBlockId, computerSystemId, bootOptionId, *bootOptionV104BootOption)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	bootOptionV104BootOption := &openapi.BootOptionV104BootOption{}
	if err := json.NewDecoder(r.Body).Decode(&bootOptionV104BootOption); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost(resourceBlockId, computerSystemId, *bootOptionV104BootOption)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet(resourceBlockId, computerSystemId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch(resourceBlockId, computerSystemId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut(resourceBlockId, computerSystemId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet(resourceBlockId, computerSystemId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost(resourceBlockId, computerSystemId, ethernetInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(resourceBlockId, computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(resourceBlockId, computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(resourceBlockId, computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(resourceBlockId, computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost(resourceBlockId, computerSystemId, logServiceId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logServiceV120CollectDiagnosticDataRequestBody := &openapi.LogServiceV120CollectDiagnosticDataRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120CollectDiagnosticDataRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(resourceBlockId, computerSystemId, logServiceId, *logServiceV120CollectDiagnosticDataRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet(resourceBlockId, computerSystemId, logServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete(resourceBlockId, computerSystemId, logServiceId, logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet(resourceBlockId, computerSystemId, logServiceId, logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logEntryV170LogEntry := &openapi.LogEntryV170LogEntry{}
	if err := json.NewDecoder(r.Body).Decode(&logEntryV170LogEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost(resourceBlockId, computerSystemId, logServiceId, *logEntryV170LogEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet(resourceBlockId, computerSystemId, logServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch(resourceBlockId, computerSystemId, logServiceId, *logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut(resourceBlockId, computerSystemId, logServiceId, *logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet(resourceBlockId, computerSystemId, memoryDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet(resourceBlockId, computerSystemId, memoryDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost(resourceBlockId, computerSystemId, memoryDomainId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100DisablePassphraseRequestBody := &openapi.MemoryV1100DisablePassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100DisablePassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(resourceBlockId, computerSystemId, memoryId, *memoryV1100DisablePassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100OverwriteUnitRequestBody := &openapi.MemoryV1100OverwriteUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100OverwriteUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(resourceBlockId, computerSystemId, memoryId, *memoryV1100OverwriteUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100ResetRequestBody := &openapi.MemoryV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost(resourceBlockId, computerSystemId, memoryId, *memoryV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100SecureEraseUnitRequestBody := &openapi.MemoryV1100SecureEraseUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SecureEraseUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(resourceBlockId, computerSystemId, memoryId, *memoryV1100SecureEraseUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100SetPassphraseRequestBody := &openapi.MemoryV1100SetPassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SetPassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost(resourceBlockId, computerSystemId, memoryId, *memoryV1100SetPassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100UnlockUnitRequestBody := &openapi.MemoryV1100UnlockUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100UnlockUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost(resourceBlockId, computerSystemId, memoryId, *memoryV1100UnlockUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet(resourceBlockId, computerSystemId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch(resourceBlockId, computerSystemId, memoryId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut(resourceBlockId, computerSystemId, memoryId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet(resourceBlockId, computerSystemId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, memoryId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet(resourceBlockId, computerSystemId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch(resourceBlockId, computerSystemId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut(resourceBlockId, computerSystemId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet(resourceBlockId, computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(resourceBlockId, computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(resourceBlockId, computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet(resourceBlockId, computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet(resourceBlockId, computerSystemId, pCIeDeviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(resourceBlockId, computerSystemId, pCIeDeviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pCIeFunctionId := params["pCIeFunctionId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(resourceBlockId, computerSystemId, pCIeDeviceId, pCIeFunctionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pcIeDeviceV150PcIeDevice := &openapi.PcIeDeviceV150PcIeDevice{}
	if err := json.NewDecoder(r.Body).Decode(&pcIeDeviceV150PcIeDevice); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch(resourceBlockId, computerSystemId, pCIeDeviceId, *pcIeDeviceV150PcIeDevice)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pcIeDeviceV150PcIeDevice := &openapi.PcIeDeviceV150PcIeDevice{}
	if err := json.NewDecoder(r.Body).Decode(&pcIeDeviceV150PcIeDevice); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut(resourceBlockId, computerSystemId, pCIeDeviceId, *pcIeDeviceV150PcIeDevice)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	computerSystemV1130ComputerSystem := &openapi.ComputerSystemV1130ComputerSystem{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130ComputerSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch(resourceBlockId, computerSystemId, *computerSystemV1130ComputerSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	accelerationFunctionId := params["accelerationFunctionId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(resourceBlockId, computerSystemId, processorId, accelerationFunctionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet(resourceBlockId, computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorV1100ResetRequestBody := &openapi.ProcessorV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost(resourceBlockId, computerSystemId, processorId, *processorV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet(resourceBlockId, computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch(resourceBlockId, computerSystemId, processorId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut(resourceBlockId, computerSystemId, processorId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet(resourceBlockId, computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch(resourceBlockId, computerSystemId, processorId, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet(resourceBlockId, computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut(resourceBlockId, computerSystemId, processorId, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet(resourceBlockId, computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100ResetRequestBody := &openapi.ProcessorV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(resourceBlockId, computerSystemId, processorId, processorId2, *processorV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(resourceBlockId, computerSystemId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(resourceBlockId, computerSystemId, processorId, processorId2, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(resourceBlockId, computerSystemId, processorId, processorId2, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get(resourceBlockId, computerSystemId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(resourceBlockId, computerSystemId, processorId, processorId2, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(resourceBlockId, computerSystemId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put(resourceBlockId, computerSystemId, processorId, processorId2, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	computerSystemV1130ComputerSystem := &openapi.ComputerSystemV1130ComputerSystem{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130ComputerSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPut(resourceBlockId, computerSystemId, *computerSystemV1130ComputerSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	secureBootV110ResetKeysRequestBody := &openapi.SecureBootV110ResetKeysRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootV110ResetKeysRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost(resourceBlockId, computerSystemId, *secureBootV110ResetKeysRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	secureBootV110SecureBoot := &openapi.SecureBootV110SecureBoot{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootV110SecureBoot); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch(resourceBlockId, computerSystemId, *secureBootV110SecureBoot)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	secureBootV110SecureBoot := &openapi.SecureBootV110SecureBoot{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootV110SecureBoot); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut(resourceBlockId, computerSystemId, *secureBootV110SecureBoot)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	secureBootDatabaseV100ResetKeysRequestBody := &openapi.SecureBootDatabaseV100ResetKeysRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootDatabaseV100ResetKeysRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost(resourceBlockId, computerSystemId, databaseId, *secureBootDatabaseV100ResetKeysRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, databaseId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, databaseId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, databaseId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, databaseId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet(resourceBlockId, computerSystemId, databaseId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost(resourceBlockId, computerSystemId, databaseId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet(resourceBlockId, computerSystemId, databaseId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet(resourceBlockId, computerSystemId, databaseId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	signatureV101Signature := &openapi.SignatureV101Signature{}
	if err := json.NewDecoder(r.Body).Decode(&signatureV101Signature); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost(resourceBlockId, computerSystemId, databaseId, *signatureV101Signature)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	signatureId := params["signatureId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete(resourceBlockId, computerSystemId, databaseId, signatureId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	signatureId := params["signatureId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet(resourceBlockId, computerSystemId, databaseId, signatureId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	simpleStorageId := params["simpleStorageId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet(resourceBlockId, computerSystemId, simpleStorageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageV190SetEncryptionKeyRequestBody := &openapi.StorageV190SetEncryptionKeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190SetEncryptionKeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost(resourceBlockId, computerSystemId, storageId, *storageV190SetEncryptionKeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyGet(resourceBlockId, computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPatch(resourceBlockId, computerSystemId, storageId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPut(resourceBlockId, computerSystemId, storageId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet(resourceBlockId, computerSystemId, storageId, controllerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch(resourceBlockId, computerSystemId, storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut(resourceBlockId, computerSystemId, storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet(resourceBlockId, computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110ResetRequestBody := &openapi.DriveV1110ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, computerSystemId, storageId, driveId, *driveV1110ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, computerSystemId, storageId, driveId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet(resourceBlockId, computerSystemId, storageId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch(resourceBlockId, computerSystemId, storageId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut(resourceBlockId, computerSystemId, storageId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet(resourceBlockId, computerSystemId, storageId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch(resourceBlockId, computerSystemId, storageId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut(resourceBlockId, computerSystemId, storageId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet(resourceBlockId, computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch(resourceBlockId, computerSystemId, storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut(resourceBlockId, computerSystemId, storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130ResetRequestBody := &openapi.PortV130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&portV130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, *portV130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerMemberId := params["storageControllerMemberId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet(resourceBlockId, computerSystemId, storageId, storageControllerMemberId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet(resourceBlockId, computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost(resourceBlockId, computerSystemId, storageId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(resourceBlockId, computerSystemId, storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(resourceBlockId, computerSystemId, storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete(resourceBlockId, computerSystemId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet(resourceBlockId, computerSystemId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(resourceBlockId, computerSystemId, virtualMediaId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132InsertMediaRequestBody := &openapi.VirtualMediaV132InsertMediaRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132InsertMediaRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(resourceBlockId, computerSystemId, virtualMediaId, *virtualMediaV132InsertMediaRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet(resourceBlockId, computerSystemId, virtualMediaId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132VirtualMedia := &openapi.VirtualMediaV132VirtualMedia{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132VirtualMedia); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch(resourceBlockId, computerSystemId, virtualMediaId, *virtualMediaV132VirtualMedia)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132VirtualMedia := &openapi.VirtualMediaV132VirtualMedia{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132VirtualMedia); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut(resourceBlockId, computerSystemId, virtualMediaId, *virtualMediaV132VirtualMedia)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceZonesGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceZonesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1CompositionServiceResourceZonesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceZonesPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceZonesPost(w http.ResponseWriter, r *http.Request) {
	zoneV150Zone := &openapi.ZoneV150Zone{}
	if err := json.NewDecoder(r.Body).Decode(&zoneV150Zone); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceZonesPost(*zoneV150Zone)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceZonesZoneIdActionsZoneAddEndpointPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceZonesZoneIdActionsZoneAddEndpointPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneId := params["zoneId"]
	zoneV150AddEndpointRequestBody := &openapi.ZoneV150AddEndpointRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&zoneV150AddEndpointRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceZonesZoneIdActionsZoneAddEndpointPost(zoneId, *zoneV150AddEndpointRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceZonesZoneIdActionsZoneRemoveEndpointPost -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceZonesZoneIdActionsZoneRemoveEndpointPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneId := params["zoneId"]
	zoneV150RemoveEndpointRequestBody := &openapi.ZoneV150RemoveEndpointRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&zoneV150RemoveEndpointRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceZonesZoneIdActionsZoneRemoveEndpointPost(zoneId, *zoneV150RemoveEndpointRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceZonesZoneIdDelete -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceZonesZoneIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneId := params["zoneId"]
	result, err := c.service.RedfishV1CompositionServiceResourceZonesZoneIdDelete(zoneId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceZonesZoneIdGet -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceZonesZoneIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneId := params["zoneId"]
	result, err := c.service.RedfishV1CompositionServiceResourceZonesZoneIdGet(zoneId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceZonesZoneIdPatch -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceZonesZoneIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneId := params["zoneId"]
	zoneV150Zone := &openapi.ZoneV150Zone{}
	if err := json.NewDecoder(r.Body).Decode(&zoneV150Zone); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceZonesZoneIdPatch(zoneId, *zoneV150Zone)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1CompositionServiceResourceZonesZoneIdPut -
func (c *DefaultApiController) RedfishV1CompositionServiceResourceZonesZoneIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneId := params["zoneId"]
	zoneV150Zone := &openapi.ZoneV150Zone{}
	if err := json.NewDecoder(r.Body).Decode(&zoneV150Zone); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1CompositionServiceResourceZonesZoneIdPut(zoneId, *zoneV150Zone)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceActionsEventServiceSubmitTestEventPost -
func (c *DefaultApiController) RedfishV1EventServiceActionsEventServiceSubmitTestEventPost(w http.ResponseWriter, r *http.Request) {
	eventServiceV170SubmitTestEventRequestBody := &openapi.EventServiceV170SubmitTestEventRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&eventServiceV170SubmitTestEventRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1EventServiceActionsEventServiceSubmitTestEventPost(*eventServiceV170SubmitTestEventRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceGet -
func (c *DefaultApiController) RedfishV1EventServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1EventServiceGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServicePatch -
func (c *DefaultApiController) RedfishV1EventServicePatch(w http.ResponseWriter, r *http.Request) {
	eventServiceV170EventService := &openapi.EventServiceV170EventService{}
	if err := json.NewDecoder(r.Body).Decode(&eventServiceV170EventService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1EventServicePatch(*eventServiceV170EventService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServicePut -
func (c *DefaultApiController) RedfishV1EventServicePut(w http.ResponseWriter, r *http.Request) {
	eventServiceV170EventService := &openapi.EventServiceV170EventService{}
	if err := json.NewDecoder(r.Body).Decode(&eventServiceV170EventService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1EventServicePut(*eventServiceV170EventService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsEventDestinationIdActionsEventDestinationResumeSubscriptionPost -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsEventDestinationIdActionsEventDestinationResumeSubscriptionPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	eventDestinationId := params["eventDestinationId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1EventServiceSubscriptionsEventDestinationIdActionsEventDestinationResumeSubscriptionPost(eventDestinationId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	eventDestinationId := params["eventDestinationId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRekeyPost(eventDestinationId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	eventDestinationId := params["eventDestinationId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRenewPost(eventDestinationId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	eventDestinationId := params["eventDestinationId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdDelete(eventDestinationId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	eventDestinationId := params["eventDestinationId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdGet(eventDestinationId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesGet -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	eventDestinationId := params["eventDestinationId"]
	result, err := c.service.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesGet(eventDestinationId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesPost -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	eventDestinationId := params["eventDestinationId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1EventServiceSubscriptionsEventDestinationIdCertificatesPost(eventDestinationId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsEventDestinationIdDelete -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsEventDestinationIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	eventDestinationId := params["eventDestinationId"]
	result, err := c.service.RedfishV1EventServiceSubscriptionsEventDestinationIdDelete(eventDestinationId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsEventDestinationIdGet -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsEventDestinationIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	eventDestinationId := params["eventDestinationId"]
	result, err := c.service.RedfishV1EventServiceSubscriptionsEventDestinationIdGet(eventDestinationId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsEventDestinationIdPatch -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsEventDestinationIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	eventDestinationId := params["eventDestinationId"]
	eventDestinationV190EventDestination := &openapi.EventDestinationV190EventDestination{}
	if err := json.NewDecoder(r.Body).Decode(&eventDestinationV190EventDestination); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1EventServiceSubscriptionsEventDestinationIdPatch(eventDestinationId, *eventDestinationV190EventDestination)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsEventDestinationIdPut -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsEventDestinationIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	eventDestinationId := params["eventDestinationId"]
	eventDestinationV190EventDestination := &openapi.EventDestinationV190EventDestination{}
	if err := json.NewDecoder(r.Body).Decode(&eventDestinationV190EventDestination); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1EventServiceSubscriptionsEventDestinationIdPut(eventDestinationId, *eventDestinationV190EventDestination)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsGet -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1EventServiceSubscriptionsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1EventServiceSubscriptionsPost -
func (c *DefaultApiController) RedfishV1EventServiceSubscriptionsPost(w http.ResponseWriter, r *http.Request) {
	eventDestinationV190EventDestination := &openapi.EventDestinationV190EventDestination{}
	if err := json.NewDecoder(r.Body).Decode(&eventDestinationV190EventDestination); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1EventServiceSubscriptionsPost(*eventDestinationV190EventDestination)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdDelete -
func (c *DefaultApiController) RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	addressPoolId := params["addressPoolId"]
	result, err := c.service.RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdDelete(fabricId, addressPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	addressPoolId := params["addressPoolId"]
	result, err := c.service.RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdGet(fabricId, addressPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	addressPoolId := params["addressPoolId"]
	addressPoolV110AddressPool := &openapi.AddressPoolV110AddressPool{}
	if err := json.NewDecoder(r.Body).Decode(&addressPoolV110AddressPool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdPatch(fabricId, addressPoolId, *addressPoolV110AddressPool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	addressPoolId := params["addressPoolId"]
	addressPoolV110AddressPool := &openapi.AddressPoolV110AddressPool{}
	if err := json.NewDecoder(r.Body).Decode(&addressPoolV110AddressPool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdAddressPoolsAddressPoolIdPut(fabricId, addressPoolId, *addressPoolV110AddressPool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdAddressPoolsGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdAddressPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	result, err := c.service.RedfishV1FabricsFabricIdAddressPoolsGet(fabricId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdAddressPoolsPost -
func (c *DefaultApiController) RedfishV1FabricsFabricIdAddressPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	addressPoolV110AddressPool := &openapi.AddressPoolV110AddressPool{}
	if err := json.NewDecoder(r.Body).Decode(&addressPoolV110AddressPool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdAddressPoolsPost(fabricId, *addressPoolV110AddressPool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdConnectionsConnectionIdDelete -
func (c *DefaultApiController) RedfishV1FabricsFabricIdConnectionsConnectionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	connectionId := params["connectionId"]
	result, err := c.service.RedfishV1FabricsFabricIdConnectionsConnectionIdDelete(fabricId, connectionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdConnectionsConnectionIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdConnectionsConnectionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	connectionId := params["connectionId"]
	result, err := c.service.RedfishV1FabricsFabricIdConnectionsConnectionIdGet(fabricId, connectionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdConnectionsConnectionIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdConnectionsConnectionIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	connectionId := params["connectionId"]
	connectionV100Connection := &openapi.ConnectionV100Connection{}
	if err := json.NewDecoder(r.Body).Decode(&connectionV100Connection); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdConnectionsConnectionIdPatch(fabricId, connectionId, *connectionV100Connection)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdConnectionsConnectionIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdConnectionsConnectionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	connectionId := params["connectionId"]
	connectionV100Connection := &openapi.ConnectionV100Connection{}
	if err := json.NewDecoder(r.Body).Decode(&connectionV100Connection); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdConnectionsConnectionIdPut(fabricId, connectionId, *connectionV100Connection)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdConnectionsGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdConnectionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	result, err := c.service.RedfishV1FabricsFabricIdConnectionsGet(fabricId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdConnectionsPost -
func (c *DefaultApiController) RedfishV1FabricsFabricIdConnectionsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	connectionV100Connection := &openapi.ConnectionV100Connection{}
	if err := json.NewDecoder(r.Body).Decode(&connectionV100Connection); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdConnectionsPost(fabricId, *connectionV100Connection)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdDelete -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	endpointGroupId := params["endpointGroupId"]
	result, err := c.service.RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdDelete(fabricId, endpointGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	endpointGroupId := params["endpointGroupId"]
	result, err := c.service.RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdGet(fabricId, endpointGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	endpointGroupId := params["endpointGroupId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPatch(fabricId, endpointGroupId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	endpointGroupId := params["endpointGroupId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPut(fabricId, endpointGroupId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointGroupsGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	result, err := c.service.RedfishV1FabricsFabricIdEndpointGroupsGet(fabricId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointGroupsPost -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointGroupsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdEndpointGroupsPost(fabricId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointsEndpointIdDelete -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointsEndpointIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	endpointId := params["endpointId"]
	result, err := c.service.RedfishV1FabricsFabricIdEndpointsEndpointIdDelete(fabricId, endpointId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointsEndpointIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointsEndpointIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	endpointId := params["endpointId"]
	result, err := c.service.RedfishV1FabricsFabricIdEndpointsEndpointIdGet(fabricId, endpointId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointsEndpointIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointsEndpointIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	endpointId := params["endpointId"]
	endpointV150Endpoint := &openapi.EndpointV150Endpoint{}
	if err := json.NewDecoder(r.Body).Decode(&endpointV150Endpoint); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdEndpointsEndpointIdPatch(fabricId, endpointId, *endpointV150Endpoint)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointsEndpointIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointsEndpointIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	endpointId := params["endpointId"]
	endpointV150Endpoint := &openapi.EndpointV150Endpoint{}
	if err := json.NewDecoder(r.Body).Decode(&endpointV150Endpoint); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdEndpointsEndpointIdPut(fabricId, endpointId, *endpointV150Endpoint)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointsGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	result, err := c.service.RedfishV1FabricsFabricIdEndpointsGet(fabricId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdEndpointsPost -
func (c *DefaultApiController) RedfishV1FabricsFabricIdEndpointsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	endpointV150Endpoint := &openapi.EndpointV150Endpoint{}
	if err := json.NewDecoder(r.Body).Decode(&endpointV150Endpoint); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdEndpointsPost(fabricId, *endpointV150Endpoint)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	result, err := c.service.RedfishV1FabricsFabricIdGet(fabricId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesGet(fabricId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdActionsSwitchResetPost -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdActionsSwitchResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	switchV140ResetRequestBody := &openapi.SwitchV140ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&switchV140ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdActionsSwitchResetPost(fabricId, switchId, *switchV140ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdGet(fabricId, switchId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	switchV140Switch := &openapi.SwitchV140Switch{}
	if err := json.NewDecoder(r.Body).Decode(&switchV140Switch); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPatch(fabricId, switchId, *switchV140Switch)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsGet(fabricId, switchId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdActionsPortResetPost -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdActionsPortResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	portV130ResetRequestBody := &openapi.PortV130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&portV130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdActionsPortResetPost(fabricId, switchId, portId, *portV130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGet(fabricId, switchId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdDelete -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdDelete(fabricId, switchId, portId, lPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdGet(fabricId, switchId, portId, lPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPatch(fabricId, switchId, portId, lPRTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPut(fabricId, switchId, portId, lPRTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete(fabricId, switchId, portId, lPRTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet(fabricId, switchId, portId, lPRTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch(fabricId, switchId, portId, lPRTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut(fabricId, switchId, portId, lPRTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdDelete -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdDelete(fabricId, switchId, portId, mPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdGet(fabricId, switchId, portId, mPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPatch(fabricId, switchId, portId, mPRTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPut(fabricId, switchId, portId, mPRTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete(fabricId, switchId, portId, mPRTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet(fabricId, switchId, portId, mPRTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch(fabricId, switchId, portId, mPRTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut(fabricId, switchId, portId, mPRTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMetricsGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMetricsGet(fabricId, switchId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPatch(fabricId, switchId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPut(fabricId, switchId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATGet(fabricId, switchId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATPost -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATPost(fabricId, switchId, portId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdDelete -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	vCATEntryId := params["vCATEntryId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdDelete(fabricId, switchId, portId, vCATEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	vCATEntryId := params["vCATEntryId"]
	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdGet(fabricId, switchId, portId, vCATEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	vCATEntryId := params["vCATEntryId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPatch(fabricId, switchId, portId, vCATEntryId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	vCATEntryId := params["vCATEntryId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPut(fabricId, switchId, portId, vCATEntryId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdSwitchesSwitchIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdSwitchesSwitchIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	switchId := params["switchId"]
	switchV140Switch := &openapi.SwitchV140Switch{}
	if err := json.NewDecoder(r.Body).Decode(&switchV140Switch); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdSwitchesSwitchIdPut(fabricId, switchId, *switchV140Switch)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdZonesGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdZonesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	result, err := c.service.RedfishV1FabricsFabricIdZonesGet(fabricId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdZonesPost -
func (c *DefaultApiController) RedfishV1FabricsFabricIdZonesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	zoneV150Zone := &openapi.ZoneV150Zone{}
	if err := json.NewDecoder(r.Body).Decode(&zoneV150Zone); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdZonesPost(fabricId, *zoneV150Zone)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdZonesZoneIdActionsZoneAddEndpointPost -
func (c *DefaultApiController) RedfishV1FabricsFabricIdZonesZoneIdActionsZoneAddEndpointPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	zoneId := params["zoneId"]
	zoneV150AddEndpointRequestBody := &openapi.ZoneV150AddEndpointRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&zoneV150AddEndpointRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdZonesZoneIdActionsZoneAddEndpointPost(fabricId, zoneId, *zoneV150AddEndpointRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdZonesZoneIdActionsZoneRemoveEndpointPost -
func (c *DefaultApiController) RedfishV1FabricsFabricIdZonesZoneIdActionsZoneRemoveEndpointPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	zoneId := params["zoneId"]
	zoneV150RemoveEndpointRequestBody := &openapi.ZoneV150RemoveEndpointRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&zoneV150RemoveEndpointRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdZonesZoneIdActionsZoneRemoveEndpointPost(fabricId, zoneId, *zoneV150RemoveEndpointRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdZonesZoneIdDelete -
func (c *DefaultApiController) RedfishV1FabricsFabricIdZonesZoneIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	zoneId := params["zoneId"]
	result, err := c.service.RedfishV1FabricsFabricIdZonesZoneIdDelete(fabricId, zoneId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdZonesZoneIdGet -
func (c *DefaultApiController) RedfishV1FabricsFabricIdZonesZoneIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	zoneId := params["zoneId"]
	result, err := c.service.RedfishV1FabricsFabricIdZonesZoneIdGet(fabricId, zoneId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdZonesZoneIdPatch -
func (c *DefaultApiController) RedfishV1FabricsFabricIdZonesZoneIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	zoneId := params["zoneId"]
	zoneV150Zone := &openapi.ZoneV150Zone{}
	if err := json.NewDecoder(r.Body).Decode(&zoneV150Zone); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdZonesZoneIdPatch(fabricId, zoneId, *zoneV150Zone)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFabricIdZonesZoneIdPut -
func (c *DefaultApiController) RedfishV1FabricsFabricIdZonesZoneIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fabricId := params["fabricId"]
	zoneId := params["zoneId"]
	zoneV150Zone := &openapi.ZoneV150Zone{}
	if err := json.NewDecoder(r.Body).Decode(&zoneV150Zone); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFabricIdZonesZoneIdPut(fabricId, zoneId, *zoneV150Zone)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTGet -
func (c *DefaultApiController) RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	frabricId := params["frabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTGet(frabricId, switchId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetGet -
func (c *DefaultApiController) RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	frabricId := params["frabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	result, err := c.service.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetGet(frabricId, switchId, portId, lPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetPost -
func (c *DefaultApiController) RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	frabricId := params["frabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetPost(frabricId, switchId, portId, lPRTId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTPost -
func (c *DefaultApiController) RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	frabricId := params["frabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdLPRTPost(frabricId, switchId, portId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTGet -
func (c *DefaultApiController) RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	frabricId := params["frabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTGet(frabricId, switchId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetGet -
func (c *DefaultApiController) RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	frabricId := params["frabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	result, err := c.service.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetGet(frabricId, switchId, portId, mPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetPost -
func (c *DefaultApiController) RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	frabricId := params["frabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetPost(frabricId, switchId, portId, mPRTId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTPost -
func (c *DefaultApiController) RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	frabricId := params["frabricId"]
	switchId := params["switchId"]
	portId := params["portId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FabricsFrabricIdSwitchesSwitchIdPortsPortIdMPRTPost(frabricId, switchId, portId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FabricsGet -
func (c *DefaultApiController) RedfishV1FabricsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1FabricsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesFacilityIdDelete -
func (c *DefaultApiController) RedfishV1FacilitiesFacilityIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	facilityId := params["facilityId"]
	result, err := c.service.RedfishV1FacilitiesFacilityIdDelete(facilityId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesFacilityIdGet -
func (c *DefaultApiController) RedfishV1FacilitiesFacilityIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	facilityId := params["facilityId"]
	result, err := c.service.RedfishV1FacilitiesFacilityIdGet(facilityId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesFacilityIdPatch -
func (c *DefaultApiController) RedfishV1FacilitiesFacilityIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	facilityId := params["facilityId"]
	facilityV101Facility := &openapi.FacilityV101Facility{}
	if err := json.NewDecoder(r.Body).Decode(&facilityV101Facility); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FacilitiesFacilityIdPatch(facilityId, *facilityV101Facility)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesFacilityIdPowerDomainsGet -
func (c *DefaultApiController) RedfishV1FacilitiesFacilityIdPowerDomainsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	facilityId := params["facilityId"]
	result, err := c.service.RedfishV1FacilitiesFacilityIdPowerDomainsGet(facilityId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesFacilityIdPowerDomainsPost -
func (c *DefaultApiController) RedfishV1FacilitiesFacilityIdPowerDomainsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	facilityId := params["facilityId"]
	powerDomainV101PowerDomain := &openapi.PowerDomainV101PowerDomain{}
	if err := json.NewDecoder(r.Body).Decode(&powerDomainV101PowerDomain); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FacilitiesFacilityIdPowerDomainsPost(facilityId, *powerDomainV101PowerDomain)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdDelete -
func (c *DefaultApiController) RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	facilityId := params["facilityId"]
	powerDomainId := params["powerDomainId"]
	result, err := c.service.RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdDelete(facilityId, powerDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdGet -
func (c *DefaultApiController) RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	facilityId := params["facilityId"]
	powerDomainId := params["powerDomainId"]
	result, err := c.service.RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdGet(facilityId, powerDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPatch -
func (c *DefaultApiController) RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	facilityId := params["facilityId"]
	powerDomainId := params["powerDomainId"]
	powerDomainV101PowerDomain := &openapi.PowerDomainV101PowerDomain{}
	if err := json.NewDecoder(r.Body).Decode(&powerDomainV101PowerDomain); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPatch(facilityId, powerDomainId, *powerDomainV101PowerDomain)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPut -
func (c *DefaultApiController) RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	facilityId := params["facilityId"]
	powerDomainId := params["powerDomainId"]
	powerDomainV101PowerDomain := &openapi.PowerDomainV101PowerDomain{}
	if err := json.NewDecoder(r.Body).Decode(&powerDomainV101PowerDomain); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPut(facilityId, powerDomainId, *powerDomainV101PowerDomain)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesFacilityIdPut -
func (c *DefaultApiController) RedfishV1FacilitiesFacilityIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	facilityId := params["facilityId"]
	facilityV101Facility := &openapi.FacilityV101Facility{}
	if err := json.NewDecoder(r.Body).Decode(&facilityV101Facility); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FacilitiesFacilityIdPut(facilityId, *facilityV101Facility)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesFacilityIdSensorsGet -
func (c *DefaultApiController) RedfishV1FacilitiesFacilityIdSensorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	facilityId := params["facilityId"]
	result, err := c.service.RedfishV1FacilitiesFacilityIdSensorsGet(facilityId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesGet -
func (c *DefaultApiController) RedfishV1FacilitiesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1FacilitiesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1FacilitiesPost -
func (c *DefaultApiController) RedfishV1FacilitiesPost(w http.ResponseWriter, r *http.Request) {
	facilityV101Facility := &openapi.FacilityV101Facility{}
	if err := json.NewDecoder(r.Body).Decode(&facilityV101Facility); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1FacilitiesPost(*facilityV101Facility)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1Get -
func (c *DefaultApiController) RedfishV1Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1Get()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceGet -
func (c *DefaultApiController) RedfishV1JobServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1JobServiceGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsGet -
func (c *DefaultApiController) RedfishV1JobServiceJobsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1JobServiceJobsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsJobIdDelete -
func (c *DefaultApiController) RedfishV1JobServiceJobsJobIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]
	result, err := c.service.RedfishV1JobServiceJobsJobIdDelete(jobId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsJobIdGet -
func (c *DefaultApiController) RedfishV1JobServiceJobsJobIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]
	result, err := c.service.RedfishV1JobServiceJobsJobIdGet(jobId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsJobIdPatch -
func (c *DefaultApiController) RedfishV1JobServiceJobsJobIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]
	jobV105Job := &openapi.JobV105Job{}
	if err := json.NewDecoder(r.Body).Decode(&jobV105Job); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServiceJobsJobIdPatch(jobId, *jobV105Job)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsJobIdPut -
func (c *DefaultApiController) RedfishV1JobServiceJobsJobIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]
	jobV105Job := &openapi.JobV105Job{}
	if err := json.NewDecoder(r.Body).Decode(&jobV105Job); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServiceJobsJobIdPut(jobId, *jobV105Job)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsJobIdStepsGet -
func (c *DefaultApiController) RedfishV1JobServiceJobsJobIdStepsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]
	result, err := c.service.RedfishV1JobServiceJobsJobIdStepsGet(jobId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsJobIdStepsJobId2Delete -
func (c *DefaultApiController) RedfishV1JobServiceJobsJobIdStepsJobId2Delete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]
	jobId2 := params["jobId2"]
	result, err := c.service.RedfishV1JobServiceJobsJobIdStepsJobId2Delete(jobId, jobId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsJobIdStepsJobId2Get -
func (c *DefaultApiController) RedfishV1JobServiceJobsJobIdStepsJobId2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]
	jobId2 := params["jobId2"]
	result, err := c.service.RedfishV1JobServiceJobsJobIdStepsJobId2Get(jobId, jobId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsJobIdStepsJobId2Patch -
func (c *DefaultApiController) RedfishV1JobServiceJobsJobIdStepsJobId2Patch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]
	jobId2 := params["jobId2"]
	jobV105Job := &openapi.JobV105Job{}
	if err := json.NewDecoder(r.Body).Decode(&jobV105Job); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServiceJobsJobIdStepsJobId2Patch(jobId, jobId2, *jobV105Job)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsJobIdStepsJobId2Put -
func (c *DefaultApiController) RedfishV1JobServiceJobsJobIdStepsJobId2Put(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]
	jobId2 := params["jobId2"]
	jobV105Job := &openapi.JobV105Job{}
	if err := json.NewDecoder(r.Body).Decode(&jobV105Job); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServiceJobsJobIdStepsJobId2Put(jobId, jobId2, *jobV105Job)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsJobIdStepsPost -
func (c *DefaultApiController) RedfishV1JobServiceJobsJobIdStepsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]
	jobV105Job := &openapi.JobV105Job{}
	if err := json.NewDecoder(r.Body).Decode(&jobV105Job); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServiceJobsJobIdStepsPost(jobId, *jobV105Job)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceJobsPost -
func (c *DefaultApiController) RedfishV1JobServiceJobsPost(w http.ResponseWriter, r *http.Request) {
	jobV105Job := &openapi.JobV105Job{}
	if err := json.NewDecoder(r.Body).Decode(&jobV105Job); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServiceJobsPost(*jobV105Job)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceLogActionsLogServiceClearLogPost -
func (c *DefaultApiController) RedfishV1JobServiceLogActionsLogServiceClearLogPost(w http.ResponseWriter, r *http.Request) {
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServiceLogActionsLogServiceClearLogPost(*body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceLogActionsLogServiceCollectDiagnosticDataPost -
func (c *DefaultApiController) RedfishV1JobServiceLogActionsLogServiceCollectDiagnosticDataPost(w http.ResponseWriter, r *http.Request) {
	logServiceV120CollectDiagnosticDataRequestBody := &openapi.LogServiceV120CollectDiagnosticDataRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120CollectDiagnosticDataRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServiceLogActionsLogServiceCollectDiagnosticDataPost(*logServiceV120CollectDiagnosticDataRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceLogEntriesGet -
func (c *DefaultApiController) RedfishV1JobServiceLogEntriesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1JobServiceLogEntriesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceLogEntriesLogEntryIdDelete -
func (c *DefaultApiController) RedfishV1JobServiceLogEntriesLogEntryIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1JobServiceLogEntriesLogEntryIdDelete(logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceLogEntriesLogEntryIdGet -
func (c *DefaultApiController) RedfishV1JobServiceLogEntriesLogEntryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1JobServiceLogEntriesLogEntryIdGet(logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceLogEntriesPost -
func (c *DefaultApiController) RedfishV1JobServiceLogEntriesPost(w http.ResponseWriter, r *http.Request) {
	logEntryV170LogEntry := &openapi.LogEntryV170LogEntry{}
	if err := json.NewDecoder(r.Body).Decode(&logEntryV170LogEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServiceLogEntriesPost(*logEntryV170LogEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceLogGet -
func (c *DefaultApiController) RedfishV1JobServiceLogGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1JobServiceLogGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceLogPatch -
func (c *DefaultApiController) RedfishV1JobServiceLogPatch(w http.ResponseWriter, r *http.Request) {
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServiceLogPatch(*logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServiceLogPut -
func (c *DefaultApiController) RedfishV1JobServiceLogPut(w http.ResponseWriter, r *http.Request) {
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServiceLogPut(*logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServicePatch -
func (c *DefaultApiController) RedfishV1JobServicePatch(w http.ResponseWriter, r *http.Request) {
	jobServiceV103JobService := &openapi.JobServiceV103JobService{}
	if err := json.NewDecoder(r.Body).Decode(&jobServiceV103JobService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServicePatch(*jobServiceV103JobService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JobServicePut -
func (c *DefaultApiController) RedfishV1JobServicePut(w http.ResponseWriter, r *http.Request) {
	jobServiceV103JobService := &openapi.JobServiceV103JobService{}
	if err := json.NewDecoder(r.Body).Decode(&jobServiceV103JobService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1JobServicePut(*jobServiceV103JobService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JsonSchemasGet -
func (c *DefaultApiController) RedfishV1JsonSchemasGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1JsonSchemasGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1JsonSchemasJsonSchemaFileIdGet -
func (c *DefaultApiController) RedfishV1JsonSchemasJsonSchemaFileIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jsonSchemaFileId := params["jsonSchemaFileId"]
	result, err := c.service.RedfishV1JsonSchemasJsonSchemaFileIdGet(jsonSchemaFileId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersGet -
func (c *DefaultApiController) RedfishV1ManagersGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1ManagersGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdActionsManagerForceFailoverPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdActionsManagerForceFailoverPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerV1100ForceFailoverRequestBody := &openapi.ManagerV1100ForceFailoverRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&managerV1100ForceFailoverRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdActionsManagerForceFailoverPost(managerId, *managerV1100ForceFailoverRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdActionsManagerModifyRedundancySetPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdActionsManagerModifyRedundancySetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerV1100ModifyRedundancySetRequestBody := &openapi.ManagerV1100ModifyRedundancySetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&managerV1100ModifyRedundancySetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdActionsManagerModifyRedundancySetPost(managerId, *managerV1100ModifyRedundancySetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdActionsManagerResetPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdActionsManagerResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerV1100ResetRequestBody := &openapi.ManagerV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&managerV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdActionsManagerResetPost(managerId, *managerV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdActionsManagerResetToDefaultsPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdActionsManagerResetToDefaultsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerV1100ResetToDefaultsRequestBody := &openapi.ManagerV1100ResetToDefaultsRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&managerV1100ResetToDefaultsRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdActionsManagerResetToDefaultsPost(managerId, *managerV1100ResetToDefaultsRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdGet(managerId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPatch(managerId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPut(managerId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsGet(managerId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsPost(managerId, ethernetInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete -
func (c *DefaultApiController) RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(managerId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(managerId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(managerId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(managerId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdEthernetInterfacesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdEthernetInterfacesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdEthernetInterfacesGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdHostInterfacesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdHostInterfacesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdHostInterfacesGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	hostInterfaceId := params["hostInterfaceId"]
	result, err := c.service.RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdGet(managerId, hostInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdHostEthernetInterfacesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdHostEthernetInterfacesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	hostInterfaceId := params["hostInterfaceId"]
	result, err := c.service.RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdHostEthernetInterfacesGet(managerId, hostInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	hostInterfaceId := params["hostInterfaceId"]
	hostInterfaceV130HostInterface := &openapi.HostInterfaceV130HostInterface{}
	if err := json.NewDecoder(r.Body).Decode(&hostInterfaceV130HostInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPatch(managerId, hostInterfaceId, *hostInterfaceV130HostInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	hostInterfaceId := params["hostInterfaceId"]
	hostInterfaceV130HostInterface := &openapi.HostInterfaceV130HostInterface{}
	if err := json.NewDecoder(r.Body).Decode(&hostInterfaceV130HostInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPut(managerId, hostInterfaceId, *hostInterfaceV130HostInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdLogServicesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdLogServicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdLogServicesGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceClearLogPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceClearLogPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	logServiceId := params["logServiceId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceClearLogPost(managerId, logServiceId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	logServiceId := params["logServiceId"]
	logServiceV120CollectDiagnosticDataRequestBody := &openapi.LogServiceV120CollectDiagnosticDataRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120CollectDiagnosticDataRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(managerId, logServiceId, *logServiceV120CollectDiagnosticDataRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	logServiceId := params["logServiceId"]
	result, err := c.service.RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesGet(managerId, logServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdDelete -
func (c *DefaultApiController) RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	logServiceId := params["logServiceId"]
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdDelete(managerId, logServiceId, logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	logServiceId := params["logServiceId"]
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdGet(managerId, logServiceId, logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	logServiceId := params["logServiceId"]
	logEntryV170LogEntry := &openapi.LogEntryV170LogEntry{}
	if err := json.NewDecoder(r.Body).Decode(&logEntryV170LogEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdLogServicesLogServiceIdEntriesPost(managerId, logServiceId, *logEntryV170LogEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdLogServicesLogServiceIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdLogServicesLogServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	logServiceId := params["logServiceId"]
	result, err := c.service.RedfishV1ManagersManagerIdLogServicesLogServiceIdGet(managerId, logServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdLogServicesLogServiceIdPatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdLogServicesLogServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	logServiceId := params["logServiceId"]
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdLogServicesLogServiceIdPatch(managerId, logServiceId, *logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdLogServicesLogServiceIdPut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdLogServicesLogServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	logServiceId := params["logServiceId"]
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdLogServicesLogServiceIdPut(managerId, logServiceId, *logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdNetworkProtocolGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdNetworkProtocolGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdNetworkProtocolGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRekeyPost(managerId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRenewPost(managerId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdDelete(managerId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdGet(managerId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesPost(managerId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdNetworkProtocolPatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdNetworkProtocolPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerNetworkProtocolV161ManagerNetworkProtocol := &openapi.ManagerNetworkProtocolV161ManagerNetworkProtocol{}
	if err := json.NewDecoder(r.Body).Decode(&managerNetworkProtocolV161ManagerNetworkProtocol); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdNetworkProtocolPatch(managerId, *managerNetworkProtocolV161ManagerNetworkProtocol)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdNetworkProtocolPut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdNetworkProtocolPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerNetworkProtocolV161ManagerNetworkProtocol := &openapi.ManagerNetworkProtocolV161ManagerNetworkProtocol{}
	if err := json.NewDecoder(r.Body).Decode(&managerNetworkProtocolV161ManagerNetworkProtocol); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdNetworkProtocolPut(managerId, *managerNetworkProtocolV161ManagerNetworkProtocol)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdPatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerV1100Manager := &openapi.ManagerV1100Manager{}
	if err := json.NewDecoder(r.Body).Decode(&managerV1100Manager); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdPatch(managerId, *managerV1100Manager)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdPut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerV1100Manager := &openapi.ManagerV1100Manager{}
	if err := json.NewDecoder(r.Body).Decode(&managerV1100Manager); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdPut(managerId, *managerV1100Manager)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerAccountId := params["managerAccountId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost(managerId, managerAccountId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerAccountId := params["managerAccountId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost(managerId, managerAccountId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerAccountId := params["managerAccountId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete(managerId, managerAccountId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerAccountId := params["managerAccountId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet(managerId, managerAccountId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerAccountId := params["managerAccountId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesGet(managerId, managerAccountId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerAccountId := params["managerAccountId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesPost(managerId, managerAccountId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdDelete -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerAccountId := params["managerAccountId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdDelete(managerId, managerAccountId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerAccountId := params["managerAccountId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdGet(managerId, managerAccountId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerAccountId := params["managerAccountId"]
	managerAccountV162ManagerAccount := &openapi.ManagerAccountV162ManagerAccount{}
	if err := json.NewDecoder(r.Body).Decode(&managerAccountV162ManagerAccount); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPatch(managerId, managerAccountId, *managerAccountV162ManagerAccount)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerAccountId := params["managerAccountId"]
	managerAccountV162ManagerAccount := &openapi.ManagerAccountV162ManagerAccount{}
	if err := json.NewDecoder(r.Body).Decode(&managerAccountV162ManagerAccount); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPut(managerId, managerAccountId, *managerAccountV162ManagerAccount)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceAccountsPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceAccountsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	managerAccountV162ManagerAccount := &openapi.ManagerAccountV162ManagerAccount{}
	if err := json.NewDecoder(r.Body).Decode(&managerAccountV162ManagerAccount); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceAccountsPost(managerId, *managerAccountV162ManagerAccount)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost(managerId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost(managerId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdDelete(managerId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdGet(managerId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesPost(managerId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	externalAccountProviderId := params["externalAccountProviderId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost(managerId, externalAccountProviderId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	externalAccountProviderId := params["externalAccountProviderId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost(managerId, externalAccountProviderId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	externalAccountProviderId := params["externalAccountProviderId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete(managerId, externalAccountProviderId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	externalAccountProviderId := params["externalAccountProviderId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet(managerId, externalAccountProviderId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	externalAccountProviderId := params["externalAccountProviderId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet(managerId, externalAccountProviderId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	externalAccountProviderId := params["externalAccountProviderId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost(managerId, externalAccountProviderId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdDelete -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	externalAccountProviderId := params["externalAccountProviderId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdDelete(managerId, externalAccountProviderId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	externalAccountProviderId := params["externalAccountProviderId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdGet(managerId, externalAccountProviderId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	externalAccountProviderId := params["externalAccountProviderId"]
	externalAccountProviderV113ExternalAccountProvider := &openapi.ExternalAccountProviderV113ExternalAccountProvider{}
	if err := json.NewDecoder(r.Body).Decode(&externalAccountProviderV113ExternalAccountProvider); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPatch(managerId, externalAccountProviderId, *externalAccountProviderV113ExternalAccountProvider)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	externalAccountProviderId := params["externalAccountProviderId"]
	externalAccountProviderV113ExternalAccountProvider := &openapi.ExternalAccountProviderV113ExternalAccountProvider{}
	if err := json.NewDecoder(r.Body).Decode(&externalAccountProviderV113ExternalAccountProvider); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPut(managerId, externalAccountProviderId, *externalAccountProviderV113ExternalAccountProvider)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	externalAccountProviderV113ExternalAccountProvider := &openapi.ExternalAccountProviderV113ExternalAccountProvider{}
	if err := json.NewDecoder(r.Body).Decode(&externalAccountProviderV113ExternalAccountProvider); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersPost(managerId, *externalAccountProviderV113ExternalAccountProvider)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost(managerId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost(managerId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdDelete(managerId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdGet(managerId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesPost(managerId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServicePatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServicePatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	accountServiceV172AccountService := &openapi.AccountServiceV172AccountService{}
	if err := json.NewDecoder(r.Body).Decode(&accountServiceV172AccountService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServicePatch(managerId, *accountServiceV172AccountService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServicePut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServicePut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	accountServiceV172AccountService := &openapi.AccountServiceV172AccountService{}
	if err := json.NewDecoder(r.Body).Decode(&accountServiceV172AccountService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServicePut(managerId, *accountServiceV172AccountService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceRolesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceRolesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceRolesGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	roleId := params["roleId"]
	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdGet(managerId, roleId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	roleId := params["roleId"]
	roleV125Role := &openapi.RoleV125Role{}
	if err := json.NewDecoder(r.Body).Decode(&roleV125Role); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPatch(managerId, roleId, *roleV125Role)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	roleId := params["roleId"]
	roleV125Role := &openapi.RoleV125Role{}
	if err := json.NewDecoder(r.Body).Decode(&roleV125Role); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPut(managerId, roleId, *roleV125Role)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdSerialInterfacesGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdSerialInterfacesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdSerialInterfacesGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	serialInterfaceId := params["serialInterfaceId"]
	result, err := c.service.RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdGet(managerId, serialInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	serialInterfaceId := params["serialInterfaceId"]
	serialInterfaceV117SerialInterface := &openapi.SerialInterfaceV117SerialInterface{}
	if err := json.NewDecoder(r.Body).Decode(&serialInterfaceV117SerialInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPatch(managerId, serialInterfaceId, *serialInterfaceV117SerialInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	serialInterfaceId := params["serialInterfaceId"]
	serialInterfaceV117SerialInterface := &openapi.SerialInterfaceV117SerialInterface{}
	if err := json.NewDecoder(r.Body).Decode(&serialInterfaceV117SerialInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPut(managerId, serialInterfaceId, *serialInterfaceV117SerialInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdVirtualMediaGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdVirtualMediaGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaGet(managerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	virtualMediaId := params["virtualMediaId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(managerId, virtualMediaId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost -
func (c *DefaultApiController) RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132InsertMediaRequestBody := &openapi.VirtualMediaV132InsertMediaRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132InsertMediaRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(managerId, virtualMediaId, *virtualMediaV132InsertMediaRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGet -
func (c *DefaultApiController) RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	virtualMediaId := params["virtualMediaId"]
	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGet(managerId, virtualMediaId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatch -
func (c *DefaultApiController) RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132VirtualMedia := &openapi.VirtualMediaV132VirtualMedia{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132VirtualMedia); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatch(managerId, virtualMediaId, *virtualMediaV132VirtualMedia)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPut -
func (c *DefaultApiController) RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerId := params["managerId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132VirtualMedia := &openapi.VirtualMediaV132VirtualMedia{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132VirtualMedia); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPut(managerId, virtualMediaId, *virtualMediaV132VirtualMedia)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1NVMeDomainsDomainIdDelete -
func (c *DefaultApiController) RedfishV1NVMeDomainsDomainIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	domainId := params["domainId"]
	result, err := c.service.RedfishV1NVMeDomainsDomainIdDelete(domainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1NVMeDomainsDomainIdGet -
func (c *DefaultApiController) RedfishV1NVMeDomainsDomainIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	domainId := params["domainId"]
	result, err := c.service.RedfishV1NVMeDomainsDomainIdGet(domainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1NVMeDomainsDomainIdPatch -
func (c *DefaultApiController) RedfishV1NVMeDomainsDomainIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	domainId := params["domainId"]
	nvMeDomainV100NvMeDomain := &openapi.NvMeDomainV100NvMeDomain{}
	if err := json.NewDecoder(r.Body).Decode(&nvMeDomainV100NvMeDomain); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1NVMeDomainsDomainIdPatch(domainId, *nvMeDomainV100NvMeDomain)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1NVMeDomainsDomainIdPut -
func (c *DefaultApiController) RedfishV1NVMeDomainsDomainIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	domainId := params["domainId"]
	nvMeDomainV100NvMeDomain := &openapi.NvMeDomainV100NvMeDomain{}
	if err := json.NewDecoder(r.Body).Decode(&nvMeDomainV100NvMeDomain); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1NVMeDomainsDomainIdPut(domainId, *nvMeDomainV100NvMeDomain)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1NVMeDomainsGet -
func (c *DefaultApiController) RedfishV1NVMeDomainsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1NVMeDomainsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1NVMeDomainsNVMeDomainIdDelete -
func (c *DefaultApiController) RedfishV1NVMeDomainsNVMeDomainIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nVMeDomainId := params["nVMeDomainId"]
	result, err := c.service.RedfishV1NVMeDomainsNVMeDomainIdDelete(nVMeDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1NVMeDomainsNVMeDomainIdGet -
func (c *DefaultApiController) RedfishV1NVMeDomainsNVMeDomainIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nVMeDomainId := params["nVMeDomainId"]
	result, err := c.service.RedfishV1NVMeDomainsNVMeDomainIdGet(nVMeDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1NVMeDomainsPost -
func (c *DefaultApiController) RedfishV1NVMeDomainsPost(w http.ResponseWriter, r *http.Request) {
	nvMeDomainV100NvMeDomain := &openapi.NvMeDomainV100NvMeDomain{}
	if err := json.NewDecoder(r.Body).Decode(&nvMeDomainV100NvMeDomain); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1NVMeDomainsPost(*nvMeDomainV100NvMeDomain)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost(powerDistributionId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110BreakerControlRequestBody := &openapi.CircuitV110BreakerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110BreakerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, *circuitV110BreakerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110PowerControlRequestBody := &openapi.CircuitV110PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, *circuitV110PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdGet(powerDistributionId, circuitId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPatch(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPut(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110BreakerControlRequestBody := &openapi.CircuitV110BreakerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110BreakerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, *circuitV110BreakerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110PowerControlRequestBody := &openapi.CircuitV110PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, *circuitV110PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdGet(powerDistributionId, circuitId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPatch(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPut(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost(powerDistributionId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	outletV110PowerControlRequestBody := &openapi.OutletV110PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&outletV110PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost(powerDistributionId, outletId, *outletV110PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost(powerDistributionId, outletId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdGet(powerDistributionId, outletId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	outletV110Outlet := &openapi.OutletV110Outlet{}
	if err := json.NewDecoder(r.Body).Decode(&outletV110Outlet); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPatch(powerDistributionId, outletId, *outletV110Outlet)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	outletV110Outlet := &openapi.OutletV110Outlet{}
	if err := json.NewDecoder(r.Body).Decode(&outletV110Outlet); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPut(powerDistributionId, outletId, *outletV110Outlet)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	powerDistributionV101PowerDistribution := &openapi.PowerDistributionV101PowerDistribution{}
	if err := json.NewDecoder(r.Body).Decode(&powerDistributionV101PowerDistribution); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdPatch(powerDistributionId, *powerDistributionV101PowerDistribution)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	powerDistributionV101PowerDistribution := &openapi.PowerDistributionV101PowerDistribution{}
	if err := json.NewDecoder(r.Body).Decode(&powerDistributionV101PowerDistribution); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdPut(powerDistributionId, *powerDistributionV101PowerDistribution)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost(powerDistributionId, sensorId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdGet(powerDistributionId, sensorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	sensorV111Sensor := &openapi.SensorV111Sensor{}
	if err := json.NewDecoder(r.Body).Decode(&sensorV111Sensor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPatch(powerDistributionId, sensorId, *sensorV111Sensor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	sensorV111Sensor := &openapi.SensorV111Sensor{}
	if err := json.NewDecoder(r.Body).Decode(&sensorV111Sensor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPut(powerDistributionId, sensorId, *sensorV111Sensor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitBreakerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitBreakerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110BreakerControlRequestBody := &openapi.CircuitV110BreakerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110BreakerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, *circuitV110BreakerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110PowerControlRequestBody := &openapi.CircuitV110PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, *circuitV110PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdGet(powerDistributionId, circuitId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPatch(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPut(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1PowerEquipmentGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost(powerDistributionId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110BreakerControlRequestBody := &openapi.CircuitV110BreakerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110BreakerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, *circuitV110BreakerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110PowerControlRequestBody := &openapi.CircuitV110PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, *circuitV110PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdGet(powerDistributionId, circuitId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPatch(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPut(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110BreakerControlRequestBody := &openapi.CircuitV110BreakerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110BreakerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, *circuitV110BreakerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110PowerControlRequestBody := &openapi.CircuitV110PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, *circuitV110PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdGet(powerDistributionId, circuitId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPatch(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPut(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost(powerDistributionId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	outletGroupV101PowerControlRequestBody := &openapi.OutletGroupV101PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&outletGroupV101PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost(powerDistributionId, outletGroupId, *outletGroupV101PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost(powerDistributionId, outletGroupId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdDelete -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdDelete(powerDistributionId, outletGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdGet(powerDistributionId, outletGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	outletGroupV101OutletGroup := &openapi.OutletGroupV101OutletGroup{}
	if err := json.NewDecoder(r.Body).Decode(&outletGroupV101OutletGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPatch(powerDistributionId, outletGroupId, *outletGroupV101OutletGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	outletGroupV101OutletGroup := &openapi.OutletGroupV101OutletGroup{}
	if err := json.NewDecoder(r.Body).Decode(&outletGroupV101OutletGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPut(powerDistributionId, outletGroupId, *outletGroupV101OutletGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupV101OutletGroup := &openapi.OutletGroupV101OutletGroup{}
	if err := json.NewDecoder(r.Body).Decode(&outletGroupV101OutletGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsPost(powerDistributionId, *outletGroupV101OutletGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	outletV110PowerControlRequestBody := &openapi.OutletV110PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&outletV110PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost(powerDistributionId, outletId, *outletV110PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost(powerDistributionId, outletId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdGet(powerDistributionId, outletId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	outletV110Outlet := &openapi.OutletV110Outlet{}
	if err := json.NewDecoder(r.Body).Decode(&outletV110Outlet); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPatch(powerDistributionId, outletId, *outletV110Outlet)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	outletV110Outlet := &openapi.OutletV110Outlet{}
	if err := json.NewDecoder(r.Body).Decode(&outletV110Outlet); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPut(powerDistributionId, outletId, *outletV110Outlet)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	powerDistributionV101PowerDistribution := &openapi.PowerDistributionV101PowerDistribution{}
	if err := json.NewDecoder(r.Body).Decode(&powerDistributionV101PowerDistribution); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdPatch(powerDistributionId, *powerDistributionV101PowerDistribution)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	powerDistributionV101PowerDistribution := &openapi.PowerDistributionV101PowerDistribution{}
	if err := json.NewDecoder(r.Body).Decode(&powerDistributionV101PowerDistribution); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdPut(powerDistributionId, *powerDistributionV101PowerDistribution)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost(powerDistributionId, sensorId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdGet(powerDistributionId, sensorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	sensorV111Sensor := &openapi.SensorV111Sensor{}
	if err := json.NewDecoder(r.Body).Decode(&sensorV111Sensor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPatch(powerDistributionId, sensorId, *sensorV111Sensor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	sensorV111Sensor := &openapi.SensorV111Sensor{}
	if err := json.NewDecoder(r.Body).Decode(&sensorV111Sensor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPut(powerDistributionId, sensorId, *sensorV111Sensor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentSensorsSensorIdActionsSensorResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentSensorsSensorIdActionsSensorResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sensorId := params["sensorId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentSensorsSensorIdActionsSensorResetMetricsPost(sensorId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentSensorsSensorIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentSensorsSensorIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sensorId := params["sensorId"]
	result, err := c.service.RedfishV1PowerEquipmentSensorsSensorIdGet(sensorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentSensorsSensorIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentSensorsSensorIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sensorId := params["sensorId"]
	sensorV111Sensor := &openapi.SensorV111Sensor{}
	if err := json.NewDecoder(r.Body).Decode(&sensorV111Sensor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentSensorsSensorIdPatch(sensorId, *sensorV111Sensor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentSensorsSensorIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentSensorsSensorIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sensorId := params["sensorId"]
	sensorV111Sensor := &openapi.SensorV111Sensor{}
	if err := json.NewDecoder(r.Body).Decode(&sensorV111Sensor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentSensorsSensorIdPut(sensorId, *sensorV111Sensor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentSwitchgearGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentSwitchgearGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1PowerEquipmentSwitchgearGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentSwitchgearPowerDistributionIdSensorsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentSwitchgearPowerDistributionIdSensorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentSwitchgearPowerDistributionIdSensorsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdActionsPowerDistributionTransferControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdActionsPowerDistributionTransferControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdActionsPowerDistributionTransferControlPost(powerDistributionId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110BreakerControlRequestBody := &openapi.CircuitV110BreakerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110BreakerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, *circuitV110BreakerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110PowerControlRequestBody := &openapi.CircuitV110PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, *circuitV110PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdGet(powerDistributionId, circuitId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPatch(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPut(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitBreakerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitBreakerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110BreakerControlRequestBody := &openapi.CircuitV110BreakerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110BreakerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, *circuitV110BreakerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110PowerControlRequestBody := &openapi.CircuitV110PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, *circuitV110PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdGet(powerDistributionId, circuitId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPatch(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPut(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110BreakerControlRequestBody := &openapi.CircuitV110BreakerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110BreakerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, *circuitV110BreakerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110PowerControlRequestBody := &openapi.CircuitV110PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, *circuitV110PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdGet(powerDistributionId, circuitId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPatch(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	circuitId := params["circuitId"]
	circuitV110Circuit := &openapi.CircuitV110Circuit{}
	if err := json.NewDecoder(r.Body).Decode(&circuitV110Circuit); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPut(powerDistributionId, circuitId, *circuitV110Circuit)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost(powerDistributionId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	outletGroupV101PowerControlRequestBody := &openapi.OutletGroupV101PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&outletGroupV101PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost(powerDistributionId, outletGroupId, *outletGroupV101PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost(powerDistributionId, outletGroupId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdDelete -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdDelete(powerDistributionId, outletGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdGet(powerDistributionId, outletGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	outletGroupV101OutletGroup := &openapi.OutletGroupV101OutletGroup{}
	if err := json.NewDecoder(r.Body).Decode(&outletGroupV101OutletGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPatch(powerDistributionId, outletGroupId, *outletGroupV101OutletGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupId := params["outletGroupId"]
	outletGroupV101OutletGroup := &openapi.OutletGroupV101OutletGroup{}
	if err := json.NewDecoder(r.Body).Decode(&outletGroupV101OutletGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPut(powerDistributionId, outletGroupId, *outletGroupV101OutletGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletGroupV101OutletGroup := &openapi.OutletGroupV101OutletGroup{}
	if err := json.NewDecoder(r.Body).Decode(&outletGroupV101OutletGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsPost(powerDistributionId, *outletGroupV101OutletGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	outletV110PowerControlRequestBody := &openapi.OutletV110PowerControlRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&outletV110PowerControlRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost(powerDistributionId, outletId, *outletV110PowerControlRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost(powerDistributionId, outletId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdGet(powerDistributionId, outletId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	outletV110Outlet := &openapi.OutletV110Outlet{}
	if err := json.NewDecoder(r.Body).Decode(&outletV110Outlet); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPatch(powerDistributionId, outletId, *outletV110Outlet)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	outletId := params["outletId"]
	outletV110Outlet := &openapi.OutletV110Outlet{}
	if err := json.NewDecoder(r.Body).Decode(&outletV110Outlet); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPut(powerDistributionId, outletId, *outletV110Outlet)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	powerDistributionV101PowerDistribution := &openapi.PowerDistributionV101PowerDistribution{}
	if err := json.NewDecoder(r.Body).Decode(&powerDistributionV101PowerDistribution); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPatch(powerDistributionId, *powerDistributionV101PowerDistribution)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	powerDistributionV101PowerDistribution := &openapi.PowerDistributionV101PowerDistribution{}
	if err := json.NewDecoder(r.Body).Decode(&powerDistributionV101PowerDistribution); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPut(powerDistributionId, *powerDistributionV101PowerDistribution)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsGet(powerDistributionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost(powerDistributionId, sensorId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdGet -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdGet(powerDistributionId, sensorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPatch -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	sensorV111Sensor := &openapi.SensorV111Sensor{}
	if err := json.NewDecoder(r.Body).Decode(&sensorV111Sensor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPatch(powerDistributionId, sensorId, *sensorV111Sensor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPut -
func (c *DefaultApiController) RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	powerDistributionId := params["powerDistributionId"]
	sensorId := params["sensorId"]
	sensorV111Sensor := &openapi.SensorV111Sensor{}
	if err := json.NewDecoder(r.Body).Decode(&sensorV111Sensor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPut(powerDistributionId, sensorId, *sensorV111Sensor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1RegistriesGet -
func (c *DefaultApiController) RedfishV1RegistriesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1RegistriesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1RegistriesMessageRegistryFileIdGet -
func (c *DefaultApiController) RedfishV1RegistriesMessageRegistryFileIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	messageRegistryFileId := params["messageRegistryFileId"]
	result, err := c.service.RedfishV1RegistriesMessageRegistryFileIdGet(messageRegistryFileId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1ResourceBlocksGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	driveV1110ResetRequestBody := &openapi.DriveV1110ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, driveId, *driveV1110ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, driveId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet(resourceBlockId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch(resourceBlockId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut(resourceBlockId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdGet(resourceBlockId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPatch(resourceBlockId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPut(resourceBlockId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet(resourceBlockId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch(resourceBlockId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut(resourceBlockId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet(resourceBlockId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost(resourceBlockId, ethernetInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(resourceBlockId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(resourceBlockId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(resourceBlockId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(resourceBlockId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdGet(resourceBlockId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100DisablePassphraseRequestBody := &openapi.MemoryV1100DisablePassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100DisablePassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(resourceBlockId, memoryId, *memoryV1100DisablePassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100OverwriteUnitRequestBody := &openapi.MemoryV1100OverwriteUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100OverwriteUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(resourceBlockId, memoryId, *memoryV1100OverwriteUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100ResetRequestBody := &openapi.MemoryV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost(resourceBlockId, memoryId, *memoryV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100SecureEraseUnitRequestBody := &openapi.MemoryV1100SecureEraseUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SecureEraseUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(resourceBlockId, memoryId, *memoryV1100SecureEraseUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100SetPassphraseRequestBody := &openapi.MemoryV1100SetPassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SetPassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost(resourceBlockId, memoryId, *memoryV1100SetPassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100UnlockUnitRequestBody := &openapi.MemoryV1100UnlockUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100UnlockUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost(resourceBlockId, memoryId, *memoryV1100UnlockUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet(resourceBlockId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch(resourceBlockId, memoryId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut(resourceBlockId, memoryId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdGet(resourceBlockId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, memoryId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet(resourceBlockId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPatch(resourceBlockId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPut(resourceBlockId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet(resourceBlockId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(resourceBlockId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(resourceBlockId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet(resourceBlockId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	resourceBlockV133ResourceBlock := &openapi.ResourceBlockV133ResourceBlock{}
	if err := json.NewDecoder(r.Body).Decode(&resourceBlockV133ResourceBlock); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdPatch(resourceBlockId, *resourceBlockV133ResourceBlock)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	accelerationFunctionId := params["accelerationFunctionId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(resourceBlockId, processorId, accelerationFunctionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet(resourceBlockId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorV1100ResetRequestBody := &openapi.ProcessorV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost(resourceBlockId, processorId, *processorV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet(resourceBlockId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch(resourceBlockId, processorId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut(resourceBlockId, processorId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdGet(resourceBlockId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPatch(resourceBlockId, processorId, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet(resourceBlockId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPut(resourceBlockId, processorId, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet(resourceBlockId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100ResetRequestBody := &openapi.ProcessorV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(resourceBlockId, processorId, processorId2, *processorV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(resourceBlockId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(resourceBlockId, processorId, processorId2, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(resourceBlockId, processorId, processorId2, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get(resourceBlockId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(resourceBlockId, processorId, processorId2, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(resourceBlockId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put(resourceBlockId, processorId, processorId2, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	resourceBlockV133ResourceBlock := &openapi.ResourceBlockV133ResourceBlock{}
	if err := json.NewDecoder(r.Body).Decode(&resourceBlockV133ResourceBlock); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdPut(resourceBlockId, *resourceBlockV133ResourceBlock)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	simpleStorageId := params["simpleStorageId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet(resourceBlockId, simpleStorageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageGet(resourceBlockId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageV190SetEncryptionKeyRequestBody := &openapi.StorageV190SetEncryptionKeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190SetEncryptionKeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost(resourceBlockId, storageId, *storageV190SetEncryptionKeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyGet(resourceBlockId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyPatch(resourceBlockId, storageId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdAssemblyPut(resourceBlockId, storageId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet(resourceBlockId, storageId, controllerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch(resourceBlockId, storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut(resourceBlockId, storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersGet(resourceBlockId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110ResetRequestBody := &openapi.DriveV1110ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, storageId, driveId, *driveV1110ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, storageId, driveId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet(resourceBlockId, storageId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch(resourceBlockId, storageId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut(resourceBlockId, storageId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet(resourceBlockId, storageId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch(resourceBlockId, storageId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut(resourceBlockId, storageId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdGet(resourceBlockId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdPatch(resourceBlockId, storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdPut(resourceBlockId, storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130ResetRequestBody := &openapi.PortV130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&portV130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, storageId, storageControllerId, portId, *portV130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(resourceBlockId, storageId, storageControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(resourceBlockId, storageId, storageControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, storageId, storageControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(resourceBlockId, storageId, storageControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	storageControllerMemberId := params["storageControllerMemberId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet(resourceBlockId, storageId, storageControllerMemberId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesGet(resourceBlockId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesPost(resourceBlockId, storageId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(resourceBlockId, storageId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(resourceBlockId, storageId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(resourceBlockId, storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(resourceBlockId, storageId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(resourceBlockId, storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(resourceBlockId, storageId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(resourceBlockId, storageId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(resourceBlockId, storageId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(resourceBlockId, storageId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(resourceBlockId, storageId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(resourceBlockId, storageId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete(resourceBlockId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet(resourceBlockId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch(resourceBlockId, storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut(resourceBlockId, storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	computerSystemV1130AddResourceBlockRequestBody := &openapi.ComputerSystemV1130AddResourceBlockRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130AddResourceBlockRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost(resourceBlockId, computerSystemId, *computerSystemV1130AddResourceBlockRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	computerSystemV1130RemoveResourceBlockRequestBody := &openapi.ComputerSystemV1130RemoveResourceBlockRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130RemoveResourceBlockRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost(resourceBlockId, computerSystemId, *computerSystemV1130RemoveResourceBlockRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	computerSystemV1130ResetRequestBody := &openapi.ComputerSystemV1130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost(resourceBlockId, computerSystemId, *computerSystemV1130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost(resourceBlockId, computerSystemId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	biosV111ChangePasswordRequestBody := &openapi.BiosV111ChangePasswordRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&biosV111ChangePasswordRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost(resourceBlockId, computerSystemId, *biosV111ChangePasswordRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost(resourceBlockId, computerSystemId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	requestBody := &map[string]map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&requestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch(resourceBlockId, computerSystemId, *requestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	requestBody := &map[string]map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&requestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut(resourceBlockId, computerSystemId, *requestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet(resourceBlockId, computerSystemId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost(resourceBlockId, computerSystemId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete(resourceBlockId, computerSystemId, bootOptionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet(resourceBlockId, computerSystemId, bootOptionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	bootOptionV104BootOption := &openapi.BootOptionV104BootOption{}
	if err := json.NewDecoder(r.Body).Decode(&bootOptionV104BootOption); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch(resourceBlockId, computerSystemId, bootOptionId, *bootOptionV104BootOption)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	bootOptionV104BootOption := &openapi.BootOptionV104BootOption{}
	if err := json.NewDecoder(r.Body).Decode(&bootOptionV104BootOption); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut(resourceBlockId, computerSystemId, bootOptionId, *bootOptionV104BootOption)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	bootOptionV104BootOption := &openapi.BootOptionV104BootOption{}
	if err := json.NewDecoder(r.Body).Decode(&bootOptionV104BootOption); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost(resourceBlockId, computerSystemId, *bootOptionV104BootOption)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet(resourceBlockId, computerSystemId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch(resourceBlockId, computerSystemId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut(resourceBlockId, computerSystemId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet(resourceBlockId, computerSystemId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost(resourceBlockId, computerSystemId, ethernetInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(resourceBlockId, computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(resourceBlockId, computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(resourceBlockId, computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(resourceBlockId, computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost(resourceBlockId, computerSystemId, logServiceId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logServiceV120CollectDiagnosticDataRequestBody := &openapi.LogServiceV120CollectDiagnosticDataRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120CollectDiagnosticDataRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(resourceBlockId, computerSystemId, logServiceId, *logServiceV120CollectDiagnosticDataRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet(resourceBlockId, computerSystemId, logServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete(resourceBlockId, computerSystemId, logServiceId, logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet(resourceBlockId, computerSystemId, logServiceId, logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logEntryV170LogEntry := &openapi.LogEntryV170LogEntry{}
	if err := json.NewDecoder(r.Body).Decode(&logEntryV170LogEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost(resourceBlockId, computerSystemId, logServiceId, *logEntryV170LogEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet(resourceBlockId, computerSystemId, logServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch(resourceBlockId, computerSystemId, logServiceId, *logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut(resourceBlockId, computerSystemId, logServiceId, *logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet(resourceBlockId, computerSystemId, memoryDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet(resourceBlockId, computerSystemId, memoryDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost(resourceBlockId, computerSystemId, memoryDomainId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100DisablePassphraseRequestBody := &openapi.MemoryV1100DisablePassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100DisablePassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(resourceBlockId, computerSystemId, memoryId, *memoryV1100DisablePassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100OverwriteUnitRequestBody := &openapi.MemoryV1100OverwriteUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100OverwriteUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(resourceBlockId, computerSystemId, memoryId, *memoryV1100OverwriteUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100ResetRequestBody := &openapi.MemoryV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost(resourceBlockId, computerSystemId, memoryId, *memoryV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100SecureEraseUnitRequestBody := &openapi.MemoryV1100SecureEraseUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SecureEraseUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(resourceBlockId, computerSystemId, memoryId, *memoryV1100SecureEraseUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100SetPassphraseRequestBody := &openapi.MemoryV1100SetPassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SetPassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost(resourceBlockId, computerSystemId, memoryId, *memoryV1100SetPassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100UnlockUnitRequestBody := &openapi.MemoryV1100UnlockUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100UnlockUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost(resourceBlockId, computerSystemId, memoryId, *memoryV1100UnlockUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet(resourceBlockId, computerSystemId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch(resourceBlockId, computerSystemId, memoryId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut(resourceBlockId, computerSystemId, memoryId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet(resourceBlockId, computerSystemId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, memoryId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet(resourceBlockId, computerSystemId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch(resourceBlockId, computerSystemId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut(resourceBlockId, computerSystemId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet(resourceBlockId, computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(resourceBlockId, computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(resourceBlockId, computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet(resourceBlockId, computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet(resourceBlockId, computerSystemId, pCIeDeviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(resourceBlockId, computerSystemId, pCIeDeviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pCIeFunctionId := params["pCIeFunctionId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(resourceBlockId, computerSystemId, pCIeDeviceId, pCIeFunctionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pcIeDeviceV150PcIeDevice := &openapi.PcIeDeviceV150PcIeDevice{}
	if err := json.NewDecoder(r.Body).Decode(&pcIeDeviceV150PcIeDevice); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch(resourceBlockId, computerSystemId, pCIeDeviceId, *pcIeDeviceV150PcIeDevice)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pcIeDeviceV150PcIeDevice := &openapi.PcIeDeviceV150PcIeDevice{}
	if err := json.NewDecoder(r.Body).Decode(&pcIeDeviceV150PcIeDevice); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut(resourceBlockId, computerSystemId, pCIeDeviceId, *pcIeDeviceV150PcIeDevice)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	computerSystemV1130ComputerSystem := &openapi.ComputerSystemV1130ComputerSystem{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130ComputerSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch(resourceBlockId, computerSystemId, *computerSystemV1130ComputerSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	accelerationFunctionId := params["accelerationFunctionId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(resourceBlockId, computerSystemId, processorId, accelerationFunctionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet(resourceBlockId, computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorV1100ResetRequestBody := &openapi.ProcessorV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost(resourceBlockId, computerSystemId, processorId, *processorV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet(resourceBlockId, computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch(resourceBlockId, computerSystemId, processorId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut(resourceBlockId, computerSystemId, processorId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet(resourceBlockId, computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch(resourceBlockId, computerSystemId, processorId, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet(resourceBlockId, computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut(resourceBlockId, computerSystemId, processorId, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet(resourceBlockId, computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100ResetRequestBody := &openapi.ProcessorV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(resourceBlockId, computerSystemId, processorId, processorId2, *processorV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(resourceBlockId, computerSystemId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(resourceBlockId, computerSystemId, processorId, processorId2, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(resourceBlockId, computerSystemId, processorId, processorId2, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get(resourceBlockId, computerSystemId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(resourceBlockId, computerSystemId, processorId, processorId2, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(resourceBlockId, computerSystemId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put(resourceBlockId, computerSystemId, processorId, processorId2, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	computerSystemV1130ComputerSystem := &openapi.ComputerSystemV1130ComputerSystem{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130ComputerSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPut(resourceBlockId, computerSystemId, *computerSystemV1130ComputerSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	secureBootV110ResetKeysRequestBody := &openapi.SecureBootV110ResetKeysRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootV110ResetKeysRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost(resourceBlockId, computerSystemId, *secureBootV110ResetKeysRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	secureBootV110SecureBoot := &openapi.SecureBootV110SecureBoot{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootV110SecureBoot); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch(resourceBlockId, computerSystemId, *secureBootV110SecureBoot)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	secureBootV110SecureBoot := &openapi.SecureBootV110SecureBoot{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootV110SecureBoot); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut(resourceBlockId, computerSystemId, *secureBootV110SecureBoot)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	secureBootDatabaseV100ResetKeysRequestBody := &openapi.SecureBootDatabaseV100ResetKeysRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootDatabaseV100ResetKeysRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost(resourceBlockId, computerSystemId, databaseId, *secureBootDatabaseV100ResetKeysRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, databaseId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, databaseId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, databaseId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, databaseId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet(resourceBlockId, computerSystemId, databaseId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost(resourceBlockId, computerSystemId, databaseId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet(resourceBlockId, computerSystemId, databaseId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet(resourceBlockId, computerSystemId, databaseId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	signatureV101Signature := &openapi.SignatureV101Signature{}
	if err := json.NewDecoder(r.Body).Decode(&signatureV101Signature); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost(resourceBlockId, computerSystemId, databaseId, *signatureV101Signature)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	signatureId := params["signatureId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete(resourceBlockId, computerSystemId, databaseId, signatureId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	signatureId := params["signatureId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet(resourceBlockId, computerSystemId, databaseId, signatureId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	simpleStorageId := params["simpleStorageId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet(resourceBlockId, computerSystemId, simpleStorageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageV190SetEncryptionKeyRequestBody := &openapi.StorageV190SetEncryptionKeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190SetEncryptionKeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost(resourceBlockId, computerSystemId, storageId, *storageV190SetEncryptionKeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyGet(resourceBlockId, computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPatch(resourceBlockId, computerSystemId, storageId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdAssemblyPut(resourceBlockId, computerSystemId, storageId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet(resourceBlockId, computerSystemId, storageId, controllerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch(resourceBlockId, computerSystemId, storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut(resourceBlockId, computerSystemId, storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet(resourceBlockId, computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110ResetRequestBody := &openapi.DriveV1110ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, computerSystemId, storageId, driveId, *driveV1110ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, computerSystemId, storageId, driveId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet(resourceBlockId, computerSystemId, storageId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch(resourceBlockId, computerSystemId, storageId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut(resourceBlockId, computerSystemId, storageId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet(resourceBlockId, computerSystemId, storageId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch(resourceBlockId, computerSystemId, storageId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut(resourceBlockId, computerSystemId, storageId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet(resourceBlockId, computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch(resourceBlockId, computerSystemId, storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut(resourceBlockId, computerSystemId, storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130ResetRequestBody := &openapi.PortV130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&portV130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, *portV130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerMemberId := params["storageControllerMemberId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet(resourceBlockId, computerSystemId, storageId, storageControllerMemberId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet(resourceBlockId, computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost(resourceBlockId, computerSystemId, storageId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(resourceBlockId, computerSystemId, storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(resourceBlockId, computerSystemId, storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete(resourceBlockId, computerSystemId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet(resourceBlockId, computerSystemId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut(resourceBlockId, computerSystemId, storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet(resourceBlockId, computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(resourceBlockId, computerSystemId, virtualMediaId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132InsertMediaRequestBody := &openapi.VirtualMediaV132InsertMediaRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132InsertMediaRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(resourceBlockId, computerSystemId, virtualMediaId, *virtualMediaV132InsertMediaRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet(resourceBlockId, computerSystemId, virtualMediaId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132VirtualMedia := &openapi.VirtualMediaV132VirtualMedia{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132VirtualMedia); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch(resourceBlockId, computerSystemId, virtualMediaId, *virtualMediaV132VirtualMedia)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut -
func (c *DefaultApiController) RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceBlockId := params["resourceBlockId"]
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132VirtualMedia := &openapi.VirtualMediaV132VirtualMedia{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132VirtualMedia); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut(resourceBlockId, computerSystemId, virtualMediaId, *virtualMediaV132VirtualMedia)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SessionServiceGet -
func (c *DefaultApiController) RedfishV1SessionServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1SessionServiceGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SessionServicePatch -
func (c *DefaultApiController) RedfishV1SessionServicePatch(w http.ResponseWriter, r *http.Request) {
	sessionServiceV117SessionService := &openapi.SessionServiceV117SessionService{}
	if err := json.NewDecoder(r.Body).Decode(&sessionServiceV117SessionService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SessionServicePatch(*sessionServiceV117SessionService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SessionServicePut -
func (c *DefaultApiController) RedfishV1SessionServicePut(w http.ResponseWriter, r *http.Request) {
	sessionServiceV117SessionService := &openapi.SessionServiceV117SessionService{}
	if err := json.NewDecoder(r.Body).Decode(&sessionServiceV117SessionService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SessionServicePut(*sessionServiceV117SessionService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SessionServiceSessionsGet -
func (c *DefaultApiController) RedfishV1SessionServiceSessionsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1SessionServiceSessionsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SessionServiceSessionsPost -
func (c *DefaultApiController) RedfishV1SessionServiceSessionsPost(w http.ResponseWriter, r *http.Request) {
	sessionV130Session := &openapi.SessionV130Session{}
	if err := json.NewDecoder(r.Body).Decode(&sessionV130Session); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SessionServiceSessionsPost(*sessionV130Session)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SessionServiceSessionsSessionIdDelete -
func (c *DefaultApiController) RedfishV1SessionServiceSessionsSessionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionId := params["sessionId"]
	result, err := c.service.RedfishV1SessionServiceSessionsSessionIdDelete(sessionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SessionServiceSessionsSessionIdGet -
func (c *DefaultApiController) RedfishV1SessionServiceSessionsSessionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionId := params["sessionId"]
	result, err := c.service.RedfishV1SessionServiceSessionsSessionIdGet(sessionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageGet -
func (c *DefaultApiController) RedfishV1StorageGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1StorageGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesGet -
func (c *DefaultApiController) RedfishV1StorageServicesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1StorageServicesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesPost -
func (c *DefaultApiController) RedfishV1StorageServicesPost(w http.ResponseWriter, r *http.Request) {
	storageServiceV150StorageService := &openapi.StorageServiceV150StorageService{}
	if err := json.NewDecoder(r.Body).Decode(&storageServiceV150StorageService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesPost(*storageServiceV150StorageService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdActionsStorageServiceSetEncryptionKeyPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdActionsStorageServiceSetEncryptionKeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storageServiceV150SetEncryptionKeyRequestBody := &openapi.StorageServiceV150SetEncryptionKeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&storageServiceV150SetEncryptionKeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdActionsStorageServiceSetEncryptionKeyPost(storageServiceId, *storageServiceV150SetEncryptionKeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataProtectionLineOfServiceId := params["dataProtectionLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdDelete(storageServiceId, classOfServiceId, dataProtectionLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataProtectionLineOfServiceId := params["dataProtectionLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdGet(storageServiceId, classOfServiceId, dataProtectionLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataProtectionLineOfServiceId := params["dataProtectionLineOfServiceId"]
	dataProtectionLineOfServiceV121DataProtectionLineOfService := &openapi.DataProtectionLineOfServiceV121DataProtectionLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataProtectionLineOfServiceV121DataProtectionLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPatch(storageServiceId, classOfServiceId, dataProtectionLineOfServiceId, *dataProtectionLineOfServiceV121DataProtectionLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataProtectionLineOfServiceId := params["dataProtectionLineOfServiceId"]
	dataProtectionLineOfServiceV121DataProtectionLineOfService := &openapi.DataProtectionLineOfServiceV121DataProtectionLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataProtectionLineOfServiceV121DataProtectionLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPut(storageServiceId, classOfServiceId, dataProtectionLineOfServiceId, *dataProtectionLineOfServiceV121DataProtectionLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServiceGet(storageServiceId, classOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataProtectionLinesOfServicePost(storageServiceId, classOfServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataSecurityLineOfServiceId := params["dataSecurityLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdDelete(storageServiceId, classOfServiceId, dataSecurityLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataSecurityLineOfServiceId := params["dataSecurityLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdGet(storageServiceId, classOfServiceId, dataSecurityLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataSecurityLineOfServiceId := params["dataSecurityLineOfServiceId"]
	dataSecurityLineOfServiceV111DataSecurityLineOfService := &openapi.DataSecurityLineOfServiceV111DataSecurityLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataSecurityLineOfServiceV111DataSecurityLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPatch(storageServiceId, classOfServiceId, dataSecurityLineOfServiceId, *dataSecurityLineOfServiceV111DataSecurityLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataSecurityLineOfServiceId := params["dataSecurityLineOfServiceId"]
	dataSecurityLineOfServiceV111DataSecurityLineOfService := &openapi.DataSecurityLineOfServiceV111DataSecurityLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataSecurityLineOfServiceV111DataSecurityLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPut(storageServiceId, classOfServiceId, dataSecurityLineOfServiceId, *dataSecurityLineOfServiceV111DataSecurityLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServiceGet(storageServiceId, classOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataSecurityLinesOfServicePost(storageServiceId, classOfServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataStorageLineOfServiceId := params["dataStorageLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdDelete(storageServiceId, classOfServiceId, dataStorageLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataStorageLineOfServiceId := params["dataStorageLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdGet(storageServiceId, classOfServiceId, dataStorageLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataStorageLineOfServiceId := params["dataStorageLineOfServiceId"]
	dataStorageLineOfServiceV131DataStorageLineOfService := &openapi.DataStorageLineOfServiceV131DataStorageLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataStorageLineOfServiceV131DataStorageLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdPatch(storageServiceId, classOfServiceId, dataStorageLineOfServiceId, *dataStorageLineOfServiceV131DataStorageLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	dataStorageLineOfServiceId := params["dataStorageLineOfServiceId"]
	dataStorageLineOfServiceV131DataStorageLineOfService := &openapi.DataStorageLineOfServiceV131DataStorageLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataStorageLineOfServiceV131DataStorageLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceDataStorageLineOfServiceIdPut(storageServiceId, classOfServiceId, dataStorageLineOfServiceId, *dataStorageLineOfServiceV131DataStorageLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServiceGet(storageServiceId, classOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDataStorageLinesOfServicePost(storageServiceId, classOfServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdDelete(storageServiceId, classOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdGet(storageServiceId, classOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceGet(storageServiceId, classOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	iOConnectivityLineOfServiceId := params["iOConnectivityLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdDelete(storageServiceId, classOfServiceId, iOConnectivityLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	iOConnectivityLineOfServiceId := params["iOConnectivityLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdGet(storageServiceId, classOfServiceId, iOConnectivityLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	iOConnectivityLineOfServiceId := params["iOConnectivityLineOfServiceId"]
	ioConnectivityLineOfServiceV121IoConnectivityLineOfService := &openapi.IoConnectivityLineOfServiceV121IoConnectivityLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&ioConnectivityLineOfServiceV121IoConnectivityLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPatch(storageServiceId, classOfServiceId, iOConnectivityLineOfServiceId, *ioConnectivityLineOfServiceV121IoConnectivityLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	iOConnectivityLineOfServiceId := params["iOConnectivityLineOfServiceId"]
	ioConnectivityLineOfServiceV121IoConnectivityLineOfService := &openapi.IoConnectivityLineOfServiceV121IoConnectivityLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&ioConnectivityLineOfServiceV121IoConnectivityLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPut(storageServiceId, classOfServiceId, iOConnectivityLineOfServiceId, *ioConnectivityLineOfServiceV121IoConnectivityLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOConnectivityLinesOfServicePost(storageServiceId, classOfServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceGet(storageServiceId, classOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	iOPerformanceLineOfServiceId := params["iOPerformanceLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdDelete(storageServiceId, classOfServiceId, iOPerformanceLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	iOPerformanceLineOfServiceId := params["iOPerformanceLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdGet(storageServiceId, classOfServiceId, iOPerformanceLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	iOPerformanceLineOfServiceId := params["iOPerformanceLineOfServiceId"]
	ioPerformanceLineOfServiceV111IoPerformanceLineOfService := &openapi.IoPerformanceLineOfServiceV111IoPerformanceLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&ioPerformanceLineOfServiceV111IoPerformanceLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPatch(storageServiceId, classOfServiceId, iOPerformanceLineOfServiceId, *ioPerformanceLineOfServiceV111IoPerformanceLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	iOPerformanceLineOfServiceId := params["iOPerformanceLineOfServiceId"]
	ioPerformanceLineOfServiceV111IoPerformanceLineOfService := &openapi.IoPerformanceLineOfServiceV111IoPerformanceLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&ioPerformanceLineOfServiceV111IoPerformanceLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPut(storageServiceId, classOfServiceId, iOPerformanceLineOfServiceId, *ioPerformanceLineOfServiceV111IoPerformanceLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdIOPerformanceLinesOfServicePost(storageServiceId, classOfServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	classOfServiceV120ClassOfService := &openapi.ClassOfServiceV120ClassOfService{}
	if err := json.NewDecoder(r.Body).Decode(&classOfServiceV120ClassOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdPatch(storageServiceId, classOfServiceId, *classOfServiceV120ClassOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	classOfServiceId := params["classOfServiceId"]
	classOfServiceV120ClassOfService := &openapi.ClassOfServiceV120ClassOfService{}
	if err := json.NewDecoder(r.Body).Decode(&classOfServiceV120ClassOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceClassOfServiceIdPut(storageServiceId, classOfServiceId, *classOfServiceV120ClassOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServiceGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdClassesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdClassesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdClassesOfServicePost(storageServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101AssignReplicaTargetRequestBody := &openapi.ConsistencyGroupV101AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost(storageServiceId, consistencyGroupId, *consistencyGroupV101AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101CreateReplicaTargetRequestBody := &openapi.ConsistencyGroupV101CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost(storageServiceId, consistencyGroupId, *consistencyGroupV101CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101RemoveReplicaRelationshipRequestBody := &openapi.ConsistencyGroupV101RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost(storageServiceId, consistencyGroupId, *consistencyGroupV101RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ResumeReplicationRequestBody := &openapi.ConsistencyGroupV101ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost(storageServiceId, consistencyGroupId, *consistencyGroupV101ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ReverseReplicationRelationshipRequestBody := &openapi.ConsistencyGroupV101ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost(storageServiceId, consistencyGroupId, *consistencyGroupV101ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101SplitReplicationRequestBody := &openapi.ConsistencyGroupV101SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost(storageServiceId, consistencyGroupId, *consistencyGroupV101SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101SuspendReplicationRequestBody := &openapi.ConsistencyGroupV101SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost(storageServiceId, consistencyGroupId, *consistencyGroupV101SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdDelete(storageServiceId, consistencyGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdGet(storageServiceId, consistencyGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ConsistencyGroup := &openapi.ConsistencyGroupV101ConsistencyGroup{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ConsistencyGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdPatch(storageServiceId, consistencyGroupId, *consistencyGroupV101ConsistencyGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ConsistencyGroup := &openapi.ConsistencyGroupV101ConsistencyGroup{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ConsistencyGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdPut(storageServiceId, consistencyGroupId, *consistencyGroupV101ConsistencyGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesGet(storageServiceId, consistencyGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesPost(storageServiceId, consistencyGroupId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, consistencyGroupId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, consistencyGroupId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, consistencyGroupId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, consistencyGroupId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost(storageServiceId, consistencyGroupId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost(storageServiceId, consistencyGroupId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, consistencyGroupId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, consistencyGroupId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, consistencyGroupId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, consistencyGroupId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, consistencyGroupId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete(storageServiceId, consistencyGroupId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet(storageServiceId, consistencyGroupId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch(storageServiceId, consistencyGroupId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut(storageServiceId, consistencyGroupId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdConsistencyGroupsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdConsistencyGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdConsistencyGroupsGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataProtectionLoSCapabilitiesV120DataProtectionLoSCapabilities := &openapi.DataProtectionLoSCapabilitiesV120DataProtectionLoSCapabilities{}
	if err := json.NewDecoder(r.Body).Decode(&dataProtectionLoSCapabilitiesV120DataProtectionLoSCapabilities); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesPatch(storageServiceId, *dataProtectionLoSCapabilitiesV120DataProtectionLoSCapabilities)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataProtectionLoSCapabilitiesV120DataProtectionLoSCapabilities := &openapi.DataProtectionLoSCapabilitiesV120DataProtectionLoSCapabilities{}
	if err := json.NewDecoder(r.Body).Decode(&dataProtectionLoSCapabilitiesV120DataProtectionLoSCapabilities); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdDataProtectionLoSCapabilitiesPut(storageServiceId, *dataProtectionLoSCapabilitiesV120DataProtectionLoSCapabilities)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataSecurityLoSCapabilitiesV120DataSecurityLoSCapabilities := &openapi.DataSecurityLoSCapabilitiesV120DataSecurityLoSCapabilities{}
	if err := json.NewDecoder(r.Body).Decode(&dataSecurityLoSCapabilitiesV120DataSecurityLoSCapabilities); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesPatch(storageServiceId, *dataSecurityLoSCapabilitiesV120DataSecurityLoSCapabilities)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataSecurityLoSCapabilitiesV120DataSecurityLoSCapabilities := &openapi.DataSecurityLoSCapabilitiesV120DataSecurityLoSCapabilities{}
	if err := json.NewDecoder(r.Body).Decode(&dataSecurityLoSCapabilitiesV120DataSecurityLoSCapabilities); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdDataSecurityLoSCapabilitiesPut(storageServiceId, *dataSecurityLoSCapabilitiesV120DataSecurityLoSCapabilities)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataStorageLoSCapabilitiesV122DataStorageLoSCapabilities := &openapi.DataStorageLoSCapabilitiesV122DataStorageLoSCapabilities{}
	if err := json.NewDecoder(r.Body).Decode(&dataStorageLoSCapabilitiesV122DataStorageLoSCapabilities); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesPatch(storageServiceId, *dataStorageLoSCapabilitiesV122DataStorageLoSCapabilities)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataStorageLoSCapabilitiesV122DataStorageLoSCapabilities := &openapi.DataStorageLoSCapabilitiesV122DataStorageLoSCapabilities{}
	if err := json.NewDecoder(r.Body).Decode(&dataStorageLoSCapabilitiesV122DataStorageLoSCapabilities); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdDataStorageLoSCapabilitiesPut(storageServiceId, *dataStorageLoSCapabilitiesV122DataStorageLoSCapabilities)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdDelete(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdDrivesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdDrivesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdDrivesGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	endpointGroupId := params["endpointGroupId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdDelete(storageServiceId, endpointGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	endpointGroupId := params["endpointGroupId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdGet(storageServiceId, endpointGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	endpointGroupId := params["endpointGroupId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPatch(storageServiceId, endpointGroupId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	endpointGroupId := params["endpointGroupId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPut(storageServiceId, endpointGroupId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdEndpointGroupsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdEndpointGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdEndpointGroupsGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdEndpointGroupsPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdEndpointGroupsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdEndpointGroupsPost(storageServiceId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete(storageServiceId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet(storageServiceId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch(storageServiceId, fileSystemId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageServiceId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(storageServiceId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(storageServiceId, fileSystemId, capacitySourceId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(storageServiceId, fileSystemId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(storageServiceId, fileSystemId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(storageServiceId, fileSystemId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(storageServiceId, fileSystemId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(storageServiceId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(storageServiceId, fileSystemId, capacitySourceId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(storageServiceId, fileSystemId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(storageServiceId, fileSystemId, capacitySourceId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(storageServiceId, fileSystemId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(storageServiceId, fileSystemId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(storageServiceId, fileSystemId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(storageServiceId, fileSystemId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut(storageServiceId, fileSystemId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesGet(storageServiceId, fileSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdDelete(storageServiceId, fileSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdGet(storageServiceId, fileSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	fileSystemV122FileSystem := &openapi.FileSystemV122FileSystem{}
	if err := json.NewDecoder(r.Body).Decode(&fileSystemV122FileSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdPatch(storageServiceId, fileSystemId, *fileSystemV122FileSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemId := params["fileSystemId"]
	fileSystemV122FileSystem := &openapi.FileSystemV122FileSystem{}
	if err := json.NewDecoder(r.Body).Decode(&fileSystemV122FileSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdPut(storageServiceId, fileSystemId, *fileSystemV122FileSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete(storageServiceId, fileSystemsId, exportedFileSharesId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet(storageServiceId, fileSystemsId, exportedFileSharesId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	fileShareV120FileShare := &openapi.FileShareV120FileShare{}
	if err := json.NewDecoder(r.Body).Decode(&fileShareV120FileShare); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch(storageServiceId, fileSystemsId, exportedFileSharesId, *fileShareV120FileShare)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	fileShareV120FileShare := &openapi.FileShareV120FileShare{}
	if err := json.NewDecoder(r.Body).Decode(&fileShareV120FileShare); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut(storageServiceId, fileSystemsId, exportedFileSharesId, *fileShareV120FileShare)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemsId := params["fileSystemsId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesGet(storageServiceId, fileSystemsId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemsId := params["fileSystemsId"]
	fileShareV120FileShare := &openapi.FileShareV120FileShare{}
	if err := json.NewDecoder(r.Body).Decode(&fileShareV120FileShare); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsFileSystemsIdExportedFileSharesPost(storageServiceId, fileSystemsId, *fileShareV120FileShare)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdFileSystemsPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdFileSystemsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	fileSystemV122FileSystem := &openapi.FileSystemV122FileSystem{}
	if err := json.NewDecoder(r.Body).Decode(&fileSystemV122FileSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdFileSystemsPost(storageServiceId, *fileSystemV122FileSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	ioConnectivityLoSCapabilitiesV120IoConnectivityLoSCapabilities := &openapi.IoConnectivityLoSCapabilitiesV120IoConnectivityLoSCapabilities{}
	if err := json.NewDecoder(r.Body).Decode(&ioConnectivityLoSCapabilitiesV120IoConnectivityLoSCapabilities); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesPatch(storageServiceId, *ioConnectivityLoSCapabilitiesV120IoConnectivityLoSCapabilities)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	ioConnectivityLoSCapabilitiesV120IoConnectivityLoSCapabilities := &openapi.IoConnectivityLoSCapabilitiesV120IoConnectivityLoSCapabilities{}
	if err := json.NewDecoder(r.Body).Decode(&ioConnectivityLoSCapabilitiesV120IoConnectivityLoSCapabilities); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdIOConnectivityLoSCapabilitiesPut(storageServiceId, *ioConnectivityLoSCapabilitiesV120IoConnectivityLoSCapabilities)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	ioPerformanceLoSCapabilitiesV130IoPerformanceLoSCapabilities := &openapi.IoPerformanceLoSCapabilitiesV130IoPerformanceLoSCapabilities{}
	if err := json.NewDecoder(r.Body).Decode(&ioPerformanceLoSCapabilitiesV130IoPerformanceLoSCapabilities); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesPatch(storageServiceId, *ioPerformanceLoSCapabilitiesV130IoPerformanceLoSCapabilities)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	ioPerformanceLoSCapabilitiesV130IoPerformanceLoSCapabilities := &openapi.IoPerformanceLoSCapabilitiesV130IoPerformanceLoSCapabilities{}
	if err := json.NewDecoder(r.Body).Decode(&ioPerformanceLoSCapabilitiesV130IoPerformanceLoSCapabilities); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdIOPerformanceLoSCapabilitiesPut(storageServiceId, *ioPerformanceLoSCapabilitiesV130IoPerformanceLoSCapabilities)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataProtectionLineOfServiceId := params["dataProtectionLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdDelete(storageServiceId, dataProtectionLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataProtectionLineOfServiceId := params["dataProtectionLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdGet(storageServiceId, dataProtectionLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataProtectionLineOfServiceId := params["dataProtectionLineOfServiceId"]
	dataProtectionLineOfServiceV121DataProtectionLineOfService := &openapi.DataProtectionLineOfServiceV121DataProtectionLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataProtectionLineOfServiceV121DataProtectionLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPatch(storageServiceId, dataProtectionLineOfServiceId, *dataProtectionLineOfServiceV121DataProtectionLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataProtectionLineOfServiceId := params["dataProtectionLineOfServiceId"]
	dataProtectionLineOfServiceV121DataProtectionLineOfService := &openapi.DataProtectionLineOfServiceV121DataProtectionLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataProtectionLineOfServiceV121DataProtectionLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceDataProtectionLineOfServiceIdPut(storageServiceId, dataProtectionLineOfServiceId, *dataProtectionLineOfServiceV121DataProtectionLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServiceGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataProtectionLinesOfServicePost(storageServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataSecurityLineOfServiceId := params["dataSecurityLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdDelete(storageServiceId, dataSecurityLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataSecurityLineOfServiceId := params["dataSecurityLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdGet(storageServiceId, dataSecurityLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataSecurityLineOfServiceId := params["dataSecurityLineOfServiceId"]
	dataSecurityLineOfServiceV111DataSecurityLineOfService := &openapi.DataSecurityLineOfServiceV111DataSecurityLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataSecurityLineOfServiceV111DataSecurityLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPatch(storageServiceId, dataSecurityLineOfServiceId, *dataSecurityLineOfServiceV111DataSecurityLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataSecurityLineOfServiceId := params["dataSecurityLineOfServiceId"]
	dataSecurityLineOfServiceV111DataSecurityLineOfService := &openapi.DataSecurityLineOfServiceV111DataSecurityLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataSecurityLineOfServiceV111DataSecurityLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceDataSecurityLineOfServiceIdPut(storageServiceId, dataSecurityLineOfServiceId, *dataSecurityLineOfServiceV111DataSecurityLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServiceGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataSecurityLinesOfServicePost(storageServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataStorageLineOfServiceId := params["dataStorageLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdDelete(storageServiceId, dataStorageLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataStorageLineOfServiceId := params["dataStorageLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdGet(storageServiceId, dataStorageLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataStorageLineOfServiceId := params["dataStorageLineOfServiceId"]
	dataStorageLineOfServiceV131DataStorageLineOfService := &openapi.DataStorageLineOfServiceV131DataStorageLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataStorageLineOfServiceV131DataStorageLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdPatch(storageServiceId, dataStorageLineOfServiceId, *dataStorageLineOfServiceV131DataStorageLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	dataStorageLineOfServiceId := params["dataStorageLineOfServiceId"]
	dataStorageLineOfServiceV131DataStorageLineOfService := &openapi.DataStorageLineOfServiceV131DataStorageLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&dataStorageLineOfServiceV131DataStorageLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceDataStorageLineOfServiceIdPut(storageServiceId, dataStorageLineOfServiceId, *dataStorageLineOfServiceV131DataStorageLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServiceGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceDataStorageLinesOfServicePost(storageServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	iOConnectivityLineOfServiceId := params["iOConnectivityLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdDelete(storageServiceId, iOConnectivityLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	iOConnectivityLineOfServiceId := params["iOConnectivityLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdGet(storageServiceId, iOConnectivityLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	iOConnectivityLineOfServiceId := params["iOConnectivityLineOfServiceId"]
	ioConnectivityLineOfServiceV121IoConnectivityLineOfService := &openapi.IoConnectivityLineOfServiceV121IoConnectivityLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&ioConnectivityLineOfServiceV121IoConnectivityLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPatch(storageServiceId, iOConnectivityLineOfServiceId, *ioConnectivityLineOfServiceV121IoConnectivityLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	iOConnectivityLineOfServiceId := params["iOConnectivityLineOfServiceId"]
	ioConnectivityLineOfServiceV121IoConnectivityLineOfService := &openapi.IoConnectivityLineOfServiceV121IoConnectivityLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&ioConnectivityLineOfServiceV121IoConnectivityLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServiceIOConnectivityLineOfServiceIdPut(storageServiceId, iOConnectivityLineOfServiceId, *ioConnectivityLineOfServiceV121IoConnectivityLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOConnectivityLinesOfServicePost(storageServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	iOPerformanceLineOfServiceId := params["iOPerformanceLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdDelete(storageServiceId, iOPerformanceLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	iOPerformanceLineOfServiceId := params["iOPerformanceLineOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdGet(storageServiceId, iOPerformanceLineOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	iOPerformanceLineOfServiceId := params["iOPerformanceLineOfServiceId"]
	ioPerformanceLineOfServiceV111IoPerformanceLineOfService := &openapi.IoPerformanceLineOfServiceV111IoPerformanceLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&ioPerformanceLineOfServiceV111IoPerformanceLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPatch(storageServiceId, iOPerformanceLineOfServiceId, *ioPerformanceLineOfServiceV111IoPerformanceLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	iOPerformanceLineOfServiceId := params["iOPerformanceLineOfServiceId"]
	ioPerformanceLineOfServiceV111IoPerformanceLineOfService := &openapi.IoPerformanceLineOfServiceV111IoPerformanceLineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&ioPerformanceLineOfServiceV111IoPerformanceLineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServiceIOPerformanceLineOfServiceIdPut(storageServiceId, iOPerformanceLineOfServiceId, *ioPerformanceLineOfServiceV111IoPerformanceLineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServiceIOPerformanceLinesOfServicePost(storageServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdLinesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdLinesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdLinesOfServicePost(storageServiceId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storageServiceV150StorageService := &openapi.StorageServiceV150StorageService{}
	if err := json.NewDecoder(r.Body).Decode(&storageServiceV150StorageService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdPatch(storageServiceId, *storageServiceV150StorageService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storageServiceV150StorageService := &openapi.StorageServiceV150StorageService{}
	if err := json.NewDecoder(r.Body).Decode(&storageServiceV150StorageService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdPut(storageServiceId, *storageServiceV150StorageService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStorageGroupsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStorageGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStorageGroupsGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStorageGroupsPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStorageGroupsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStorageGroupsPost(storageServiceId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storageGroupId := params["storageGroupId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost(storageServiceId, storageGroupId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storageGroupId := params["storageGroupId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost(storageServiceId, storageGroupId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storageGroupId := params["storageGroupId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdDelete(storageServiceId, storageGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storageGroupId := params["storageGroupId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdGet(storageServiceId, storageGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storageGroupId := params["storageGroupId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdPatch(storageServiceId, storageGroupId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storageGroupId := params["storageGroupId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStorageGroupsStorageGroupIdPut(storageServiceId, storageGroupId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsPost(storageServiceId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete(storageServiceId, storagePoolId, allocatedPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet(storageServiceId, storagePoolId, allocatedPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch(storageServiceId, storagePoolId, allocatedPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut(storageServiceId, storagePoolId, allocatedPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsGet(storageServiceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedPoolsPost(storageServiceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesGet(storageServiceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesPost(storageServiceId, storagePoolId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, storagePoolId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, storagePoolId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, storagePoolId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, storagePoolId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost(storageServiceId, storagePoolId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost(storageServiceId, storagePoolId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, storagePoolId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, storagePoolId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, storagePoolId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, storagePoolId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, storagePoolId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete(storageServiceId, storagePoolId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet(storageServiceId, storagePoolId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch(storageServiceId, storagePoolId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut(storageServiceId, storagePoolId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete(storageServiceId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet(storageServiceId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch(storageServiceId, storagePoolId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageServiceId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(storageServiceId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(storageServiceId, storagePoolId, capacitySourceId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete(storageServiceId, storagePoolId, capacitySourceId, providingPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet(storageServiceId, storagePoolId, capacitySourceId, providingPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch(storageServiceId, storagePoolId, capacitySourceId, providingPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut(storageServiceId, storagePoolId, capacitySourceId, providingPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(storageServiceId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(storageServiceId, storagePoolId, capacitySourceId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(storageServiceId, storagePoolId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(storageServiceId, storagePoolId, capacitySourceId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(storageServiceId, storagePoolId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(storageServiceId, storagePoolId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(storageServiceId, storagePoolId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(storageServiceId, storagePoolId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut(storageServiceId, storagePoolId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesGet(storageServiceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	classOfServiceId := params["classOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdDelete(storageServiceId, storagePoolId, classOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	classOfServiceId := params["classOfServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdGet(storageServiceId, storagePoolId, classOfServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	classOfServiceId := params["classOfServiceId"]
	classOfServiceV120ClassOfService := &openapi.ClassOfServiceV120ClassOfService{}
	if err := json.NewDecoder(r.Body).Decode(&classOfServiceV120ClassOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdPatch(storageServiceId, storagePoolId, classOfServiceId, *classOfServiceV120ClassOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	classOfServiceId := params["classOfServiceId"]
	classOfServiceV120ClassOfService := &openapi.ClassOfServiceV120ClassOfService{}
	if err := json.NewDecoder(r.Body).Decode(&classOfServiceV120ClassOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceClassOfServiceIdPut(storageServiceId, storagePoolId, classOfServiceId, *classOfServiceV120ClassOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServiceGet(storageServiceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServicePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServicePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	lineOfServiceV110LineOfService := &openapi.LineOfServiceV110LineOfService{}
	if err := json.NewDecoder(r.Body).Decode(&lineOfServiceV110LineOfService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdClassesOfServicePost(storageServiceId, storagePoolId, *lineOfServiceV110LineOfService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdDelete(storageServiceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdGet(storageServiceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdPatch(storageServiceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdPut(storageServiceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesGet(storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesPost(storageServiceId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeForceEnablePost(storageServiceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeInitializePost(storageServiceId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsGet(storageServiceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsPost(storageServiceId, volumeId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete(storageServiceId, volumeId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet(storageServiceId, volumeId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch(storageServiceId, volumeId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut(storageServiceId, volumeId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete(storageServiceId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet(storageServiceId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch(storageServiceId, volumeId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageServiceId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(storageServiceId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(storageServiceId, volumeId, capacitySourceId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(storageServiceId, volumeId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(storageServiceId, volumeId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(storageServiceId, volumeId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(storageServiceId, volumeId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(storageServiceId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(storageServiceId, volumeId, capacitySourceId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeForceEnablePost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeInitializePost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdDelete(storageServiceId, volumeId, capacitySourceId, providingVolumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdGet(storageServiceId, volumeId, capacitySourceId, providingVolumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPatch(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	providingVolumeId := params["providingVolumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPut(storageServiceId, volumeId, capacitySourceId, providingVolumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut(storageServiceId, volumeId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesGet(storageServiceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101AssignReplicaTargetRequestBody := &openapi.ConsistencyGroupV101AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost(storageServiceId, volumeId, consistencyGroupId, *consistencyGroupV101AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101CreateReplicaTargetRequestBody := &openapi.ConsistencyGroupV101CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost(storageServiceId, volumeId, consistencyGroupId, *consistencyGroupV101CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101RemoveReplicaRelationshipRequestBody := &openapi.ConsistencyGroupV101RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost(storageServiceId, volumeId, consistencyGroupId, *consistencyGroupV101RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ResumeReplicationRequestBody := &openapi.ConsistencyGroupV101ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost(storageServiceId, volumeId, consistencyGroupId, *consistencyGroupV101ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ReverseReplicationRelationshipRequestBody := &openapi.ConsistencyGroupV101ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost(storageServiceId, volumeId, consistencyGroupId, *consistencyGroupV101ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101SplitReplicationRequestBody := &openapi.ConsistencyGroupV101SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost(storageServiceId, volumeId, consistencyGroupId, *consistencyGroupV101SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101SuspendReplicationRequestBody := &openapi.ConsistencyGroupV101SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost(storageServiceId, volumeId, consistencyGroupId, *consistencyGroupV101SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	consistencyGroupId := params["consistencyGroupId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdDelete(storageServiceId, volumeId, consistencyGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	consistencyGroupId := params["consistencyGroupId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdGet(storageServiceId, volumeId, consistencyGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ConsistencyGroup := &openapi.ConsistencyGroupV101ConsistencyGroup{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ConsistencyGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdPatch(storageServiceId, volumeId, consistencyGroupId, *consistencyGroupV101ConsistencyGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ConsistencyGroup := &openapi.ConsistencyGroupV101ConsistencyGroup{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ConsistencyGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsConsistencyGroupIdPut(storageServiceId, volumeId, consistencyGroupId, *consistencyGroupV101ConsistencyGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdConsistencyGroupsGet(storageServiceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdDelete(storageServiceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdGet(storageServiceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdPatch(storageServiceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdPut(storageServiceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsGet(storageServiceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsPost(storageServiceId, volumeId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost(storageServiceId, volumeId, storageGroupId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost(storageServiceId, volumeId, storageGroupId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdDelete -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdDelete(storageServiceId, volumeId, storageGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdGet -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdGet(storageServiceId, volumeId, storageGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdPatch -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdPatch(storageServiceId, volumeId, storageGroupId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdPut -
func (c *DefaultApiController) RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageServiceId := params["storageServiceId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageServicesStorageServiceIdVolumesVolumeIdStorageGroupsStorageGroupIdPut(storageServiceId, volumeId, storageGroupId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdActionsStorageSetEncryptionKeyPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdActionsStorageSetEncryptionKeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storageV190SetEncryptionKeyRequestBody := &openapi.StorageV190SetEncryptionKeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190SetEncryptionKeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdActionsStorageSetEncryptionKeyPost(storageId, *storageV190SetEncryptionKeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101AssignReplicaTargetRequestBody := &openapi.ConsistencyGroupV101AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost(storageId, consistencyGroupId, *consistencyGroupV101AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101CreateReplicaTargetRequestBody := &openapi.ConsistencyGroupV101CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost(storageId, consistencyGroupId, *consistencyGroupV101CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101RemoveReplicaRelationshipRequestBody := &openapi.ConsistencyGroupV101RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost(storageId, consistencyGroupId, *consistencyGroupV101RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ResumeReplicationRequestBody := &openapi.ConsistencyGroupV101ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost(storageId, consistencyGroupId, *consistencyGroupV101ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ReverseReplicationRelationshipRequestBody := &openapi.ConsistencyGroupV101ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost(storageId, consistencyGroupId, *consistencyGroupV101ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101SplitReplicationRequestBody := &openapi.ConsistencyGroupV101SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost(storageId, consistencyGroupId, *consistencyGroupV101SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101SuspendReplicationRequestBody := &openapi.ConsistencyGroupV101SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost(storageId, consistencyGroupId, *consistencyGroupV101SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdDelete(storageId, consistencyGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdGet(storageId, consistencyGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ConsistencyGroup := &openapi.ConsistencyGroupV101ConsistencyGroup{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ConsistencyGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdPatch(storageId, consistencyGroupId, *consistencyGroupV101ConsistencyGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ConsistencyGroup := &openapi.ConsistencyGroupV101ConsistencyGroup{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ConsistencyGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdPut(storageId, consistencyGroupId, *consistencyGroupV101ConsistencyGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet(storageId, consistencyGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost(storageId, consistencyGroupId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageId, consistencyGroupId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageId, consistencyGroupId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageId, consistencyGroupId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageId, consistencyGroupId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost(storageId, consistencyGroupId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost(storageId, consistencyGroupId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageId, consistencyGroupId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost(storageId, consistencyGroupId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageId, consistencyGroupId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost(storageId, consistencyGroupId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageId, consistencyGroupId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete(storageId, consistencyGroupId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet(storageId, consistencyGroupId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch(storageId, consistencyGroupId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut(storageId, consistencyGroupId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdConsistencyGroupsGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdConsistencyGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	result, err := c.service.RedfishV1StorageStorageIdConsistencyGroupsGet(storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdControllersControllerIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdControllersControllerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	result, err := c.service.RedfishV1StorageStorageIdControllersControllerIdGet(storageId, controllerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdControllersControllerIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdControllersControllerIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdControllersControllerIdPatch(storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdControllersControllerIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdControllersControllerIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdControllersControllerIdPut(storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdControllersGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdControllersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	result, err := c.service.RedfishV1StorageStorageIdControllersGet(storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	endpointGroupId := params["endpointGroupId"]
	result, err := c.service.RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdDelete(storageId, endpointGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	endpointGroupId := params["endpointGroupId"]
	result, err := c.service.RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdGet(storageId, endpointGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	endpointGroupId := params["endpointGroupId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPatch(storageId, endpointGroupId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	endpointGroupId := params["endpointGroupId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPut(storageId, endpointGroupId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdEndpointGroupsGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdEndpointGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	result, err := c.service.RedfishV1StorageStorageIdEndpointGroupsGet(storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdEndpointGroupsPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdEndpointGroupsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdEndpointGroupsPost(storageId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete(storageId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet(storageId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch(storageId, fileSystemId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(storageId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(storageId, fileSystemId, capacitySourceId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(storageId, fileSystemId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(storageId, fileSystemId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(storageId, fileSystemId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(storageId, fileSystemId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(storageId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(storageId, fileSystemId, capacitySourceId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageId, fileSystemId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(storageId, fileSystemId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(storageId, fileSystemId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(storageId, fileSystemId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut(storageId, fileSystemId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesGet(storageId, fileSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdDelete(storageId, fileSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdGet(storageId, fileSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	fileSystemV122FileSystem := &openapi.FileSystemV122FileSystem{}
	if err := json.NewDecoder(r.Body).Decode(&fileSystemV122FileSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdPatch(storageId, fileSystemId, *fileSystemV122FileSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	fileSystemV122FileSystem := &openapi.FileSystemV122FileSystem{}
	if err := json.NewDecoder(r.Body).Decode(&fileSystemV122FileSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemIdPut(storageId, fileSystemId, *fileSystemV122FileSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete(storageId, fileSystemsId, exportedFileSharesId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet(storageId, fileSystemsId, exportedFileSharesId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	fileShareV120FileShare := &openapi.FileShareV120FileShare{}
	if err := json.NewDecoder(r.Body).Decode(&fileShareV120FileShare); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch(storageId, fileSystemsId, exportedFileSharesId, *fileShareV120FileShare)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	fileShareV120FileShare := &openapi.FileShareV120FileShare{}
	if err := json.NewDecoder(r.Body).Decode(&fileShareV120FileShare); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut(storageId, fileSystemsId, exportedFileSharesId, *fileShareV120FileShare)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemsId := params["fileSystemsId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesGet(storageId, fileSystemsId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemsId := params["fileSystemsId"]
	fileShareV120FileShare := &openapi.FileShareV120FileShare{}
	if err := json.NewDecoder(r.Body).Decode(&fileShareV120FileShare); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsFileSystemsIdExportedFileSharesPost(storageId, fileSystemsId, *fileShareV120FileShare)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	result, err := c.service.RedfishV1StorageStorageIdFileSystemsGet(storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdFileSystemsPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdFileSystemsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	fileSystemV122FileSystem := &openapi.FileSystemV122FileSystem{}
	if err := json.NewDecoder(r.Body).Decode(&fileSystemV122FileSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdFileSystemsPost(storageId, *fileSystemV122FileSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	result, err := c.service.RedfishV1StorageStorageIdGet(storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdPatch(storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdPut(storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStorageGroupsGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStorageGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	result, err := c.service.RedfishV1StorageStorageIdStorageGroupsGet(storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStorageGroupsPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStorageGroupsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStorageGroupsPost(storageId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storageGroupId := params["storageGroupId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost(storageId, storageGroupId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storageGroupId := params["storageGroupId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost(storageId, storageGroupId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStorageGroupsStorageGroupIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdStorageGroupsStorageGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storageGroupId := params["storageGroupId"]
	result, err := c.service.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdDelete(storageId, storageGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStorageGroupsStorageGroupIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStorageGroupsStorageGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storageGroupId := params["storageGroupId"]
	result, err := c.service.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdGet(storageId, storageGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStorageGroupsStorageGroupIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdStorageGroupsStorageGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storageGroupId := params["storageGroupId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdPatch(storageId, storageGroupId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStorageGroupsStorageGroupIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdStorageGroupsStorageGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storageGroupId := params["storageGroupId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStorageGroupsStorageGroupIdPut(storageId, storageGroupId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsGet(storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsPost(storageId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete(storageId, storagePoolId, allocatedPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet(storageId, storagePoolId, allocatedPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch(storageId, storagePoolId, allocatedPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut(storageId, storagePoolId, allocatedPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsGet(storageId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsPost(storageId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet(storageId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost(storageId, storagePoolId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageId, storagePoolId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageId, storagePoolId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageId, storagePoolId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageId, storagePoolId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost(storageId, storagePoolId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost(storageId, storagePoolId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageId, storagePoolId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost(storageId, storagePoolId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageId, storagePoolId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost(storageId, storagePoolId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageId, storagePoolId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete(storageId, storagePoolId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet(storageId, storagePoolId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch(storageId, storagePoolId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut(storageId, storagePoolId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete(storageId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet(storageId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch(storageId, storagePoolId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(storageId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(storageId, storagePoolId, capacitySourceId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete(storageId, storagePoolId, capacitySourceId, providingPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet(storageId, storagePoolId, capacitySourceId, providingPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch(storageId, storagePoolId, capacitySourceId, providingPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut(storageId, storagePoolId, capacitySourceId, providingPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(storageId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(storageId, storagePoolId, capacitySourceId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageId, storagePoolId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(storageId, storagePoolId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(storageId, storagePoolId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(storageId, storagePoolId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut(storageId, storagePoolId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesGet(storageId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdDelete(storageId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdGet(storageId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdPatch(storageId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdStoragePoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdStoragePoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdStoragePoolsStoragePoolIdPut(storageId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesGet(storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesPost(storageId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(storageId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(storageId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(storageId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsGet(storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsPost(storageId, volumeId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete(storageId, volumeId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet(storageId, volumeId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch(storageId, volumeId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut(storageId, volumeId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete(storageId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet(storageId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch(storageId, volumeId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(storageId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(storageId, volumeId, capacitySourceId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(storageId, volumeId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(storageId, volumeId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(storageId, volumeId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(storageId, volumeId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut(storageId, volumeId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesGet(storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdDelete(storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdGet(storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdPatch(storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdPut(storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsGet(storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsPost(storageId, volumeId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupExposeVolumesPost(storageId, volumeId, storageGroupId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdActionsStorageGroupHideVolumesPost(storageId, volumeId, storageGroupId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdDelete -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdDelete(storageId, volumeId, storageGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdGet -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdGet(storageId, volumeId, storageGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdPatch -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdPatch(storageId, volumeId, storageGroupId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdPut -
func (c *DefaultApiController) RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storageGroupId := params["storageGroupId"]
	storageGroupV150StorageGroup := &openapi.StorageGroupV150StorageGroup{}
	if err := json.NewDecoder(r.Body).Decode(&storageGroupV150StorageGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1StorageStorageIdVolumesVolumeIdStorageGroupsStorageGroupIdPut(storageId, volumeId, storageGroupId, *storageGroupV150StorageGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1StorageSystemsGet -
func (c *DefaultApiController) RedfishV1StorageSystemsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1StorageSystemsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	computerSystemV1130AddResourceBlockRequestBody := &openapi.ComputerSystemV1130AddResourceBlockRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130AddResourceBlockRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost(computerSystemId, *computerSystemV1130AddResourceBlockRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	computerSystemV1130RemoveResourceBlockRequestBody := &openapi.ComputerSystemV1130RemoveResourceBlockRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130RemoveResourceBlockRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost(computerSystemId, *computerSystemV1130RemoveResourceBlockRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	computerSystemV1130ResetRequestBody := &openapi.ComputerSystemV1130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost(computerSystemId, *computerSystemV1130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost(computerSystemId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBiosActionsBiosChangePasswordPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBiosActionsBiosChangePasswordPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	biosV111ChangePasswordRequestBody := &openapi.BiosV111ChangePasswordRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&biosV111ChangePasswordRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdBiosActionsBiosChangePasswordPost(computerSystemId, *biosV111ChangePasswordRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBiosActionsBiosResetBiosPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBiosActionsBiosResetBiosPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdBiosActionsBiosResetBiosPost(computerSystemId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBiosGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBiosGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdBiosGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBiosPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBiosPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	requestBody := &map[string]map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&requestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdBiosPatch(computerSystemId, *requestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBiosPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBiosPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	requestBody := &map[string]map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&requestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdBiosPut(computerSystemId, *requestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost(computerSystemId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost(computerSystemId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdDelete(computerSystemId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootCertificatesCertificateIdGet(computerSystemId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootCertificatesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootCertificatesGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootCertificatesPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdBootCertificatesPost(computerSystemId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDelete(computerSystemId, bootOptionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGet(computerSystemId, bootOptionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	bootOptionV104BootOption := &openapi.BootOptionV104BootOption{}
	if err := json.NewDecoder(r.Body).Decode(&bootOptionV104BootOption); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatch(computerSystemId, bootOptionId, *bootOptionV104BootOption)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	bootOptionId := params["bootOptionId"]
	bootOptionV104BootOption := &openapi.BootOptionV104BootOption{}
	if err := json.NewDecoder(r.Body).Decode(&bootOptionV104BootOption); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPut(computerSystemId, bootOptionId, *bootOptionV104BootOption)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootOptionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdBootOptionsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	bootOptionV104BootOption := &openapi.BootOptionV104BootOption{}
	if err := json.NewDecoder(r.Body).Decode(&bootOptionV104BootOption); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsPost(computerSystemId, *bootOptionV104BootOption)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdDelete(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet(computerSystemId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch(computerSystemId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	ethernetInterfaceV162EthernetInterface := &openapi.EthernetInterfaceV162EthernetInterface{}
	if err := json.NewDecoder(r.Body).Decode(&ethernetInterfaceV162EthernetInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut(computerSystemId, ethernetInterfaceId, *ethernetInterfaceV162EthernetInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet(computerSystemId, ethernetInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost(computerSystemId, ethernetInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	ethernetInterfaceId := params["ethernetInterfaceId"]
	vLanNetworkInterfaceId := params["vLanNetworkInterfaceId"]
	vLanNetworkInterfaceV115VLanNetworkInterface := &openapi.VLanNetworkInterfaceV115VLanNetworkInterface{}
	if err := json.NewDecoder(r.Body).Decode(&vLanNetworkInterfaceV115VLanNetworkInterface); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(computerSystemId, ethernetInterfaceId, vLanNetworkInterfaceId, *vLanNetworkInterfaceV115VLanNetworkInterface)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdEthernetInterfacesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdEthernetInterfacesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdEthernetInterfacesGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTGet(computerSystemId, fabricAdapterId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	mSDTId := params["mSDTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdDelete(computerSystemId, fabricAdapterId, mSDTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	mSDTId := params["mSDTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdGet(computerSystemId, fabricAdapterId, mSDTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	mSDTId := params["mSDTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPatch(computerSystemId, fabricAdapterId, mSDTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	mSDTId := params["mSDTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPut(computerSystemId, fabricAdapterId, mSDTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	mSDTId := params["mSDTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetGet(computerSystemId, fabricAdapterId, mSDTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	mSDTId := params["mSDTId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetPost(computerSystemId, fabricAdapterId, mSDTId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	mSDTId := params["mSDTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdDelete(computerSystemId, fabricAdapterId, mSDTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	mSDTId := params["mSDTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdGet(computerSystemId, fabricAdapterId, mSDTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	mSDTId := params["mSDTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPatch(computerSystemId, fabricAdapterId, mSDTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	mSDTId := params["mSDTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPut(computerSystemId, fabricAdapterId, mSDTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTPost(computerSystemId, fabricAdapterId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsGet(computerSystemId, fabricAdapterId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdActionsPortResetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdActionsPortResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	portV130ResetRequestBody := &openapi.PortV130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&portV130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdActionsPortResetPost(computerSystemId, fabricAdapterId, portId, *portV130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdGet(computerSystemId, fabricAdapterId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTGet(computerSystemId, fabricAdapterId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdDelete(computerSystemId, fabricAdapterId, portId, lPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdGet(computerSystemId, fabricAdapterId, portId, lPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPatch(computerSystemId, fabricAdapterId, portId, lPRTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPut(computerSystemId, fabricAdapterId, portId, lPRTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetGet(computerSystemId, fabricAdapterId, portId, lPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetPost(computerSystemId, fabricAdapterId, portId, lPRTId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete(computerSystemId, fabricAdapterId, portId, lPRTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet(computerSystemId, fabricAdapterId, portId, lPRTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch(computerSystemId, fabricAdapterId, portId, lPRTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	lPRTId := params["lPRTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut(computerSystemId, fabricAdapterId, portId, lPRTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTPost(computerSystemId, fabricAdapterId, portId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTGet(computerSystemId, fabricAdapterId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdDelete(computerSystemId, fabricAdapterId, portId, mPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdGet(computerSystemId, fabricAdapterId, portId, mPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPatch(computerSystemId, fabricAdapterId, portId, mPRTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPut(computerSystemId, fabricAdapterId, portId, mPRTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetGet(computerSystemId, fabricAdapterId, portId, mPRTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetPost(computerSystemId, fabricAdapterId, portId, mPRTId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete(computerSystemId, fabricAdapterId, portId, mPRTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet(computerSystemId, fabricAdapterId, portId, mPRTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch(computerSystemId, fabricAdapterId, portId, mPRTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	mPRTId := params["mPRTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut(computerSystemId, fabricAdapterId, portId, mPRTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTPost(computerSystemId, fabricAdapterId, portId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMetricsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMetricsGet(computerSystemId, fabricAdapterId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPatch(computerSystemId, fabricAdapterId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPut(computerSystemId, fabricAdapterId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTGet(computerSystemId, fabricAdapterId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTPost(computerSystemId, fabricAdapterId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	sSDTId := params["sSDTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdDelete(computerSystemId, fabricAdapterId, sSDTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	sSDTId := params["sSDTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdGet(computerSystemId, fabricAdapterId, sSDTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	sSDTId := params["sSDTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPatch(computerSystemId, fabricAdapterId, sSDTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	sSDTId := params["sSDTId"]
	routeEntryV100RouteEntry := &openapi.RouteEntryV100RouteEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeEntryV100RouteEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPut(computerSystemId, fabricAdapterId, sSDTId, *routeEntryV100RouteEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	sSDTId := params["sSDTId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetGet(computerSystemId, fabricAdapterId, sSDTId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	sSDTId := params["sSDTId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetPost(computerSystemId, fabricAdapterId, sSDTId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	sSDTId := params["sSDTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdDelete(computerSystemId, fabricAdapterId, sSDTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	sSDTId := params["sSDTId"]
	routeId := params["routeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdGet(computerSystemId, fabricAdapterId, sSDTId, routeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	sSDTId := params["sSDTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPatch(computerSystemId, fabricAdapterId, sSDTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	fabricAdapterId := params["fabricAdapterId"]
	sSDTId := params["sSDTId"]
	routeId := params["routeId"]
	routeSetEntryV100RouteSetEntry := &openapi.RouteSetEntryV100RouteSetEntry{}
	if err := json.NewDecoder(r.Body).Decode(&routeSetEntryV100RouteSetEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPut(computerSystemId, fabricAdapterId, sSDTId, routeId, *routeSetEntryV100RouteSetEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdFabricAdaptersGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdFabricAdaptersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdFabricAdaptersGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdHostedServicesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdHostedServicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdHostedServicesGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdHostedServicesPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdHostedServicesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageServiceV150StorageService := &openapi.StorageServiceV150StorageService{}
	if err := json.NewDecoder(r.Body).Decode(&storageServiceV150StorageService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdHostedServicesPost(computerSystemId, *storageServiceV150StorageService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdLogServicesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdLogServicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdLogServicesGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost(computerSystemId, logServiceId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logServiceV120CollectDiagnosticDataRequestBody := &openapi.LogServiceV120CollectDiagnosticDataRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120CollectDiagnosticDataRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(computerSystemId, logServiceId, *logServiceV120CollectDiagnosticDataRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesGet(computerSystemId, logServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete(computerSystemId, logServiceId, logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet(computerSystemId, logServiceId, logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logEntryV170LogEntry := &openapi.LogEntryV170LogEntry{}
	if err := json.NewDecoder(r.Body).Decode(&logEntryV170LogEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesPost(computerSystemId, logServiceId, *logEntryV170LogEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdGet(computerSystemId, logServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdPatch(computerSystemId, logServiceId, *logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	logServiceId := params["logServiceId"]
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdLogServicesLogServiceIdPut(computerSystemId, logServiceId, *logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryDomainsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet(computerSystemId, memoryDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet(computerSystemId, memoryDomainId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(computerSystemId, memoryDomainId, memoryChunksId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(computerSystemId, memoryDomainId, memoryChunksId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(computerSystemId, memoryDomainId, memoryChunksId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksId := params["memoryChunksId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(computerSystemId, memoryDomainId, memoryChunksId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryDomainId := params["memoryDomainId"]
	memoryChunksV140MemoryChunks := &openapi.MemoryChunksV140MemoryChunks{}
	if err := json.NewDecoder(r.Body).Decode(&memoryChunksV140MemoryChunks); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost(computerSystemId, memoryDomainId, *memoryChunksV140MemoryChunks)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100DisablePassphraseRequestBody := &openapi.MemoryV1100DisablePassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100DisablePassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(computerSystemId, memoryId, *memoryV1100DisablePassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100OverwriteUnitRequestBody := &openapi.MemoryV1100OverwriteUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100OverwriteUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(computerSystemId, memoryId, *memoryV1100OverwriteUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100ResetRequestBody := &openapi.MemoryV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost(computerSystemId, memoryId, *memoryV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100SecureEraseUnitRequestBody := &openapi.MemoryV1100SecureEraseUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SecureEraseUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(computerSystemId, memoryId, *memoryV1100SecureEraseUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100SetPassphraseRequestBody := &openapi.MemoryV1100SetPassphraseRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100SetPassphraseRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost(computerSystemId, memoryId, *memoryV1100SetPassphraseRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100UnlockUnitRequestBody := &openapi.MemoryV1100UnlockUnitRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100UnlockUnitRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost(computerSystemId, memoryId, *memoryV1100UnlockUnitRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyGet(computerSystemId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPatch(computerSystemId, memoryId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPut(computerSystemId, memoryId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdGet(computerSystemId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(computerSystemId, memoryId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet(computerSystemId, memoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdPatch(computerSystemId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemoryMemoryIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemoryMemoryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	memoryId := params["memoryId"]
	memoryV1100Memory := &openapi.MemoryV1100Memory{}
	if err := json.NewDecoder(r.Body).Decode(&memoryV1100Memory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemoryMemoryIdPut(computerSystemId, memoryId, *memoryV1100Memory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(computerSystemId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdNetworkInterfacesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdNetworkInterfacesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdNetworkInterfacesGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet(computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	networkInterfaceId := params["networkInterfaceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet(computerSystemId, networkInterfaceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdOperatingConfigsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdOperatingConfigsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdOperatingConfigsGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdPCIeDevicesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdPCIeDevicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdPCIeDevicesGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyGet(computerSystemId, pCIeDeviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPatch(computerSystemId, pCIeDeviceId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPut(computerSystemId, pCIeDeviceId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet(computerSystemId, pCIeDeviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(computerSystemId, pCIeDeviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pCIeFunctionId := params["pCIeFunctionId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(computerSystemId, pCIeDeviceId, pCIeFunctionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pcIeDeviceV150PcIeDevice := &openapi.PcIeDeviceV150PcIeDevice{}
	if err := json.NewDecoder(r.Body).Decode(&pcIeDeviceV150PcIeDevice); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch(computerSystemId, pCIeDeviceId, *pcIeDeviceV150PcIeDevice)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	pCIeDeviceId := params["pCIeDeviceId"]
	pcIeDeviceV150PcIeDevice := &openapi.PcIeDeviceV150PcIeDevice{}
	if err := json.NewDecoder(r.Body).Decode(&pcIeDeviceV150PcIeDevice); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut(computerSystemId, pCIeDeviceId, *pcIeDeviceV150PcIeDevice)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	computerSystemV1130ComputerSystem := &openapi.ComputerSystemV1130ComputerSystem{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130ComputerSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdPatch(computerSystemId, *computerSystemV1130ComputerSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorSummaryProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorSummaryProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorSummaryProcessorMetricsGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	accelerationFunctionId := params["accelerationFunctionId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(computerSystemId, processorId, accelerationFunctionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet(computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorV1100ResetRequestBody := &openapi.ProcessorV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost(computerSystemId, processorId, *processorV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyGet(computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch(computerSystemId, processorId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPut(computerSystemId, processorId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdGet(computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsGet(computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsOperatingConfigIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsOperatingConfigIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	operatingConfigId := params["operatingConfigId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsOperatingConfigIdGet(computerSystemId, processorId, operatingConfigId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdPatch(computerSystemId, processorId, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet(computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdPut(computerSystemId, processorId, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet(computerSystemId, processorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100ResetRequestBody := &openapi.ProcessorV1100ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(computerSystemId, processorId, processorId2, *processorV1100ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(computerSystemId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(computerSystemId, processorId, processorId2, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(computerSystemId, processorId, processorId2, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get(computerSystemId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(computerSystemId, processorId, processorId2, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(computerSystemId, processorId, processorId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	processorId := params["processorId"]
	processorId2 := params["processorId2"]
	processorV1100Processor := &openapi.ProcessorV1100Processor{}
	if err := json.NewDecoder(r.Body).Decode(&processorV1100Processor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put(computerSystemId, processorId, processorId2, *processorV1100Processor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	computerSystemV1130ComputerSystem := &openapi.ComputerSystemV1130ComputerSystem{}
	if err := json.NewDecoder(r.Body).Decode(&computerSystemV1130ComputerSystem); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdPut(computerSystemId, *computerSystemV1130ComputerSystem)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	secureBootV110ResetKeysRequestBody := &openapi.SecureBootV110ResetKeysRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootV110ResetKeysRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost(computerSystemId, *secureBootV110ResetKeysRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	secureBootV110SecureBoot := &openapi.SecureBootV110SecureBoot{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootV110SecureBoot); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootPatch(computerSystemId, *secureBootV110SecureBoot)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	secureBootV110SecureBoot := &openapi.SecureBootV110SecureBoot{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootV110SecureBoot); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootPut(computerSystemId, *secureBootV110SecureBoot)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	secureBootDatabaseV100ResetKeysRequestBody := &openapi.SecureBootDatabaseV100ResetKeysRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&secureBootDatabaseV100ResetKeysRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost(computerSystemId, databaseId, *secureBootDatabaseV100ResetKeysRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	certificateV121RekeyRequestBody := &openapi.CertificateV121RekeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RekeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost(computerSystemId, databaseId, certificateId, *certificateV121RekeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	certificateV121RenewRequestBody := &openapi.CertificateV121RenewRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121RenewRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost(computerSystemId, databaseId, certificateId, *certificateV121RenewRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete(computerSystemId, databaseId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateId := params["certificateId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet(computerSystemId, databaseId, certificateId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet(computerSystemId, databaseId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	certificateV121Certificate := &openapi.CertificateV121Certificate{}
	if err := json.NewDecoder(r.Body).Decode(&certificateV121Certificate); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost(computerSystemId, databaseId, *certificateV121Certificate)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet(computerSystemId, databaseId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet(computerSystemId, databaseId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	signatureV101Signature := &openapi.SignatureV101Signature{}
	if err := json.NewDecoder(r.Body).Decode(&signatureV101Signature); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost(computerSystemId, databaseId, *signatureV101Signature)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	signatureId := params["signatureId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete(computerSystemId, databaseId, signatureId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	databaseId := params["databaseId"]
	signatureId := params["signatureId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet(computerSystemId, databaseId, signatureId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSimpleStorageGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSimpleStorageGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdSimpleStorageGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdSimpleStorageSimpleStorageIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdSimpleStorageSimpleStorageIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	simpleStorageId := params["simpleStorageId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdSimpleStorageSimpleStorageIdGet(computerSystemId, simpleStorageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageServicesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageServicesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageServicesGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageServicesPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageServicesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageServiceV150StorageService := &openapi.StorageServiceV150StorageService{}
	if err := json.NewDecoder(r.Body).Decode(&storageServiceV150StorageService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageServicesPost(computerSystemId, *storageServiceV150StorageService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdActionsStorageServiceSetEncryptionKeyPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdActionsStorageServiceSetEncryptionKeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageServiceId := params["storageServiceId"]
	storageServiceV150SetEncryptionKeyRequestBody := &openapi.StorageServiceV150SetEncryptionKeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&storageServiceV150SetEncryptionKeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdActionsStorageServiceSetEncryptionKeyPost(computerSystemId, storageServiceId, *storageServiceV150SetEncryptionKeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdDelete(computerSystemId, storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageServiceId := params["storageServiceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdGet(computerSystemId, storageServiceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageServiceId := params["storageServiceId"]
	storageServiceV150StorageService := &openapi.StorageServiceV150StorageService{}
	if err := json.NewDecoder(r.Body).Decode(&storageServiceV150StorageService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdPatch(computerSystemId, storageServiceId, *storageServiceV150StorageService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageServiceId := params["storageServiceId"]
	storageServiceV150StorageService := &openapi.StorageServiceV150StorageService{}
	if err := json.NewDecoder(r.Body).Decode(&storageServiceV150StorageService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageServicesStorageServiceIdPut(computerSystemId, storageServiceId, *storageServiceV150StorageService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageV190SetEncryptionKeyRequestBody := &openapi.StorageV190SetEncryptionKeyRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190SetEncryptionKeyRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost(computerSystemId, storageId, *storageV190SetEncryptionKeyRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyGet(computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyPatch(computerSystemId, storageId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdAssemblyPut(computerSystemId, storageId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101AssignReplicaTargetRequestBody := &openapi.ConsistencyGroupV101AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupAssignReplicaTargetPost(computerSystemId, storageId, consistencyGroupId, *consistencyGroupV101AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101CreateReplicaTargetRequestBody := &openapi.ConsistencyGroupV101CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupCreateReplicaTargetPost(computerSystemId, storageId, consistencyGroupId, *consistencyGroupV101CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101RemoveReplicaRelationshipRequestBody := &openapi.ConsistencyGroupV101RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupRemoveReplicaRelationshipPost(computerSystemId, storageId, consistencyGroupId, *consistencyGroupV101RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ResumeReplicationRequestBody := &openapi.ConsistencyGroupV101ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupResumeReplicationPost(computerSystemId, storageId, consistencyGroupId, *consistencyGroupV101ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ReverseReplicationRelationshipRequestBody := &openapi.ConsistencyGroupV101ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupReverseReplicationRelationshipPost(computerSystemId, storageId, consistencyGroupId, *consistencyGroupV101ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101SplitReplicationRequestBody := &openapi.ConsistencyGroupV101SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSplitReplicationPost(computerSystemId, storageId, consistencyGroupId, *consistencyGroupV101SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101SuspendReplicationRequestBody := &openapi.ConsistencyGroupV101SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdActionsConsistencyGroupSuspendReplicationPost(computerSystemId, storageId, consistencyGroupId, *consistencyGroupV101SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdDelete(computerSystemId, storageId, consistencyGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdGet(computerSystemId, storageId, consistencyGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ConsistencyGroup := &openapi.ConsistencyGroupV101ConsistencyGroup{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ConsistencyGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdPatch(computerSystemId, storageId, consistencyGroupId, *consistencyGroupV101ConsistencyGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	consistencyGroupV101ConsistencyGroup := &openapi.ConsistencyGroupV101ConsistencyGroup{}
	if err := json.NewDecoder(r.Body).Decode(&consistencyGroupV101ConsistencyGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdPut(computerSystemId, storageId, consistencyGroupId, *consistencyGroupV101ConsistencyGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet(computerSystemId, storageId, consistencyGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost(computerSystemId, storageId, consistencyGroupId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(computerSystemId, storageId, consistencyGroupId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(computerSystemId, storageId, consistencyGroupId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(computerSystemId, storageId, consistencyGroupId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(computerSystemId, storageId, consistencyGroupId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost(computerSystemId, storageId, consistencyGroupId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost(computerSystemId, storageId, consistencyGroupId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(computerSystemId, storageId, consistencyGroupId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost(computerSystemId, storageId, consistencyGroupId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(computerSystemId, storageId, consistencyGroupId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost(computerSystemId, storageId, consistencyGroupId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(computerSystemId, storageId, consistencyGroupId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete(computerSystemId, storageId, consistencyGroupId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet(computerSystemId, storageId, consistencyGroupId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch(computerSystemId, storageId, consistencyGroupId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	consistencyGroupId := params["consistencyGroupId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut(computerSystemId, storageId, consistencyGroupId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsGet(computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdGet(computerSystemId, storageId, controllerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch(computerSystemId, storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	controllerId := params["controllerId"]
	storageControllerV100StorageController := &openapi.StorageControllerV100StorageController{}
	if err := json.NewDecoder(r.Body).Decode(&storageControllerV100StorageController); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPut(computerSystemId, storageId, controllerId, *storageControllerV100StorageController)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdControllersGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdControllersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdControllersGet(computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110ResetRequestBody := &openapi.DriveV1110ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(computerSystemId, storageId, driveId, *driveV1110ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(computerSystemId, storageId, driveId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet(computerSystemId, storageId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch(computerSystemId, storageId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	assemblyV130Assembly := &openapi.AssemblyV130Assembly{}
	if err := json.NewDecoder(r.Body).Decode(&assemblyV130Assembly); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut(computerSystemId, storageId, driveId, *assemblyV130Assembly)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet(computerSystemId, storageId, driveId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch(computerSystemId, storageId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	driveId := params["driveId"]
	driveV1110Drive := &openapi.DriveV1110Drive{}
	if err := json.NewDecoder(r.Body).Decode(&driveV1110Drive); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut(computerSystemId, storageId, driveId, *driveV1110Drive)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	endpointGroupId := params["endpointGroupId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdDelete(computerSystemId, storageId, endpointGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	endpointGroupId := params["endpointGroupId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdGet(computerSystemId, storageId, endpointGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	endpointGroupId := params["endpointGroupId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPatch(computerSystemId, storageId, endpointGroupId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	endpointGroupId := params["endpointGroupId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPut(computerSystemId, storageId, endpointGroupId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsGet(computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	endpointGroupV130EndpointGroup := &openapi.EndpointGroupV130EndpointGroup{}
	if err := json.NewDecoder(r.Body).Decode(&endpointGroupV130EndpointGroup); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsPost(computerSystemId, storageId, *endpointGroupV130EndpointGroup)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdDelete(computerSystemId, storageId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdGet(computerSystemId, storageId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPatch(computerSystemId, storageId, fileSystemId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(computerSystemId, storageId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(computerSystemId, storageId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(computerSystemId, storageId, fileSystemId, capacitySourceId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(computerSystemId, storageId, fileSystemId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(computerSystemId, storageId, fileSystemId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(computerSystemId, storageId, fileSystemId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(computerSystemId, storageId, fileSystemId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(computerSystemId, storageId, fileSystemId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(computerSystemId, storageId, fileSystemId, capacitySourceId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdPut(computerSystemId, storageId, fileSystemId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	fileSystemId := params["fileSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesGet(computerSystemId, storageId, fileSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdGet(computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdPatch(computerSystemId, storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageV190Storage := &openapi.StorageV190Storage{}
	if err := json.NewDecoder(r.Body).Decode(&storageV190Storage); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdPut(computerSystemId, storageId, *storageV190Storage)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130ResetRequestBody := &openapi.PortV130ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&portV130ResetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(computerSystemId, storageId, storageControllerId, portId, *portV130ResetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(computerSystemId, storageId, storageControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(computerSystemId, storageId, storageControllerId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(computerSystemId, storageId, storageControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerId := params["storageControllerId"]
	portId := params["portId"]
	portV130Port := &openapi.PortV130Port{}
	if err := json.NewDecoder(r.Body).Decode(&portV130Port); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(computerSystemId, storageId, storageControllerId, portId, *portV130Port)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storageControllerMemberId := params["storageControllerMemberId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerMemberIdPortsGet(computerSystemId, storageId, storageControllerMemberId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsGet(computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsPost(computerSystemId, storageId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdDelete(computerSystemId, storageId, storagePoolId, allocatedPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdGet(computerSystemId, storageId, storagePoolId, allocatedPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPatch(computerSystemId, storageId, storagePoolId, allocatedPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	allocatedPoolId := params["allocatedPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsAllocatedPoolIdPut(computerSystemId, storageId, storagePoolId, allocatedPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsGet(computerSystemId, storageId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedPoolsPost(computerSystemId, storageId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet(computerSystemId, storageId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost(computerSystemId, storageId, storagePoolId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(computerSystemId, storageId, storagePoolId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(computerSystemId, storageId, storagePoolId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost(computerSystemId, storageId, storagePoolId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(computerSystemId, storageId, storagePoolId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost(computerSystemId, storageId, storagePoolId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost(computerSystemId, storageId, storagePoolId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(computerSystemId, storageId, storagePoolId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost(computerSystemId, storageId, storagePoolId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(computerSystemId, storageId, storagePoolId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost(computerSystemId, storageId, storagePoolId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost(computerSystemId, storageId, storagePoolId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete(computerSystemId, storageId, storagePoolId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet(computerSystemId, storageId, storagePoolId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch(computerSystemId, storageId, storagePoolId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut(computerSystemId, storageId, storagePoolId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdDelete(computerSystemId, storageId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdGet(computerSystemId, storageId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPatch(computerSystemId, storageId, storagePoolId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(computerSystemId, storageId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(computerSystemId, storageId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(computerSystemId, storageId, storagePoolId, capacitySourceId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdDelete(computerSystemId, storageId, storagePoolId, capacitySourceId, providingPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdGet(computerSystemId, storageId, storagePoolId, capacitySourceId, providingPoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPatch(computerSystemId, storageId, storagePoolId, capacitySourceId, providingPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	providingPoolId := params["providingPoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingPoolsProvidingPoolIdPut(computerSystemId, storageId, storagePoolId, capacitySourceId, providingPoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(computerSystemId, storageId, storagePoolId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(computerSystemId, storageId, storagePoolId, capacitySourceId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdPut(computerSystemId, storageId, storagePoolId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesGet(computerSystemId, storageId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdDelete(computerSystemId, storageId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdGet(computerSystemId, storageId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdPatch(computerSystemId, storageId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdPut(computerSystemId, storageId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesGet(computerSystemId, storageId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesPost(computerSystemId, storageId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161AssignReplicaTargetRequestBody := &openapi.VolumeV161AssignReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161AssignReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(computerSystemId, storageId, volumeId, *volumeV161AssignReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ChangeRaidLayoutRequestBody := &openapi.VolumeV161ChangeRaidLayoutRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ChangeRaidLayoutRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(computerSystemId, storageId, volumeId, *volumeV161ChangeRaidLayoutRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(computerSystemId, storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161CreateReplicaTargetRequestBody := &openapi.VolumeV161CreateReplicaTargetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161CreateReplicaTargetRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(computerSystemId, storageId, volumeId, *volumeV161CreateReplicaTargetRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(computerSystemId, storageId, volumeId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161InitializeRequestBody := &openapi.VolumeV161InitializeRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161InitializeRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(computerSystemId, storageId, volumeId, *volumeV161InitializeRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161RemoveReplicaRelationshipRequestBody := &openapi.VolumeV161RemoveReplicaRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161RemoveReplicaRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(computerSystemId, storageId, volumeId, *volumeV161RemoveReplicaRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ResumeReplicationRequestBody := &openapi.VolumeV161ResumeReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ResumeReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(computerSystemId, storageId, volumeId, *volumeV161ResumeReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161ReverseReplicationRelationshipRequestBody := &openapi.VolumeV161ReverseReplicationRelationshipRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161ReverseReplicationRelationshipRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(computerSystemId, storageId, volumeId, *volumeV161ReverseReplicationRelationshipRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SplitReplicationRequestBody := &openapi.VolumeV161SplitReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SplitReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(computerSystemId, storageId, volumeId, *volumeV161SplitReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161SuspendReplicationRequestBody := &openapi.VolumeV161SuspendReplicationRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161SuspendReplicationRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(computerSystemId, storageId, volumeId, *volumeV161SuspendReplicationRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsGet(computerSystemId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsPost(computerSystemId, storageId, volumeId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdDelete(computerSystemId, storageId, volumeId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdGet(computerSystemId, storageId, volumeId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPatch(computerSystemId, storageId, volumeId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdAllocatedPoolsStoragePoolIdPut(computerSystemId, storageId, volumeId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdDelete(computerSystemId, storageId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdGet(computerSystemId, storageId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPatch(computerSystemId, storageId, volumeId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(computerSystemId, storageId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsGet(computerSystemId, storageId, volumeId, capacitySourceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsPost(computerSystemId, storageId, volumeId, capacitySourceId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdDelete(computerSystemId, storageId, volumeId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdGet(computerSystemId, storageId, volumeId, capacitySourceId, storagePoolId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPatch(computerSystemId, storageId, volumeId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	storagePoolId := params["storagePoolId"]
	storagePoolV150StoragePool := &openapi.StoragePoolV150StoragePool{}
	if err := json.NewDecoder(r.Body).Decode(&storagePoolV150StoragePool); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingPoolsStoragePoolIdPut(computerSystemId, storageId, volumeId, capacitySourceId, storagePoolId, *storagePoolV150StoragePool)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	capacitySourceId := params["capacitySourceId"]
	capacityV120CapacitySource := &openapi.CapacityV120CapacitySource{}
	if err := json.NewDecoder(r.Body).Decode(&capacityV120CapacitySource); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdPut(computerSystemId, storageId, volumeId, capacitySourceId, *capacityV120CapacitySource)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesGet(computerSystemId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete(computerSystemId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet(computerSystemId, storageId, volumeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch(computerSystemId, storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	storageId := params["storageId"]
	volumeId := params["volumeId"]
	volumeV161Volume := &openapi.VolumeV161Volume{}
	if err := json.NewDecoder(r.Body).Decode(&volumeV161Volume); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut(computerSystemId, storageId, volumeId, *volumeV161Volume)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdVirtualMediaGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaGet(computerSystemId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(computerSystemId, virtualMediaId, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132InsertMediaRequestBody := &openapi.VirtualMediaV132InsertMediaRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132InsertMediaRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(computerSystemId, virtualMediaId, *virtualMediaV132InsertMediaRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGet(computerSystemId, virtualMediaId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132VirtualMedia := &openapi.VirtualMediaV132VirtualMedia{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132VirtualMedia); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch(computerSystemId, virtualMediaId, *virtualMediaV132VirtualMedia)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemId := params["computerSystemId"]
	virtualMediaId := params["virtualMediaId"]
	virtualMediaV132VirtualMedia := &openapi.VirtualMediaV132VirtualMedia{}
	if err := json.NewDecoder(r.Body).Decode(&virtualMediaV132VirtualMedia); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPut(computerSystemId, virtualMediaId, *virtualMediaV132VirtualMedia)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemsId := params["computerSystemsId"]
	storageId := params["storageId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	result, err := c.service.RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdDelete(computerSystemsId, storageId, fileSystemsId, exportedFileSharesId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemsId := params["computerSystemsId"]
	storageId := params["storageId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	result, err := c.service.RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdGet(computerSystemsId, storageId, fileSystemsId, exportedFileSharesId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemsId := params["computerSystemsId"]
	storageId := params["storageId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	fileShareV120FileShare := &openapi.FileShareV120FileShare{}
	if err := json.NewDecoder(r.Body).Decode(&fileShareV120FileShare); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPatch(computerSystemsId, storageId, fileSystemsId, exportedFileSharesId, *fileShareV120FileShare)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut -
func (c *DefaultApiController) RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemsId := params["computerSystemsId"]
	storageId := params["storageId"]
	fileSystemsId := params["fileSystemsId"]
	exportedFileSharesId := params["exportedFileSharesId"]
	fileShareV120FileShare := &openapi.FileShareV120FileShare{}
	if err := json.NewDecoder(r.Body).Decode(&fileShareV120FileShare); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsComputerSystemsIdStorageStorageIdFileSystemsFileSystemsIdExportedFileSharesExportedFileSharesIdPut(computerSystemsId, storageId, fileSystemsId, exportedFileSharesId, *fileShareV120FileShare)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsGet -
func (c *DefaultApiController) RedfishV1SystemsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1SystemsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdGet -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdGet(systemId, fabricAdapterId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPatch -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	fabricAdapterV100FabricAdapter := &openapi.FabricAdapterV100FabricAdapter{}
	if err := json.NewDecoder(r.Body).Decode(&fabricAdapterV100FabricAdapter); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPatch(systemId, fabricAdapterId, *fabricAdapterV100FabricAdapter)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATGet -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATGet(systemId, fabricAdapterId, portId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATPost -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATPost(systemId, fabricAdapterId, portId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdDelete -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	vCATEntryId := params["vCATEntryId"]
	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdDelete(systemId, fabricAdapterId, portId, vCATEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdGet -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	vCATEntryId := params["vCATEntryId"]
	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdGet(systemId, fabricAdapterId, portId, vCATEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPatch -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	vCATEntryId := params["vCATEntryId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPatch(systemId, fabricAdapterId, portId, vCATEntryId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPut -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	portId := params["portId"]
	vCATEntryId := params["vCATEntryId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPut(systemId, fabricAdapterId, portId, vCATEntryId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPut -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	fabricAdapterV100FabricAdapter := &openapi.FabricAdapterV100FabricAdapter{}
	if err := json.NewDecoder(r.Body).Decode(&fabricAdapterV100FabricAdapter); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPut(systemId, fabricAdapterId, *fabricAdapterV100FabricAdapter)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATGet -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATGet(systemId, fabricAdapterId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATPost -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATPost(systemId, fabricAdapterId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdDelete -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	vCATEntryId := params["vCATEntryId"]
	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdDelete(systemId, fabricAdapterId, vCATEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdGet -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	vCATEntryId := params["vCATEntryId"]
	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdGet(systemId, fabricAdapterId, vCATEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPatch -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	vCATEntryId := params["vCATEntryId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPatch(systemId, fabricAdapterId, vCATEntryId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPut -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	vCATEntryId := params["vCATEntryId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPut(systemId, fabricAdapterId, vCATEntryId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATGet -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATGet(systemId, fabricAdapterId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATPost -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATPost(systemId, fabricAdapterId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdDelete -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	vCATEntryId := params["vCATEntryId"]
	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdDelete(systemId, fabricAdapterId, vCATEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdGet -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	vCATEntryId := params["vCATEntryId"]
	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdGet(systemId, fabricAdapterId, vCATEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPatch -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	vCATEntryId := params["vCATEntryId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPatch(systemId, fabricAdapterId, vCATEntryId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPut -
func (c *DefaultApiController) RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	systemId := params["systemId"]
	fabricAdapterId := params["fabricAdapterId"]
	vCATEntryId := params["vCATEntryId"]
	vcatEntryV101VcatEntry := &openapi.VcatEntryV101VcatEntry{}
	if err := json.NewDecoder(r.Body).Decode(&vcatEntryV101VcatEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPut(systemId, fabricAdapterId, vCATEntryId, *vcatEntryV101VcatEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TaskServiceGet -
func (c *DefaultApiController) RedfishV1TaskServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1TaskServiceGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TaskServicePatch -
func (c *DefaultApiController) RedfishV1TaskServicePatch(w http.ResponseWriter, r *http.Request) {
	taskServiceV115TaskService := &openapi.TaskServiceV115TaskService{}
	if err := json.NewDecoder(r.Body).Decode(&taskServiceV115TaskService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TaskServicePatch(*taskServiceV115TaskService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TaskServicePut -
func (c *DefaultApiController) RedfishV1TaskServicePut(w http.ResponseWriter, r *http.Request) {
	taskServiceV115TaskService := &openapi.TaskServiceV115TaskService{}
	if err := json.NewDecoder(r.Body).Decode(&taskServiceV115TaskService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TaskServicePut(*taskServiceV115TaskService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TaskServiceTasksGet -
func (c *DefaultApiController) RedfishV1TaskServiceTasksGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1TaskServiceTasksGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TaskServiceTasksTaskIdDelete -
func (c *DefaultApiController) RedfishV1TaskServiceTasksTaskIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskId := params["taskId"]
	result, err := c.service.RedfishV1TaskServiceTasksTaskIdDelete(taskId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TaskServiceTasksTaskIdGet -
func (c *DefaultApiController) RedfishV1TaskServiceTasksTaskIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskId := params["taskId"]
	result, err := c.service.RedfishV1TaskServiceTasksTaskIdGet(taskId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TaskServiceTasksTaskIdSubTasksGet -
func (c *DefaultApiController) RedfishV1TaskServiceTasksTaskIdSubTasksGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskId := params["taskId"]
	result, err := c.service.RedfishV1TaskServiceTasksTaskIdSubTasksGet(taskId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TaskServiceTasksTaskIdSubTasksTaskId2Delete -
func (c *DefaultApiController) RedfishV1TaskServiceTasksTaskIdSubTasksTaskId2Delete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskId := params["taskId"]
	taskId2 := params["taskId2"]
	result, err := c.service.RedfishV1TaskServiceTasksTaskIdSubTasksTaskId2Delete(taskId, taskId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TaskServiceTasksTaskIdSubTasksTaskId2Get -
func (c *DefaultApiController) RedfishV1TaskServiceTasksTaskIdSubTasksTaskId2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskId := params["taskId"]
	taskId2 := params["taskId2"]
	result, err := c.service.RedfishV1TaskServiceTasksTaskIdSubTasksTaskId2Get(taskId, taskId2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceActionsTelemetryServiceSubmitTestMetricReportPost -
func (c *DefaultApiController) RedfishV1TelemetryServiceActionsTelemetryServiceSubmitTestMetricReportPost(w http.ResponseWriter, r *http.Request) {
	telemetryServiceV121SubmitTestMetricReportRequestBody := &openapi.TelemetryServiceV121SubmitTestMetricReportRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&telemetryServiceV121SubmitTestMetricReportRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceActionsTelemetryServiceSubmitTestMetricReportPost(*telemetryServiceV121SubmitTestMetricReportRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1TelemetryServiceGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceLogServiceActionsLogServiceClearLogPost -
func (c *DefaultApiController) RedfishV1TelemetryServiceLogServiceActionsLogServiceClearLogPost(w http.ResponseWriter, r *http.Request) {
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceLogServiceActionsLogServiceClearLogPost(*body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceLogServiceActionsLogServiceCollectDiagnosticDataPost -
func (c *DefaultApiController) RedfishV1TelemetryServiceLogServiceActionsLogServiceCollectDiagnosticDataPost(w http.ResponseWriter, r *http.Request) {
	logServiceV120CollectDiagnosticDataRequestBody := &openapi.LogServiceV120CollectDiagnosticDataRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120CollectDiagnosticDataRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceLogServiceActionsLogServiceCollectDiagnosticDataPost(*logServiceV120CollectDiagnosticDataRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceLogServiceEntriesGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceLogServiceEntriesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1TelemetryServiceLogServiceEntriesGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceLogServiceEntriesLogEntryIdDelete -
func (c *DefaultApiController) RedfishV1TelemetryServiceLogServiceEntriesLogEntryIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1TelemetryServiceLogServiceEntriesLogEntryIdDelete(logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceLogServiceEntriesLogEntryIdGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceLogServiceEntriesLogEntryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	logEntryId := params["logEntryId"]
	result, err := c.service.RedfishV1TelemetryServiceLogServiceEntriesLogEntryIdGet(logEntryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceLogServiceEntriesPost -
func (c *DefaultApiController) RedfishV1TelemetryServiceLogServiceEntriesPost(w http.ResponseWriter, r *http.Request) {
	logEntryV170LogEntry := &openapi.LogEntryV170LogEntry{}
	if err := json.NewDecoder(r.Body).Decode(&logEntryV170LogEntry); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceLogServiceEntriesPost(*logEntryV170LogEntry)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceLogServiceGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceLogServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1TelemetryServiceLogServiceGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceLogServicePatch -
func (c *DefaultApiController) RedfishV1TelemetryServiceLogServicePatch(w http.ResponseWriter, r *http.Request) {
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceLogServicePatch(*logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceLogServicePut -
func (c *DefaultApiController) RedfishV1TelemetryServiceLogServicePut(w http.ResponseWriter, r *http.Request) {
	logServiceV120LogService := &openapi.LogServiceV120LogService{}
	if err := json.NewDecoder(r.Body).Decode(&logServiceV120LogService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceLogServicePut(*logServiceV120LogService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricDefinitionsGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricDefinitionsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1TelemetryServiceMetricDefinitionsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdDelete -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	metricDefinitionId := params["metricDefinitionId"]
	result, err := c.service.RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdDelete(metricDefinitionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	metricDefinitionId := params["metricDefinitionId"]
	result, err := c.service.RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdGet(metricDefinitionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPatch -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	metricDefinitionId := params["metricDefinitionId"]
	metricDefinitionV110MetricDefinition := &openapi.MetricDefinitionV110MetricDefinition{}
	if err := json.NewDecoder(r.Body).Decode(&metricDefinitionV110MetricDefinition); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPatch(metricDefinitionId, *metricDefinitionV110MetricDefinition)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPut -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	metricDefinitionId := params["metricDefinitionId"]
	metricDefinitionV110MetricDefinition := &openapi.MetricDefinitionV110MetricDefinition{}
	if err := json.NewDecoder(r.Body).Decode(&metricDefinitionV110MetricDefinition); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPut(metricDefinitionId, *metricDefinitionV110MetricDefinition)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricDefinitionsPost -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricDefinitionsPost(w http.ResponseWriter, r *http.Request) {
	metricDefinitionV110MetricDefinition := &openapi.MetricDefinitionV110MetricDefinition{}
	if err := json.NewDecoder(r.Body).Decode(&metricDefinitionV110MetricDefinition); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceMetricDefinitionsPost(*metricDefinitionV110MetricDefinition)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricReportDefinitionsGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricReportDefinitionsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1TelemetryServiceMetricReportDefinitionsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdDelete -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	metricReportDefinitionId := params["metricReportDefinitionId"]
	result, err := c.service.RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdDelete(metricReportDefinitionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	metricReportDefinitionId := params["metricReportDefinitionId"]
	result, err := c.service.RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdGet(metricReportDefinitionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPatch -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	metricReportDefinitionId := params["metricReportDefinitionId"]
	metricReportDefinitionV133MetricReportDefinition := &openapi.MetricReportDefinitionV133MetricReportDefinition{}
	if err := json.NewDecoder(r.Body).Decode(&metricReportDefinitionV133MetricReportDefinition); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPatch(metricReportDefinitionId, *metricReportDefinitionV133MetricReportDefinition)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPut -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	metricReportDefinitionId := params["metricReportDefinitionId"]
	metricReportDefinitionV133MetricReportDefinition := &openapi.MetricReportDefinitionV133MetricReportDefinition{}
	if err := json.NewDecoder(r.Body).Decode(&metricReportDefinitionV133MetricReportDefinition); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPut(metricReportDefinitionId, *metricReportDefinitionV133MetricReportDefinition)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricReportDefinitionsPost -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricReportDefinitionsPost(w http.ResponseWriter, r *http.Request) {
	metricReportDefinitionV133MetricReportDefinition := &openapi.MetricReportDefinitionV133MetricReportDefinition{}
	if err := json.NewDecoder(r.Body).Decode(&metricReportDefinitionV133MetricReportDefinition); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceMetricReportDefinitionsPost(*metricReportDefinitionV133MetricReportDefinition)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricReportsGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricReportsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1TelemetryServiceMetricReportsGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricReportsMetricReportIdDelete -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricReportsMetricReportIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	metricReportId := params["metricReportId"]
	result, err := c.service.RedfishV1TelemetryServiceMetricReportsMetricReportIdDelete(metricReportId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceMetricReportsMetricReportIdGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceMetricReportsMetricReportIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	metricReportId := params["metricReportId"]
	result, err := c.service.RedfishV1TelemetryServiceMetricReportsMetricReportIdGet(metricReportId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServicePatch -
func (c *DefaultApiController) RedfishV1TelemetryServicePatch(w http.ResponseWriter, r *http.Request) {
	telemetryServiceV121TelemetryService := &openapi.TelemetryServiceV121TelemetryService{}
	if err := json.NewDecoder(r.Body).Decode(&telemetryServiceV121TelemetryService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServicePatch(*telemetryServiceV121TelemetryService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServicePut -
func (c *DefaultApiController) RedfishV1TelemetryServicePut(w http.ResponseWriter, r *http.Request) {
	telemetryServiceV121TelemetryService := &openapi.TelemetryServiceV121TelemetryService{}
	if err := json.NewDecoder(r.Body).Decode(&telemetryServiceV121TelemetryService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServicePut(*telemetryServiceV121TelemetryService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceTriggersGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceTriggersGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1TelemetryServiceTriggersGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceTriggersPost -
func (c *DefaultApiController) RedfishV1TelemetryServiceTriggersPost(w http.ResponseWriter, r *http.Request) {
	triggersV112Triggers := &openapi.TriggersV112Triggers{}
	if err := json.NewDecoder(r.Body).Decode(&triggersV112Triggers); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceTriggersPost(*triggersV112Triggers)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceTriggersTriggersIdDelete -
func (c *DefaultApiController) RedfishV1TelemetryServiceTriggersTriggersIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	triggersId := params["triggersId"]
	result, err := c.service.RedfishV1TelemetryServiceTriggersTriggersIdDelete(triggersId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceTriggersTriggersIdGet -
func (c *DefaultApiController) RedfishV1TelemetryServiceTriggersTriggersIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	triggersId := params["triggersId"]
	result, err := c.service.RedfishV1TelemetryServiceTriggersTriggersIdGet(triggersId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceTriggersTriggersIdPatch -
func (c *DefaultApiController) RedfishV1TelemetryServiceTriggersTriggersIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	triggersId := params["triggersId"]
	triggersV112Triggers := &openapi.TriggersV112Triggers{}
	if err := json.NewDecoder(r.Body).Decode(&triggersV112Triggers); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceTriggersTriggersIdPatch(triggersId, *triggersV112Triggers)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1TelemetryServiceTriggersTriggersIdPut -
func (c *DefaultApiController) RedfishV1TelemetryServiceTriggersTriggersIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	triggersId := params["triggersId"]
	triggersV112Triggers := &openapi.TriggersV112Triggers{}
	if err := json.NewDecoder(r.Body).Decode(&triggersV112Triggers); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1TelemetryServiceTriggersTriggersIdPut(triggersId, *triggersV112Triggers)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServiceActionsUpdateServiceSimpleUpdatePost -
func (c *DefaultApiController) RedfishV1UpdateServiceActionsUpdateServiceSimpleUpdatePost(w http.ResponseWriter, r *http.Request) {
	updateServiceV182SimpleUpdateRequestBody := &openapi.UpdateServiceV182SimpleUpdateRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&updateServiceV182SimpleUpdateRequestBody); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1UpdateServiceActionsUpdateServiceSimpleUpdatePost(*updateServiceV182SimpleUpdateRequestBody)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServiceActionsUpdateServiceStartUpdatePost -
func (c *DefaultApiController) RedfishV1UpdateServiceActionsUpdateServiceStartUpdatePost(w http.ResponseWriter, r *http.Request) {
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1UpdateServiceActionsUpdateServiceStartUpdatePost(*body)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServiceFirmwareInventoryGet -
func (c *DefaultApiController) RedfishV1UpdateServiceFirmwareInventoryGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1UpdateServiceFirmwareInventoryGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdGet -
func (c *DefaultApiController) RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	softwareInventoryId := params["softwareInventoryId"]
	result, err := c.service.RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdGet(softwareInventoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPatch -
func (c *DefaultApiController) RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	softwareInventoryId := params["softwareInventoryId"]
	softwareInventoryV130SoftwareInventory := &openapi.SoftwareInventoryV130SoftwareInventory{}
	if err := json.NewDecoder(r.Body).Decode(&softwareInventoryV130SoftwareInventory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPatch(softwareInventoryId, *softwareInventoryV130SoftwareInventory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPut -
func (c *DefaultApiController) RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	softwareInventoryId := params["softwareInventoryId"]
	softwareInventoryV130SoftwareInventory := &openapi.SoftwareInventoryV130SoftwareInventory{}
	if err := json.NewDecoder(r.Body).Decode(&softwareInventoryV130SoftwareInventory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPut(softwareInventoryId, *softwareInventoryV130SoftwareInventory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServiceGet -
func (c *DefaultApiController) RedfishV1UpdateServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1UpdateServiceGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServicePatch -
func (c *DefaultApiController) RedfishV1UpdateServicePatch(w http.ResponseWriter, r *http.Request) {
	updateServiceV182UpdateService := &openapi.UpdateServiceV182UpdateService{}
	if err := json.NewDecoder(r.Body).Decode(&updateServiceV182UpdateService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1UpdateServicePatch(*updateServiceV182UpdateService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServicePut -
func (c *DefaultApiController) RedfishV1UpdateServicePut(w http.ResponseWriter, r *http.Request) {
	updateServiceV182UpdateService := &openapi.UpdateServiceV182UpdateService{}
	if err := json.NewDecoder(r.Body).Decode(&updateServiceV182UpdateService); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1UpdateServicePut(*updateServiceV182UpdateService)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServiceSoftwareInventoryGet -
func (c *DefaultApiController) RedfishV1UpdateServiceSoftwareInventoryGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1UpdateServiceSoftwareInventoryGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdGet -
func (c *DefaultApiController) RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	softwareInventoryId := params["softwareInventoryId"]
	result, err := c.service.RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdGet(softwareInventoryId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPatch -
func (c *DefaultApiController) RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	softwareInventoryId := params["softwareInventoryId"]
	softwareInventoryV130SoftwareInventory := &openapi.SoftwareInventoryV130SoftwareInventory{}
	if err := json.NewDecoder(r.Body).Decode(&softwareInventoryV130SoftwareInventory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPatch(softwareInventoryId, *softwareInventoryV130SoftwareInventory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPut -
func (c *DefaultApiController) RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	softwareInventoryId := params["softwareInventoryId"]
	softwareInventoryV130SoftwareInventory := &openapi.SoftwareInventoryV130SoftwareInventory{}
	if err := json.NewDecoder(r.Body).Decode(&softwareInventoryV130SoftwareInventory); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RedfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPut(softwareInventoryId, *softwareInventoryV130SoftwareInventory)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}
